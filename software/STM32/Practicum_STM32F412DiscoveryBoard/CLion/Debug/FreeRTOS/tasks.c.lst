ARM GAS   			page 1


   1              	 .cpu cortex-m4
   2              	 .arch armv7e-m
   3              	 .fpu fpv4-sp-d16
   4              	 .eabi_attribute 27,1
   5              	 .eabi_attribute 28,1
   6              	 .eabi_attribute 20,1
   7              	 .eabi_attribute 21,1
   8              	 .eabi_attribute 23,3
   9              	 .eabi_attribute 24,1
  10              	 .eabi_attribute 25,1
  11              	 .eabi_attribute 26,1
  12              	 .eabi_attribute 30,6
  13              	 .eabi_attribute 34,0
  14              	 .eabi_attribute 18,4
  15              	 .file "tasks.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global pxCurrentTCB
  20              	 .section .bss.pxCurrentTCB,"aw",%nobits
  21              	 .align 2
  22              	 .type pxCurrentTCB,%object
  23              	 .size pxCurrentTCB,4
  24              	pxCurrentTCB:
  25 0000 00000000 	 .space 4
  26              	 .section .bss._ZL17pxReadyTasksLists,"aw",%nobits
  27              	 .align 2
  28              	 .type _ZL17pxReadyTasksLists,%object
  29              	 .size _ZL17pxReadyTasksLists,140
  30              	_ZL17pxReadyTasksLists:
  31 0000 00000000 	 .space 140
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .bss._ZL17xDelayedTaskList1,"aw",%nobits
  33              	 .align 2
  34              	 .type _ZL17xDelayedTaskList1,%object
  35              	 .size _ZL17xDelayedTaskList1,20
  36              	_ZL17xDelayedTaskList1:
  37 0000 00000000 	 .space 20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              	 .section .bss._ZL17xDelayedTaskList2,"aw",%nobits
  39              	 .align 2
  40              	 .type _ZL17xDelayedTaskList2,%object
  41              	 .size _ZL17xDelayedTaskList2,20
  42              	_ZL17xDelayedTaskList2:
  43 0000 00000000 	 .space 20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              	 .section .bss._ZL17pxDelayedTaskList,"aw",%nobits
  45              	 .align 2
ARM GAS   			page 2


  46              	 .type _ZL17pxDelayedTaskList,%object
  47              	 .size _ZL17pxDelayedTaskList,4
  48              	_ZL17pxDelayedTaskList:
  49 0000 00000000 	 .space 4
  50              	 .section .bss._ZL25pxOverflowDelayedTaskList,"aw",%nobits
  51              	 .align 2
  52              	 .type _ZL25pxOverflowDelayedTaskList,%object
  53              	 .size _ZL25pxOverflowDelayedTaskList,4
  54              	_ZL25pxOverflowDelayedTaskList:
  55 0000 00000000 	 .space 4
  56              	 .section .bss._ZL17xPendingReadyList,"aw",%nobits
  57              	 .align 2
  58              	 .type _ZL17xPendingReadyList,%object
  59              	 .size _ZL17xPendingReadyList,20
  60              	_ZL17xPendingReadyList:
  61 0000 00000000 	 .space 20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              	 .section .bss._ZL18xSuspendedTaskList,"aw",%nobits
  63              	 .align 2
  64              	 .type _ZL18xSuspendedTaskList,%object
  65              	 .size _ZL18xSuspendedTaskList,20
  66              	_ZL18xSuspendedTaskList:
  67 0000 00000000 	 .space 20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              	 .section .bss._ZL22uxCurrentNumberOfTasks,"aw",%nobits
  69              	 .align 2
  70              	 .type _ZL22uxCurrentNumberOfTasks,%object
  71              	 .size _ZL22uxCurrentNumberOfTasks,4
  72              	_ZL22uxCurrentNumberOfTasks:
  73 0000 00000000 	 .space 4
  74              	 .section .bss._ZL10xTickCount,"aw",%nobits
  75              	 .align 2
  76              	 .type _ZL10xTickCount,%object
  77              	 .size _ZL10xTickCount,4
  78              	_ZL10xTickCount:
  79 0000 00000000 	 .space 4
  80              	 .section .bss._ZL18uxTopReadyPriority,"aw",%nobits
  81              	 .align 2
  82              	 .type _ZL18uxTopReadyPriority,%object
  83              	 .size _ZL18uxTopReadyPriority,4
  84              	_ZL18uxTopReadyPriority:
  85 0000 00000000 	 .space 4
  86              	 .section .bss._ZL17xSchedulerRunning,"aw",%nobits
  87              	 .align 2
  88              	 .type _ZL17xSchedulerRunning,%object
  89              	 .size _ZL17xSchedulerRunning,4
  90              	_ZL17xSchedulerRunning:
  91 0000 00000000 	 .space 4
  92              	 .section .bss._ZL13uxPendedTicks,"aw",%nobits
  93              	 .align 2
  94              	 .type _ZL13uxPendedTicks,%object
ARM GAS   			page 3


  95              	 .size _ZL13uxPendedTicks,4
  96              	_ZL13uxPendedTicks:
  97 0000 00000000 	 .space 4
  98              	 .section .bss._ZL13xYieldPending,"aw",%nobits
  99              	 .align 2
 100              	 .type _ZL13xYieldPending,%object
 101              	 .size _ZL13xYieldPending,4
 102              	_ZL13xYieldPending:
 103 0000 00000000 	 .space 4
 104              	 .section .bss._ZL15xNumOfOverflows,"aw",%nobits
 105              	 .align 2
 106              	 .type _ZL15xNumOfOverflows,%object
 107              	 .size _ZL15xNumOfOverflows,4
 108              	_ZL15xNumOfOverflows:
 109 0000 00000000 	 .space 4
 110              	 .section .bss._ZL12uxTaskNumber,"aw",%nobits
 111              	 .align 2
 112              	 .type _ZL12uxTaskNumber,%object
 113              	 .size _ZL12uxTaskNumber,4
 114              	_ZL12uxTaskNumber:
 115 0000 00000000 	 .space 4
 116              	 .section .bss._ZL20xNextTaskUnblockTime,"aw",%nobits
 117              	 .align 2
 118              	 .type _ZL20xNextTaskUnblockTime,%object
 119              	 .size _ZL20xNextTaskUnblockTime,4
 120              	_ZL20xNextTaskUnblockTime:
 121 0000 00000000 	 .space 4
 122              	 .section .bss._ZL20uxSchedulerSuspended,"aw",%nobits
 123              	 .align 2
 124              	 .type _ZL20uxSchedulerSuspended,%object
 125              	 .size _ZL20uxSchedulerSuspended,4
 126              	_ZL20uxSchedulerSuspended:
 127 0000 00000000 	 .space 4
 128              	 .section .text.xTaskGenericCreate,"ax",%progbits
 129              	 .align 1
 130              	 .global xTaskGenericCreate
 131              	 .syntax unified
 132              	 .thumb
 133              	 .thumb_func
 134              	 .type xTaskGenericCreate,%function
 135              	xTaskGenericCreate:
 136              	 .fnstart
 137              	.LFB11:
 138              	 .file 1 "C:\\Users\\niels\\Documents\\Elektrotechniek\\Jaar 2\\ECS\\ECSL\\software\\STM32\\STM32Basis\\HAL\\gemeenschappelijk\\Third_Party\\FreeRTOS\\Source\\tasks.c"
   1:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
   2:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     All rights reserved
   4:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
   5:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
   7:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     This file is part of the FreeRTOS distribution.
   8:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
   9:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  13:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     ***************************************************************************
ARM GAS   			page 4


  14:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     ***************************************************************************
  19:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  20:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     link: http://www.freertos.org/a00114.html
  24:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  25:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     ***************************************************************************
  26:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *                                                                       *
  27:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    is the industry's de facto standard.                               *
  31:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *                                                                       *
  32:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****      *                                                                       *
  37:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     ***************************************************************************
  38:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  39:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     defined configASSERT()?
  42:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  43:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     embedded software for free we request you assist our global community by
  45:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     participating in the support forum.
  46:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  47:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  52:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  56:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  59:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  63:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     mission critical applications that require provable dependability.
  66:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  67:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****     1 tab == 4 spaces!
  68:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** */
  69:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  70:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Standard includes. */
ARM GAS   			page 5


  71:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #include <stdlib.h>
  72:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #include <string.h>
  73:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  74:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** task.h is included from an application file. */
  77:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  79:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* FreeRTOS includes. */
  80:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #include "FreeRTOS.h"
  81:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #include "task.h"
  82:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #include "timers.h"
  83:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #include "StackMacros.h"
  84:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  85:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** header files above, but not in this file, in order to generate the correct
  88:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
  91:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** functions but without including stdio.h here. */
  93:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	to generate human readable text from the raw data generated by the
  96:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#include <stdio.h>
  99:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 101:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Sanity check the configuration. */
 102:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
 103:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if( INCLUDE_vTaskSuspend != 1 )
 104:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
 105:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 106:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 107:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 108:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 109:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 110:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 111:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 112:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 113:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_PREEMPTION == 0 )
 114:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 115:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	performed just because a higher priority task has been woken. */
 116:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 117:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #else
 118:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 119:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 120:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 121:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Value that can be assigned to the eNotifyState member of the TCB. */
 122:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** typedef enum
 123:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 124:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eNotWaitingNotification = 0,
 125:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eWaitingNotification,
 126:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eNotified
 127:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** } eNotifyValue;
ARM GAS   			page 6


 128:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 129:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 130:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 131:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * and stores task state information, including a pointer to the task's context
 132:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * (the task's run time environment, including register values)
 133:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 134:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** typedef struct tskTaskControlBlock
 135:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 136:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 137:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 138:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 139:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 140:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocat
 141:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 142:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 143:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 144:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 145:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 146:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 147:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 148:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 149:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 150:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 151:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 152:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 153:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 154:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do n
 155:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 156:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 157:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 158:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 159:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. 
 160:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 161:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 162:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 163:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 164:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		UBaseType_t 	uxMutexesHeld;
 165:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 166:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 167:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 168:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		TaskHookFunction_t pxTaskTag;
 169:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 170:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 171:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 172:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 173:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 174:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 175:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 176:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 177:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 178:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 179:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 180:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 181:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 182:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 183:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 184:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		newlib and must provide system-wide implementations of the necessary
ARM GAS   			page 7


 185:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 186:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 187:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		struct 	_reent xNewLib_reent;
 188:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 189:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 190:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 191:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		volatile uint32_t ulNotifiedValue;
 192:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		volatile eNotifyValue eNotifyState;
 193:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
 194:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 195:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** } tskTCB;
 196:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 197:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 198:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** below to enable the use of older kernel aware debuggers. */
 199:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** typedef tskTCB TCB_t;
 200:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 201:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 202:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 203:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * be global, rather than file scope.
 204:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 205:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 206:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define static
 207:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 208:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 209:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 210:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static variables must be declared volatile. */
 211:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 212:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 213:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 214:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 215:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 216:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 217:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 218:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 219:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 220:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 221:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 222:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 223:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 224:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 225:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
 226:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 227:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 228:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 229:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 230:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 231:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 232:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 233:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 234:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 235:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 236:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 237:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 238:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 239:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 240:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 241:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Other file private variables. --------------------------------*/
ARM GAS   			page 8


 242:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 243:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 244:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 245:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 246:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 247:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 249:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 250:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 251:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 252:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 253:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** interrupts must not manipulate the xGenericListItem of a TCB, or any of the
 254:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** lists the xGenericListItem can be referenced from, if the scheduler is suspended.
 255:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 256:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 257:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** kernel to move the task from the pending ready list into the real ready list
 258:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 259:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** accessed from a critical section. */
 260:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 261:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 262:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 263:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 264:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 265:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 266:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 267:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 268:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 269:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*lint +e956 */
 270:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 271:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 272:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 273:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 274:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 275:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * is used purely for checking the high water mark for tasks.
 276:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 277:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 278:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 279:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 280:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 281:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 282:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 283:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define tskREADY_CHAR		( 'R' )
 284:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define tskDELETED_CHAR		( 'D' )
 285:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 286:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 287:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 288:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 289:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 290:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 291:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 292:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	performed in a generic way that is not optimised to any particular
 293:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	microcontroller architecture. */
 294:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 295:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 296:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	state task. */
 297:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 298:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{																									\
ARM GAS   			page 9


 299:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 300:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{																								\
 301:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 302:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}																								\
 303:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 304:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 305:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/*-----------------------------------------------------------*/
 306:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 307:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 308:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{																									\
 309:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 310:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 311:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{																								\
 312:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 313:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			--uxTopReadyPriority;																		\
 314:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}																								\
 315:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 																										\
 316:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 317:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 318:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 319:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 320:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 321:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/*-----------------------------------------------------------*/
 322:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 323:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 324:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	they are only required when a port optimised method of task selection is
 325:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	being used. */
 326:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 327:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 328:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 329:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 330:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 331:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 332:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 333:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	architecture being used. */
 334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 335:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 336:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 337:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 338:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/*-----------------------------------------------------------*/
 339:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 340:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 341:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{																								\
 342:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTopPriority;																		\
 343:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 																									\
 344:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 345:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 346:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 347:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 348:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 349:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 350:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/*-----------------------------------------------------------*/
 351:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 352:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 353:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 354:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	or suspended list then it won't be in a ready list. */
 355:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
ARM GAS   			page 10


 356:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{																									\
 357:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 358:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{																								\
 359:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 360:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}																								\
 361:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 362:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 363:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 364:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 365:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 366:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 367:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 368:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** count overflows. */
 369:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 370:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {																									\
 371:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	List_t *pxTemp;																					\
 372:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 																									\
 373:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 374:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 375:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 																									\
 376:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 377:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 378:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 379:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	xNumOfOverflows++;																				\
 380:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 381:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 382:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 383:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 384:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 385:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 386:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 387:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * the task.  It is inserted at the end of the list.
 388:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 389:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 390:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 391:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 392:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 393:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 394:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 395:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 396:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 397:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 398:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 399:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 400:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 401:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 402:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 403:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* The item value of the event list item is normally used to hold the priority
 404:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 405:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 406:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** is important its value is not updated due to a task priority change while it is
 407:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** being used for another purpose.  The following bit definition is used to inform
 408:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** the scheduler that the value should not be changed - in which case it is the
 409:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 410:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** to its original value when it is released. */
 411:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if configUSE_16_BIT_TICKS == 1
 412:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS   			page 11


 413:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #else
 414:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 415:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 416:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 417:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* Callback function prototypes. --------------------------*/
 418:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 419:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 420:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 421:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 422:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if configUSE_TICK_HOOK > 0
 423:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	extern void vApplicationTickHook( void );
 424:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 425:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 426:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* File private functions. --------------------------------*/
 427:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 428:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 429:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 430:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * into the TCB structure.
 431:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 432:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
 433:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 434:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /**
 435:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 436:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 437:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * is in any other state.
 438:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 439:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 440:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 441:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 442:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 443:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 444:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 445:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * automatically upon the creation of the first task.
 446:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 447:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 448:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 449:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 450:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 451:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 452:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * creation of the first user task.
 453:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
 454:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 455:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 456:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
 457:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * void prvIdleTask( void *pvParameters );
 458:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
 459:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 460:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 461:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 462:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 464:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * including the stack pointed to by the TCB.
 465:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
 466:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 467:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 468:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 469:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
ARM GAS   			page 12


 470:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 471:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 472:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 473:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 474:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 475:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 476:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 477:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 478:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * and its TCB deleted.
 479:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 480:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 481:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 482:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 483:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 484:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * either the current or the overflow delayed task list.
 485:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 486:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
 487:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 488:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 489:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 490:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * allocation was successful.
 491:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 492:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
 493:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 494:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 495:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 496:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 497:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * a suspended list, etc.).
 498:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
 499:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 500:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * NORMAL APPLICATION CODE.
 501:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 502:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 503:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 504:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
 505:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 506:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 507:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 508:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 509:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 510:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * This function determines the 'high water mark' of the task stack by
 511:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * determining how much of the stack remains at the original preset value.
 512:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 513:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 514:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 515:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 516:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 517:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 518:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 519:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 520:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 521:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * next move a task from the Blocked state to the Running state.
 522:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
 523:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 524:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 525:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 526:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * set to a value other than 1.
ARM GAS   			page 13


 527:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 528:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 529:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 530:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 531:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 532:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 533:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 534:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
 535:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 536:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * will exit the Blocked state.
 537:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
 538:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvResetNextTaskUnblockTime( void );
 539:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 540:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 541:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 542:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/*
 543:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 544:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	 * human readable tables of task information.
 545:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	 */
 546:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 547:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 548:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif
 549:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 550:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 551:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t
 552:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 139              	 .loc 1 552 1
 140              	 .cfi_startproc
 141              	 
 142              	 
 143 0000 80B5     	 push {r7,lr}
 144              	 .save {r7,lr}
 145              	 .cfi_def_cfa_offset 8
 146              	 .cfi_offset 7,-8
 147              	 .cfi_offset 14,-4
 148              	 .pad #48
 149 0002 8CB0     	 sub sp,sp,#48
 150              	 .cfi_def_cfa_offset 56
 151              	 .setfp r7,sp,#8
 152 0004 02AF     	 add r7,sp,#8
 153              	 .cfi_def_cfa 7,48
 154 0006 F860     	 str r0,[r7,#12]
 155 0008 B960     	 str r1,[r7,#8]
 156 000a 3B60     	 str r3,[r7]
 157 000c 1346     	 mov r3,r2
 158 000e FB80     	 strh r3,[r7,#6]
 553:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xReturn;
 554:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TCB_t * pxNewTCB;
 555:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** StackType_t *pxTopOfStack;
 556:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 557:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxTaskCode );
 159              	 .loc 1 557 2
 160 0010 FB68     	 ldr r3,[r7,#12]
 161 0012 002B     	 cmp r3,#0
 162 0014 0AD1     	 bne .L2
 163              	.LBB95:
 164              	.LBB96:
ARM GAS   			page 14


 165              	 .file 2 "C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*
   2:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     All rights reserved
   4:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
   5:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
   7:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
   9:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  13:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  14:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  19:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  20:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  25:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  26:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *                                                                       *
  27:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    is the industry's de facto standard.                               *
  31:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *                                                                       *
  32:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *                                                                       *
  37:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  38:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  39:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     defined configASSERT()?
  42:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  43:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     embedded software for free we request you assist our global community by
  45:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     participating in the support forum.
  46:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  47:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  52:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  56:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
ARM GAS   			page 15


  57:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  59:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  63:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     mission critical applications that require provable dependability.
  66:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  67:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     1 tab == 4 spaces!
  68:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** */
  69:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  70:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  71:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef PORTMACRO_H
  72:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define PORTMACRO_H
  73:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  74:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifdef __cplusplus
  75:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** extern "C" {
  76:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
  77:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  78:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------
  79:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Port specific definitions.
  80:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  81:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * given hardware and compiler.
  83:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  84:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * These settings should not be altered.
  85:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *-----------------------------------------------------------
  86:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  87:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  88:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Type definitions. */
  89:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portCHAR		char
  90:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portFLOAT		float
  91:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portDOUBLE		double
  92:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portLONG		long
  93:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSHORT		short
  94:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portBASE_TYPE	long
  96:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  97:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** typedef long BaseType_t;
  99:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** typedef unsigned long UBaseType_t;
 100:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 101:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	typedef uint16_t TickType_t;
 103:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #else
 105:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	typedef uint32_t TickType_t;
 106:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 108:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	not need to be guarded with a critical section. */
 110:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 112:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 113:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
ARM GAS   			page 16


 114:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specifics. */
 115:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 119:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 120:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Scheduler utilities. */
 121:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portYIELD() 															\
 122:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {																				\
 123:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 																				\
 126:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile( "dsb" );													\
 129:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile( "isb" );													\
 130:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 131:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 132:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 137:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 138:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Critical section management. */
 139:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** extern void vPortEnterCritical( void );
 140:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** extern void vPortExitCritical( void );
 141:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 148:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 149:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 150:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** (which build with all the ports) will build. */
 153:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 157:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Tickless idle/low power functionality. */
 158:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 162:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 163:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 164:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specific optimisations. */
 165:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 168:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 169:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
ARM GAS   			page 17


 171:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Generic helper function. */
 172:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	{
 174:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	uint8_t ucReturn;
 175:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 176:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		return ucReturn;
 178:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	}
 179:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 180:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Check the configuration. */
 181:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#endif
 184:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 185:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 189:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/*-----------------------------------------------------------*/
 190:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 191:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - ucPort
 192:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 193:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 195:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 196:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 197:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifdef configASSERT
 198:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 201:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 202:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* portNOP() is not required by this port. */
 203:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portNOP()
 204:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 205:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef portFORCE_INLINE
 206:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 207:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 208:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 209:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 210:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 211:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 212:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {
 213:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** uint32_t ulNewBASEPRI;
 214:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile
 166              	 .loc 2 215 2
 167              	 .syntax unified
 168              	
 169 0016 4FF01003 	 mov r3,#16
 170 001a 83F31188 	 msr basepri,r3
 171 001e BFF36F8F 	 isb 
 172 0022 BFF34F8F 	 dsb 
 173              	
 174              	
 175              	 .thumb
 176              	 .syntax unified
 177 0026 BB61     	 str r3,[r7,#24]
ARM GAS   			page 18


 216:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 217:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	mov %0, %1												\n"	\
 218:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	msr basepri, %0											\n" \
 219:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	isb														\n" \
 220:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	dsb														\n" \
 221:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 222:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	);
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 178              	 .loc 2 223 1
 179 0028 00BF     	 nop
 180              	.L3:
 181              	.LBE96:
 182              	.LBE95:
 183              	 .loc 1 557 2 discriminator 1
 184 002a FEE7     	 b .L3
 185              	.L2:
 558:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 186              	 .loc 1 558 2
 187 002c 3B6B     	 ldr r3,[r7,#48]
 188 002e 062B     	 cmp r3,#6
 189 0030 0AD9     	 bls .L4
 190              	.LBB97:
 191              	.LBB98:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 192              	 .loc 2 215 2
 193              	 .syntax unified
 194              	
 195 0032 4FF01003 	 mov r3,#16
 196 0036 83F31188 	 msr basepri,r3
 197 003a BFF36F8F 	 isb 
 198 003e BFF34F8F 	 dsb 
 199              	
 200              	
 201              	 .thumb
 202              	 .syntax unified
 203 0042 7B61     	 str r3,[r7,#20]
 204              	 .loc 2 223 1
 205 0044 00BF     	 nop
 206              	.L5:
 207              	.LBE98:
 208              	.LBE97:
 209              	 .loc 1 558 2 discriminator 2
 210 0046 FEE7     	 b .L5
 211              	.L4:
 559:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 560:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 561:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	checking that the allocation was successful. */
 562:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 212              	 .loc 1 562 35
 213 0048 FB88     	 ldrh r3,[r7,#6]
 214 004a B96B     	 ldr r1,[r7,#56]
 215 004c 1846     	 mov r0,r3
 216 004e FFF7FEFF 	 bl _ZL22prvAllocateTCBAndStacktPm
 217 0052 0346     	 mov r3,r0
 218 0054 3B62     	 str r3,[r7,#32]
 563:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 564:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( pxNewTCB != NULL )
ARM GAS   			page 19


 219              	 .loc 1 564 2
 220 0056 3B6A     	 ldr r3,[r7,#32]
 221 0058 002B     	 cmp r3,#0
 222 005a 00F08F80 	 beq .L6
 565:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 566:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 567:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Should the task be created in privileged mode? */
 568:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			BaseType_t xRunPrivileged;
 569:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 570:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 571:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xRunPrivileged = pdTRUE;
 572:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 573:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 574:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 575:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xRunPrivileged = pdFALSE;
 576:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 577:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 578:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 579:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( puxStackBuffer != NULL )
 580:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 581:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The application provided its own stack.  Note this so no
 582:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				attempt is made to delete the stack should that task be
 583:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				deleted. */
 584:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
 585:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 586:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 587:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 588:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The stack was allocated dynamically.  Note this so it can be
 589:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				deleted again if the task is deleted. */
 590:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
 591:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 592:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 593:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 594:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 595:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 596:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 597:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		required by the port. */
 598:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 599:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 600:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 223              	 .loc 1 600 29
 224 005e 3B6A     	 ldr r3,[r7,#32]
 225 0060 1A6B     	 ldr r2,[r3,#48]
 226              	 .loc 1 600 37
 227 0062 FB88     	 ldrh r3,[r7,#6]
 228 0064 03F18043 	 add r3,r3,#1073741824
 229 0068 013B     	 subs r3,r3,#1
 230 006a 9B00     	 lsls r3,r3,#2
 231              	 .loc 1 600 17
 232 006c 1344     	 add r3,r3,r2
 233 006e FB61     	 str r3,[r7,#28]
 601:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 234              	 .loc 1 601 82
 235 0070 FB69     	 ldr r3,[r7,#28]
 236 0072 23F00703 	 bic r3,r3,#7
 237              	 .loc 1 601 17
 238 0076 FB61     	 str r3,[r7,#28]
ARM GAS   			page 20


 602:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 603:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 604:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 239              	 .loc 1 604 4
 240 0078 FB69     	 ldr r3,[r7,#28]
 241 007a 03F00703 	 and r3,r3,#7
 242 007e 002B     	 cmp r3,#0
 243 0080 0AD0     	 beq .L7
 244              	.LBB99:
 245              	.LBB100:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 246              	 .loc 2 215 2
 247              	 .syntax unified
 248              	
 249 0082 4FF01003 	 mov r3,#16
 250 0086 83F31188 	 msr basepri,r3
 251 008a BFF36F8F 	 isb 
 252 008e BFF34F8F 	 dsb 
 253              	
 254              	
 255              	 .thumb
 256              	 .syntax unified
 257 0092 3B61     	 str r3,[r7,#16]
 258              	 .loc 2 223 1
 259 0094 00BF     	 nop
 260              	.L8:
 261              	.LBE100:
 262              	.LBE99:
 263              	 .loc 1 604 4 discriminator 3
 264 0096 FEE7     	 b .L8
 265              	.L7:
 605:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 606:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#else /* portSTACK_GROWTH */
 607:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 608:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 609:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 610:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 611:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 612:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 613:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If we want to use stack checking on architectures that use
 614:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			a positive stack growth direction then we also need to store the
 615:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			other extreme of the stack space. */
 616:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 617:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 618:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* portSTACK_GROWTH */
 619:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 620:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 621:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 266              	 .loc 1 621 28
 267 0098 FB88     	 ldrh r3,[r7,#6]
 268 009a 0093     	 str r3,[sp]
 269 009c FB6B     	 ldr r3,[r7,#60]
 270 009e 3A6B     	 ldr r2,[r7,#48]
 271 00a0 B968     	 ldr r1,[r7,#8]
 272 00a2 386A     	 ldr r0,[r7,#32]
 273 00a4 FFF7FEFF 	 bl _ZL25prvInitialiseTCBVariablesP19tskTaskControlBlockPKcmPK14xMEMORY_REGIONt
 622:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 21


 623:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 624:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 625:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		to the start of the task function. Once the stack has been initialised
 626:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the	top of stack variable is updated. */
 627:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 628:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 629:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 630:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 631:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 632:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 633:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 274              	 .loc 1 633 50
 275 00a8 3A68     	 ldr r2,[r7]
 276 00aa F968     	 ldr r1,[r7,#12]
 277 00ac F869     	 ldr r0,[r7,#28]
 278 00ae FFF7FEFF 	 bl pxPortInitialiseStack
 279 00b2 0246     	 mov r2,r0
 280              	 .loc 1 633 27
 281 00b4 3B6A     	 ldr r3,[r7,#32]
 282 00b6 1A60     	 str r2,[r3]
 634:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 635:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 636:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 637:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 283              	 .loc 1 637 3
 284 00b8 7B6B     	 ldr r3,[r7,#52]
 285 00ba 002B     	 cmp r3,#0
 286 00bc 02D0     	 beq .L9
 638:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 639:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 640:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			task can use this as a handle to delete the task later if
 641:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			required.*/
 642:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 287              	 .loc 1 642 19
 288 00be 7B6B     	 ldr r3,[r7,#52]
 289 00c0 3A6A     	 ldr r2,[r7,#32]
 290 00c2 1A60     	 str r2,[r3]
 291              	.L9:
 643:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 644:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
 645:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 646:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 647:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 648:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 649:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 650:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		updated. */
 651:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 292              	 .loc 1 651 3
 293 00c4 FFF7FEFF 	 bl vPortEnterCritical
 652:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 653:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxCurrentNumberOfTasks++;
 294              	 .loc 1 653 26
 295 00c8 404B     	 ldr r3,.L15
 296 00ca 1B68     	 ldr r3,[r3]
 297 00cc 0133     	 adds r3,r3,#1
 298 00ce 3F4A     	 ldr r2,.L15
 299 00d0 1360     	 str r3,[r2]
ARM GAS   			page 22


 654:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxCurrentTCB == NULL )
 300              	 .loc 1 654 8
 301 00d2 3F4B     	 ldr r3,.L15+4
 302 00d4 1B68     	 ldr r3,[r3]
 303              	 .loc 1 654 21
 304 00d6 002B     	 cmp r3,#0
 305 00d8 0CBF     	 ite eq
 306 00da 0123     	 moveq r3,#1
 307 00dc 0023     	 movne r3,#0
 308 00de DBB2     	 uxtb r3,r3
 309              	 .loc 1 654 4
 310 00e0 002B     	 cmp r3,#0
 311 00e2 0ED0     	 beq .L10
 655:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 656:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 657:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				the suspended state - make this the current task. */
 658:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 312              	 .loc 1 658 18
 313 00e4 3A4A     	 ldr r2,.L15+4
 314 00e6 3B6A     	 ldr r3,[r7,#32]
 315 00e8 1360     	 str r3,[r2]
 659:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 660:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 316              	 .loc 1 660 32
 317 00ea 384B     	 ldr r3,.L15
 318 00ec 1B68     	 ldr r3,[r3]
 319 00ee 012B     	 cmp r3,#1
 320 00f0 0CBF     	 ite eq
 321 00f2 0123     	 moveq r3,#1
 322 00f4 0023     	 movne r3,#0
 323 00f6 DBB2     	 uxtb r3,r3
 324              	 .loc 1 660 5
 325 00f8 002B     	 cmp r3,#0
 326 00fa 19D0     	 beq .L11
 661:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 662:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* This is the first task to be created so do the preliminary
 663:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					initialisation required.  We will not recover if this call
 664:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					fails, but we will report the failure. */
 665:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvInitialiseTaskLists();
 327              	 .loc 1 665 28
 328 00fc FFF7FEFF 	 bl _ZL22prvInitialiseTaskListsv
 329 0100 16E0     	 b .L11
 330              	.L10:
 666:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 667:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
 668:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 669:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 670:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 671:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 672:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 673:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 674:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* If the scheduler is not already running, make this task the
 675:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				current task if it is the highest priority task to be created
 676:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				so far. */
 677:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 331              	 .loc 1 677 27
 332 0102 344B     	 ldr r3,.L15+8
ARM GAS   			page 23


 333 0104 1B68     	 ldr r3,[r3]
 334 0106 002B     	 cmp r3,#0
 335 0108 0CBF     	 ite eq
 336 010a 0123     	 moveq r3,#1
 337 010c 0023     	 movne r3,#0
 338 010e DBB2     	 uxtb r3,r3
 339              	 .loc 1 677 5
 340 0110 002B     	 cmp r3,#0
 341 0112 0DD0     	 beq .L11
 678:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 679:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 342              	 .loc 1 679 10
 343 0114 2E4B     	 ldr r3,.L15+4
 344 0116 1B68     	 ldr r3,[r3]
 345              	 .loc 1 679 24
 346 0118 DB6A     	 ldr r3,[r3,#44]
 347              	 .loc 1 679 35
 348 011a 3A6B     	 ldr r2,[r7,#48]
 349 011c 9A42     	 cmp r2,r3
 350 011e 2CBF     	 ite cs
 351 0120 0123     	 movcs r3,#1
 352 0122 0023     	 movcc r3,#0
 353 0124 DBB2     	 uxtb r3,r3
 354              	 .loc 1 679 6
 355 0126 002B     	 cmp r3,#0
 356 0128 02D0     	 beq .L11
 680:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
 681:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						pxCurrentTCB = pxNewTCB;
 357              	 .loc 1 681 20
 358 012a 294A     	 ldr r2,.L15+4
 359 012c 3B6A     	 ldr r3,[r7,#32]
 360 012e 1360     	 str r3,[r2]
 361              	.L11:
 682:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
 683:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
 684:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
 685:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 686:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
 687:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 688:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
 689:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 690:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 691:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 692:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 693:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 694:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxTaskNumber++;
 362              	 .loc 1 694 16
 363 0130 294B     	 ldr r3,.L15+12
 364 0132 1B68     	 ldr r3,[r3]
 365 0134 0133     	 adds r3,r3,#1
 366 0136 284A     	 ldr r2,.L15+12
 367 0138 1360     	 str r3,[r2]
 695:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 696:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 697:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 698:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 699:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
ARM GAS   			page 24


 368              	 .loc 1 699 27
 369 013a 274B     	 ldr r3,.L15+12
 370 013c 1A68     	 ldr r2,[r3]
 371 013e 3B6A     	 ldr r3,[r7,#32]
 372 0140 5A64     	 str r2,[r3,#68]
 700:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 701:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 702:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 703:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 704:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 373              	 .loc 1 704 4
 374 0142 264B     	 ldr r3,.L15+16
 375 0144 1A68     	 ldr r2,[r3]
 376 0146 3B6A     	 ldr r3,[r7,#32]
 377 0148 DB6A     	 ldr r3,[r3,#44]
 378 014a 0121     	 movs r1,#1
 379 014c 01FA03F3 	 lsl r3,r1,r3
 380 0150 1343     	 orrs r3,r3,r2
 381 0152 224A     	 ldr r2,.L15+16
 382 0154 1360     	 str r3,[r2]
 383 0156 3B6A     	 ldr r3,[r7,#32]
 384 0158 DA6A     	 ldr r2,[r3,#44]
 385 015a 1346     	 mov r3,r2
 386 015c 9B00     	 lsls r3,r3,#2
 387 015e 1344     	 add r3,r3,r2
 388 0160 9B00     	 lsls r3,r3,#2
 389 0162 1F4A     	 ldr r2,.L15+20
 390 0164 1A44     	 add r2,r2,r3
 391 0166 3B6A     	 ldr r3,[r7,#32]
 392 0168 0433     	 adds r3,r3,#4
 393 016a 1946     	 mov r1,r3
 394 016c 1046     	 mov r0,r2
 395 016e FFF7FEFF 	 bl vListInsertEnd
 705:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 706:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = pdPASS;
 396              	 .loc 1 706 12
 397 0172 0123     	 movs r3,#1
 398 0174 7B62     	 str r3,[r7,#36]
 707:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			portSETUP_TCB( pxNewTCB );
 708:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 709:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 399              	 .loc 1 709 3
 400 0176 FFF7FEFF 	 bl vPortExitCritical
 401 017a 02E0     	 b .L12
 402              	.L6:
 710:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 711:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
 712:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 713:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 403              	 .loc 1 713 11
 404 017c 4FF0FF33 	 mov r3,#-1
 405 0180 7B62     	 str r3,[r7,#36]
 406              	.L12:
 714:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_CREATE_FAILED();
 715:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 716:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 717:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( xReturn == pdPASS )
ARM GAS   			page 25


 407              	 .loc 1 717 2
 408 0182 7B6A     	 ldr r3,[r7,#36]
 409 0184 012B     	 cmp r3,#1
 410 0186 1BD1     	 bne .L13
 718:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 719:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 411              	 .loc 1 719 25
 412 0188 124B     	 ldr r3,.L15+8
 413 018a 1B68     	 ldr r3,[r3]
 414 018c 002B     	 cmp r3,#0
 415 018e 14BF     	 ite ne
 416 0190 0123     	 movne r3,#1
 417 0192 0023     	 moveq r3,#0
 418 0194 DBB2     	 uxtb r3,r3
 419              	 .loc 1 719 3
 420 0196 002B     	 cmp r3,#0
 421 0198 12D0     	 beq .L13
 720:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 721:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If the created task is of a higher priority than the current task
 722:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			then it should run now. */
 723:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 422              	 .loc 1 723 8
 423 019a 0D4B     	 ldr r3,.L15+4
 424 019c 1B68     	 ldr r3,[r3]
 425              	 .loc 1 723 22
 426 019e DB6A     	 ldr r3,[r3,#44]
 427              	 .loc 1 723 33
 428 01a0 3A6B     	 ldr r2,[r7,#48]
 429 01a2 9A42     	 cmp r2,r3
 430 01a4 8CBF     	 ite hi
 431 01a6 0123     	 movhi r3,#1
 432 01a8 0023     	 movls r3,#0
 433 01aa DBB2     	 uxtb r3,r3
 434              	 .loc 1 723 4
 435 01ac 002B     	 cmp r3,#0
 436 01ae 07D0     	 beq .L13
 724:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 725:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 437              	 .loc 1 725 5
 438 01b0 0C4B     	 ldr r3,.L15+24
 439 01b2 4FF08052 	 mov r2,#268435456
 440 01b6 1A60     	 str r2,[r3]
 441              	 .syntax unified
 442              	
 443 01b8 BFF34F8F 	 dsb
 444              	
 445              	
 446 01bc BFF36F8F 	 isb
 447              	
 448              	 .thumb
 449              	 .syntax unified
 450              	.L13:
 726:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 727:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 728:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 729:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 730:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
ARM GAS   			page 26


 731:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 732:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
 733:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 734:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 735:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 736:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 737:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 738:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xReturn;
 451              	 .loc 1 738 9
 452 01c0 7B6A     	 ldr r3,[r7,#36]
 739:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 453              	 .loc 1 739 1
 454 01c2 1846     	 mov r0,r3
 455 01c4 2837     	 adds r7,r7,#40
 456              	 .cfi_def_cfa_offset 8
 457 01c6 BD46     	 mov sp,r7
 458              	 .cfi_def_cfa_register 13
 459              	 
 460 01c8 80BD     	 pop {r7,pc}
 461              	.L16:
 462 01ca 00BF     	 .align 2
 463              	.L15:
 464 01cc 00000000 	 .word _ZL22uxCurrentNumberOfTasks
 465 01d0 00000000 	 .word pxCurrentTCB
 466 01d4 00000000 	 .word _ZL17xSchedulerRunning
 467 01d8 00000000 	 .word _ZL12uxTaskNumber
 468 01dc 00000000 	 .word _ZL18uxTopReadyPriority
 469 01e0 00000000 	 .word _ZL17pxReadyTasksLists
 470 01e4 04ED00E0 	 .word -536810236
 471              	 .cfi_endproc
 472              	.LFE11:
 473              	 .fnend
 474              	 .size xTaskGenericCreate,.-xTaskGenericCreate
 475              	 .section .text.vTaskDelay,"ax",%progbits
 476              	 .align 1
 477              	 .global vTaskDelay
 478              	 .syntax unified
 479              	 .thumb
 480              	 .thumb_func
 481              	 .type vTaskDelay,%function
 482              	vTaskDelay:
 483              	 .fnstart
 484              	.LFB12:
 740:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 741:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 742:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 743:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 744:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 745:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 746:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
 747:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 748:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 749:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 750:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If null is passed in here then it is the calling task that is
 751:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			being deleted. */
 752:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 753:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 27


 754:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 755:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 756:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			the termination list and free up any memory allocated by the
 757:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			scheduler for the TCB and stack. */
 758:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 759:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 760:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 761:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 762:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 763:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 764:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 765:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 766:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 767:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Is the task waiting on an event also? */
 768:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 769:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 770:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 771:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 772:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 773:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 774:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 775:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 776:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 777:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 778:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 779:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 780:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			there is a task that has been deleted and that it should therefore
 781:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			check the xTasksWaitingTermination list. */
 782:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			++uxTasksDeleted;
 783:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 784:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 785:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			can detect that the task lists need re-generating. */
 786:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxTaskNumber++;
 787:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 788:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_DELETE( pxTCB );
 789:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 790:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 791:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 792:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 793:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		been deleted. */
 794:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 795:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 796:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxTCB == pxCurrentTCB )
 797:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 798:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 799:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 800:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 801:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				in which Windows specific clean up operations are performed,
 802:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				after which it is not possible to yield away from this task -
 803:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 804:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				required. */
 805:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 806:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				portYIELD_WITHIN_API();
 807:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 808:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 809:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 810:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Reset the next expected unblock time in case it referred to
ARM GAS   			page 28


 811:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				the task that has just been deleted. */
 812:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskENTER_CRITICAL();
 813:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 814:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvResetNextTaskUnblockTime();
 815:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 816:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskEXIT_CRITICAL();
 817:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 818:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 819:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 820:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 821:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskDelete */
 822:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 823:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 824:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 825:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 826:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
 827:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 828:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TickType_t xTimeToWake;
 829:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 830:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 831:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( pxPreviousWakeTime );
 832:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 833:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 834:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 835:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vTaskSuspendAll();
 836:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 837:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 838:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			block. */
 839:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 840:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 841:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 842:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 843:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 844:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 845:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 846:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The tick count has overflowed since this function was
 847:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				lasted called.  In this case the only time we should ever
 848:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				actually delay is if the wake time has also	overflowed,
 849:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				and the wake time is greater than the tick time.  When this
 850:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				is the case it is as if neither time had overflowed. */
 851:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 852:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 853:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xShouldDelay = pdTRUE;
 854:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 855:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
 856:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 857:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 858:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 859:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 860:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 861:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 862:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 863:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				delay if either the wake time has overflowed, and/or the
 864:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				tick time is less than the wake time. */
 865:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 866:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 867:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xShouldDelay = pdTRUE;
ARM GAS   			page 29


 868:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 869:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
 870:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 871:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 872:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 873:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 874:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 875:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Update the wake time ready for the next call. */
 876:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 877:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 878:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xShouldDelay != pdFALSE )
 879:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 880:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				traceTASK_DELAY_UNTIL();
 881:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 882:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Remove the task from the ready list before adding it to the
 883:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				blocked list as the same list item is used for both lists. */
 884:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 885:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 886:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The current task must be in a ready list, so there is
 887:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					no need to check, and the port reset macro can be called
 888:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					directly. */
 889:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 890:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 891:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
 892:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 893:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 894:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 895:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 896:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 897:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 898:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
 899:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 900:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 901:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 902:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 903:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 904:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 905:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 906:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		have put ourselves to sleep. */
 907:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 908:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 909:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			portYIELD_WITHIN_API();
 910:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 911:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
 912:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 913:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 914:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 915:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 916:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 917:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 918:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 919:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 920:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 921:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 922:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
 923:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 485              	 .loc 1 923 2
ARM GAS   			page 30


 486              	 .cfi_startproc
 487              	 
 488              	 
 489 0000 80B5     	 push {r7,lr}
 490              	 .save {r7,lr}
 491              	 .cfi_def_cfa_offset 8
 492              	 .cfi_offset 7,-8
 493              	 .cfi_offset 14,-4
 494              	 .pad #24
 495 0002 86B0     	 sub sp,sp,#24
 496              	 .cfi_def_cfa_offset 32
 497              	 .setfp r7,sp,#0
 498 0004 00AF     	 add r7,sp,#0
 499              	 .cfi_def_cfa_register 7
 500 0006 7860     	 str r0,[r7,#4]
 924:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TickType_t xTimeToWake;
 925:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 501              	 .loc 1 925 13
 502 0008 0023     	 movs r3,#0
 503 000a 7B61     	 str r3,[r7,#20]
 926:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 927:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 928:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 929:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 504              	 .loc 1 929 3
 505 000c 7B68     	 ldr r3,[r7,#4]
 506 000e 002B     	 cmp r3,#0
 507 0010 3BD0     	 beq .L18
 930:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 931:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 508              	 .loc 1 931 4
 509 0012 254B     	 ldr r3,.L24
 510 0014 1B68     	 ldr r3,[r3]
 511 0016 002B     	 cmp r3,#0
 512 0018 14BF     	 ite ne
 513 001a 0123     	 movne r3,#1
 514 001c 0023     	 moveq r3,#0
 515 001e DBB2     	 uxtb r3,r3
 516 0020 002B     	 cmp r3,#0
 517 0022 0AD0     	 beq .L19
 518              	.LBB101:
 519              	.LBB102:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 520              	 .loc 2 215 2
 521              	 .syntax unified
 522              	
 523 0024 4FF01003 	 mov r3,#16
 524 0028 83F31188 	 msr basepri,r3
 525 002c BFF36F8F 	 isb 
 526 0030 BFF34F8F 	 dsb 
 527              	
 528              	
 529              	 .thumb
 530              	 .syntax unified
 531 0034 FB60     	 str r3,[r7,#12]
 532              	 .loc 2 223 1
 533 0036 00BF     	 nop
ARM GAS   			page 31


 534              	.L20:
 535              	.LBE102:
 536              	.LBE101:
 537              	 .loc 1 931 4 discriminator 1
 538 0038 FEE7     	 b .L20
 539              	.L19:
 932:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vTaskSuspendAll();
 540              	 .loc 1 932 19
 541 003a FFF7FEFF 	 bl vTaskSuspendAll
 933:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 934:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				traceTASK_DELAY();
 935:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 936:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* A task that is removed from the event list while the
 937:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				scheduler is suspended will not get placed in the ready
 938:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				list or removed from the blocked list until the scheduler
 939:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				is resumed.
 940:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 941:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				This task cannot be in an event list as it is the currently
 942:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				executing task. */
 943:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 944:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 945:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				not a problem. */
 946:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 542              	 .loc 1 946 19
 543 003e 1B4B     	 ldr r3,.L24+4
 544 0040 1B68     	 ldr r3,[r3]
 545              	 .loc 1 946 17
 546 0042 7A68     	 ldr r2,[r7,#4]
 547 0044 1344     	 add r3,r3,r2
 548 0046 3B61     	 str r3,[r7,#16]
 947:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 948:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* We must remove ourselves from the ready list before adding
 949:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				ourselves to the blocked list as the same list item is used for
 950:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				both lists. */
 951:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 549              	 .loc 1 951 26
 550 0048 194B     	 ldr r3,.L24+8
 551 004a 1B68     	 ldr r3,[r3]
 552              	 .loc 1 951 21
 553 004c 0433     	 adds r3,r3,#4
 554 004e 1846     	 mov r0,r3
 555 0050 FFF7FEFF 	 bl uxListRemove
 556 0054 0346     	 mov r3,r0
 557              	 .loc 1 951 61
 558 0056 002B     	 cmp r3,#0
 559 0058 0CBF     	 ite eq
 560 005a 0123     	 moveq r3,#1
 561 005c 0023     	 movne r3,#0
 562 005e DBB2     	 uxtb r3,r3
 563              	 .loc 1 951 5
 564 0060 002B     	 cmp r3,#0
 565 0062 0BD0     	 beq .L21
 952:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 953:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The current task must be in a ready list, so there is
 954:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					no need to check, and the port reset macro can be called
 955:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					directly. */
 956:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
ARM GAS   			page 32


 566              	 .loc 1 956 6
 567 0064 124B     	 ldr r3,.L24+8
 568 0066 1B68     	 ldr r3,[r3]
 569 0068 DB6A     	 ldr r3,[r3,#44]
 570 006a 0122     	 movs r2,#1
 571 006c 02FA03F3 	 lsl r3,r2,r3
 572 0070 DA43     	 mvns r2,r3
 573 0072 104B     	 ldr r3,.L24+12
 574 0074 1B68     	 ldr r3,[r3]
 575 0076 1340     	 ands r3,r3,r2
 576 0078 0E4A     	 ldr r2,.L24+12
 577 007a 1360     	 str r3,[r2]
 578              	.L21:
 957:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 958:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
 959:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 960:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 961:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 962:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 579              	 .loc 1 962 35
 580 007c 3869     	 ldr r0,[r7,#16]
 581 007e FFF7FEFF 	 bl _ZL30prvAddCurrentTaskToDelayedListm
 963:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 964:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 582              	 .loc 1 964 36
 583 0082 FFF7FEFF 	 bl xTaskResumeAll
 584 0086 0346     	 mov r3,r0
 585 0088 7B61     	 str r3,[r7,#20]
 586              	.L18:
 965:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 966:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
 967:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 968:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 969:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 970:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 971:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 972:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		have put ourselves to sleep. */
 973:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 587              	 .loc 1 973 3
 588 008a 7B69     	 ldr r3,[r7,#20]
 589 008c 002B     	 cmp r3,#0
 590 008e 07D1     	 bne .L23
 974:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 975:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			portYIELD_WITHIN_API();
 591              	 .loc 1 975 4
 592 0090 094B     	 ldr r3,.L24+16
 593 0092 4FF08052 	 mov r2,#268435456
 594 0096 1A60     	 str r2,[r3]
 595              	 .syntax unified
 596              	
 597 0098 BFF34F8F 	 dsb
 598              	
 599              	
 600 009c BFF36F8F 	 isb
 601              	
 602              	 .thumb
 603              	 .syntax unified
ARM GAS   			page 33


 604              	.L23:
 976:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 977:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
 978:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 979:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 980:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 981:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 605              	 .loc 1 981 2
 606 00a0 00BF     	 nop
 607 00a2 1837     	 adds r7,r7,#24
 608              	 .cfi_def_cfa_offset 8
 609 00a4 BD46     	 mov sp,r7
 610              	 .cfi_def_cfa_register 13
 611              	 
 612 00a6 80BD     	 pop {r7,pc}
 613              	.L25:
 614              	 .align 2
 615              	.L24:
 616 00a8 00000000 	 .word _ZL20uxSchedulerSuspended
 617 00ac 00000000 	 .word _ZL10xTickCount
 618 00b0 00000000 	 .word pxCurrentTCB
 619 00b4 00000000 	 .word _ZL18uxTopReadyPriority
 620 00b8 04ED00E0 	 .word -536810236
 621              	 .cfi_endproc
 622              	.LFE12:
 623              	 .fnend
 624              	 .size vTaskDelay,.-vTaskDelay
 625              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 626              	 .align 1
 627              	 .global uxTaskPriorityGet
 628              	 .syntax unified
 629              	 .thumb
 630              	 .thumb_func
 631              	 .type uxTaskPriorityGet,%function
 632              	uxTaskPriorityGet:
 633              	 .fnstart
 634              	.LFB13:
 982:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 983:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskDelay */
 984:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
 985:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 986:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 987:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 988:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 989:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 990:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eTaskState eReturn;
 991:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	List_t *pxStateList;
 992:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 993:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 994:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( pxTCB );
 995:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 996:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxTCB == pxCurrentTCB )
 997:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 998:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* The task calling this function is querying its own state. */
 999:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			eReturn = eRunning;
1000:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1001:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
ARM GAS   			page 34


1002:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1003:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			taskENTER_CRITICAL();
1004:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1005:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
1006:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1007:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			taskEXIT_CRITICAL();
1008:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1009:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1010:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1011:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1012:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				lists. */
1013:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				eReturn = eBlocked;
1014:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1015:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1016:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1017:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1018:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1019:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The task being queried is referenced from the suspended
1020:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					list.  Is it genuinely suspended or is it block
1021:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					indefinitely? */
1022:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1023:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1024:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						eReturn = eSuspended;
1025:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1026:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1027:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1028:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						eReturn = eBlocked;
1029:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1030:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1031:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#endif
1032:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1033:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1034:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
1035:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1036:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The task being queried is referenced from the deleted
1037:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					tasks list. */
1038:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					eReturn = eDeleted;
1039:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1040:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#endif
1041:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1042:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1043:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1044:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* If the task is not in any other state, it must be in the
1045:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				Ready (including pending ready) state. */
1046:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				eReturn = eReady;
1047:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1048:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1049:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1050:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return eReturn;
1051:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1052:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1053:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_eTaskGetState */
1054:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1055:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1056:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1057:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1058:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
ARM GAS   			page 35


1059:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 635              	 .loc 1 1059 2
 636              	 .cfi_startproc
 637              	 
 638              	 
 639 0000 80B5     	 push {r7,lr}
 640              	 .save {r7,lr}
 641              	 .cfi_def_cfa_offset 8
 642              	 .cfi_offset 7,-8
 643              	 .cfi_offset 14,-4
 644              	 .pad #16
 645 0002 84B0     	 sub sp,sp,#16
 646              	 .cfi_def_cfa_offset 24
 647              	 .setfp r7,sp,#0
 648 0004 00AF     	 add r7,sp,#0
 649              	 .cfi_def_cfa_register 7
 650 0006 7860     	 str r0,[r7,#4]
1060:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
1061:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxReturn;
1062:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1063:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 651              	 .loc 1 1063 3
 652 0008 FFF7FEFF 	 bl vPortEnterCritical
1064:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1065:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If null is passed in here then it is the priority of the that
1066:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1067:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 653              	 .loc 1 1067 12
 654 000c 7B68     	 ldr r3,[r7,#4]
 655 000e 002B     	 cmp r3,#0
 656 0010 02D1     	 bne .L27
 657              	 .loc 1 1067 12 is_stmt 0 discriminator 1
 658 0012 074B     	 ldr r3,.L30
 659 0014 1B68     	 ldr r3,[r3]
 660 0016 00E0     	 b .L28
 661              	.L27:
 662              	 .loc 1 1067 12 discriminator 2
 663 0018 7B68     	 ldr r3,[r7,#4]
 664              	.L28:
 665              	 .loc 1 1067 10 is_stmt 1 discriminator 4
 666 001a FB60     	 str r3,[r7,#12]
1068:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxReturn = pxTCB->uxPriority;
 667              	 .loc 1 1068 13 discriminator 4
 668 001c FB68     	 ldr r3,[r7,#12]
 669 001e DB6A     	 ldr r3,[r3,#44]
 670 0020 BB60     	 str r3,[r7,#8]
1069:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1070:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 671              	 .loc 1 1070 3 discriminator 4
 672 0022 FFF7FEFF 	 bl vPortExitCritical
1071:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1072:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return uxReturn;
 673              	 .loc 1 1072 10 discriminator 4
 674 0026 BB68     	 ldr r3,[r7,#8]
1073:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 675              	 .loc 1 1073 2 discriminator 4
 676 0028 1846     	 mov r0,r3
ARM GAS   			page 36


 677 002a 1037     	 adds r7,r7,#16
 678              	 .cfi_def_cfa_offset 8
 679 002c BD46     	 mov sp,r7
 680              	 .cfi_def_cfa_register 13
 681              	 
 682 002e 80BD     	 pop {r7,pc}
 683              	.L31:
 684              	 .align 2
 685              	.L30:
 686 0030 00000000 	 .word pxCurrentTCB
 687              	 .cfi_endproc
 688              	.LFE13:
 689              	 .fnend
 690              	 .size uxTaskPriorityGet,.-uxTaskPriorityGet
 691              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 692              	 .align 1
 693              	 .global uxTaskPriorityGetFromISR
 694              	 .syntax unified
 695              	 .thumb
 696              	 .thumb_func
 697              	 .type uxTaskPriorityGetFromISR,%function
 698              	uxTaskPriorityGetFromISR:
 699              	 .fnstart
 700              	.LFB14:
1074:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1075:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1076:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1077:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1078:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1079:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1080:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1081:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 701              	 .loc 1 1081 2
 702              	 .cfi_startproc
 703              	 
 704              	 
 705 0000 80B5     	 push {r7,lr}
 706              	 .save {r7,lr}
 707              	 .cfi_def_cfa_offset 8
 708              	 .cfi_offset 7,-8
 709              	 .cfi_offset 14,-4
 710              	 .pad #32
 711 0002 88B0     	 sub sp,sp,#32
 712              	 .cfi_def_cfa_offset 40
 713              	 .setfp r7,sp,#0
 714 0004 00AF     	 add r7,sp,#0
 715              	 .cfi_def_cfa_register 7
 716 0006 7860     	 str r0,[r7,#4]
1082:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
1083:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1084:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1085:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1086:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1087:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1088:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1089:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1090:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS   			page 37


1091:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1092:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1093:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		been assigned a priority above the configured maximum system call
1094:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1095:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1096:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1097:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1098:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1099:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		provided on the following link:
1100:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1101:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 717              	 .loc 1 1101 3
 718 0008 FFF7FEFF 	 bl vPortValidateInterruptPriority
 719              	.LBB103:
 720              	.LBB104:
 224:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 225:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 226:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 227:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 228:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {
 229:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 230:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 231:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile
 721              	 .loc 2 231 2
 722              	 .syntax unified
 723              	
 724 000c EFF31182 	 mrs r2,basepri
 725 0010 4FF01003 	 mov r3,#16
 726 0014 83F31188 	 msr basepri,r3
 727 0018 BFF36F8F 	 isb 
 728 001c BFF34F8F 	 dsb 
 729              	
 730              	
 731              	 .thumb
 732              	 .syntax unified
 733 0020 3A61     	 str r2,[r7,#16]
 734 0022 FB60     	 str r3,[r7,#12]
 232:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 233:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	mrs %0, basepri											\n" \
 234:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	mov %1, %2												\n"	\
 235:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	msr basepri, %1											\n" \
 236:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	isb														\n" \
 237:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	dsb														\n" \
 238:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 239:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	);
 240:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 241:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 242:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	warnings. */
 243:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	return ulOriginalBASEPRI;
 735              	 .loc 2 243 9
 736 0024 3B69     	 ldr r3,[r7,#16]
 737              	.LBE104:
 738              	.LBE103:
1102:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1103:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 739              	 .loc 1 1103 27
 740 0026 FB61     	 str r3,[r7,#28]
ARM GAS   			page 38


1104:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1105:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1106:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			task that is being queried. */
1107:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 741              	 .loc 1 1107 12
 742 0028 7B68     	 ldr r3,[r7,#4]
 743 002a 002B     	 cmp r3,#0
 744 002c 02D1     	 bne .L34
 745              	 .loc 1 1107 12 is_stmt 0 discriminator 1
 746 002e 094B     	 ldr r3,.L37
 747 0030 1B68     	 ldr r3,[r3]
 748 0032 00E0     	 b .L35
 749              	.L34:
 750              	 .loc 1 1107 12 discriminator 2
 751 0034 7B68     	 ldr r3,[r7,#4]
 752              	.L35:
 753              	 .loc 1 1107 10 is_stmt 1 discriminator 4
 754 0036 BB61     	 str r3,[r7,#24]
1108:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxReturn = pxTCB->uxPriority;
 755              	 .loc 1 1108 13 discriminator 4
 756 0038 BB69     	 ldr r3,[r7,#24]
 757 003a DB6A     	 ldr r3,[r3,#44]
 758 003c 7B61     	 str r3,[r7,#20]
 759 003e FB69     	 ldr r3,[r7,#28]
 760 0040 BB60     	 str r3,[r7,#8]
 761              	.LBB105:
 762              	.LBB106:
 244:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 245:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 246:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 247:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 248:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {
 249:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile
 763              	 .loc 2 249 2 discriminator 4
 764 0042 BB68     	 ldr r3,[r7,#8]
 765              	 .syntax unified
 766              	
 767 0044 83F31188 	 msr basepri,r3
 768              	
 250:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 251:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
 252:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	);
 253:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 769              	 .loc 2 253 1 discriminator 4
 770              	 .thumb
 771              	 .syntax unified
 772 0048 00BF     	 nop
 773              	.LBE106:
 774              	.LBE105:
1109:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1110:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1111:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1112:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return uxReturn;
 775              	 .loc 1 1112 10 discriminator 4
 776 004a 7B69     	 ldr r3,[r7,#20]
1113:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 777              	 .loc 1 1113 2 discriminator 4
ARM GAS   			page 39


 778 004c 1846     	 mov r0,r3
 779 004e 2037     	 adds r7,r7,#32
 780              	 .cfi_def_cfa_offset 8
 781 0050 BD46     	 mov sp,r7
 782              	 .cfi_def_cfa_register 13
 783              	 
 784 0052 80BD     	 pop {r7,pc}
 785              	.L38:
 786              	 .align 2
 787              	.L37:
 788 0054 00000000 	 .word pxCurrentTCB
 789              	 .cfi_endproc
 790              	.LFE14:
 791              	 .fnend
 792              	 .size uxTaskPriorityGetFromISR,.-uxTaskPriorityGetFromISR
 793              	 .section .text.vTaskPrioritySet,"ax",%progbits
 794              	 .align 1
 795              	 .global vTaskPrioritySet
 796              	 .syntax unified
 797              	 .thumb
 798              	 .thumb_func
 799              	 .type vTaskPrioritySet,%function
 800              	vTaskPrioritySet:
 801              	 .fnstart
 802              	.LFB15:
1114:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1115:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1116:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1117:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1118:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1119:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1120:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1121:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 803              	 .loc 1 1121 2
 804              	 .cfi_startproc
 805              	 
 806              	 
 807 0000 80B5     	 push {r7,lr}
 808              	 .save {r7,lr}
 809              	 .cfi_def_cfa_offset 8
 810              	 .cfi_offset 7,-8
 811              	 .cfi_offset 14,-4
 812              	 .pad #32
 813 0002 88B0     	 sub sp,sp,#32
 814              	 .cfi_def_cfa_offset 40
 815              	 .setfp r7,sp,#0
 816 0004 00AF     	 add r7,sp,#0
 817              	 .cfi_def_cfa_register 7
 818 0006 7860     	 str r0,[r7,#4]
 819 0008 3960     	 str r1,[r7]
1122:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
1123:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1124:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 820              	 .loc 1 1124 13
 821 000a 0023     	 movs r3,#0
 822 000c FB61     	 str r3,[r7,#28]
1125:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 40


1126:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 823              	 .loc 1 1126 3
 824 000e 3B68     	 ldr r3,[r7]
 825 0010 062B     	 cmp r3,#6
 826 0012 0AD9     	 bls .L40
 827              	.LBB107:
 828              	.LBB108:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 829              	 .loc 2 215 2
 830              	 .syntax unified
 831              	
 832 0014 4FF01003 	 mov r3,#16
 833 0018 83F31188 	 msr basepri,r3
 834 001c BFF36F8F 	 isb 
 835 0020 BFF34F8F 	 dsb 
 836              	
 837              	
 838              	 .thumb
 839              	 .syntax unified
 840 0024 FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 841              	 .loc 2 223 1
 842 0026 00BF     	 nop
 843              	.L41:
 844              	.LBE108:
 845              	.LBE107:
 846              	 .loc 1 1126 3 discriminator 1
 847 0028 FEE7     	 b .L41
 848              	.L40:
1127:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1128:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Ensure the new priority is valid. */
1129:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 849              	 .loc 1 1129 3
 850 002a 3B68     	 ldr r3,[r7]
 851 002c 062B     	 cmp r3,#6
 852 002e 01D9     	 bls .L42
1130:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1131:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853              	 .loc 1 1131 18
 854 0030 0623     	 movs r3,#6
 855 0032 3B60     	 str r3,[r7]
 856              	.L42:
1132:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1133:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1134:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1135:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1136:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1137:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1138:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 857              	 .loc 1 1138 3
 858 0034 FFF7FEFF 	 bl vPortEnterCritical
1139:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1140:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1141:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			task that is being changed. */
1142:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 859              	 .loc 1 1142 12
 860 0038 7B68     	 ldr r3,[r7,#4]
ARM GAS   			page 41


 861 003a 002B     	 cmp r3,#0
 862 003c 02D1     	 bne .L43
 863              	 .loc 1 1142 12 is_stmt 0 discriminator 1
 864 003e 4E4B     	 ldr r3,.L52
 865 0040 1B68     	 ldr r3,[r3]
 866 0042 00E0     	 b .L44
 867              	.L43:
 868              	 .loc 1 1142 12 discriminator 2
 869 0044 7B68     	 ldr r3,[r7,#4]
 870              	.L44:
 871              	 .loc 1 1142 10 is_stmt 1 discriminator 4
 872 0046 BB61     	 str r3,[r7,#24]
1143:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1144:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1145:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1146:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1147:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1148:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 873              	 .loc 1 1148 27 discriminator 4
 874 0048 BB69     	 ldr r3,[r7,#24]
 875 004a DB6C     	 ldr r3,[r3,#76]
 876 004c 7B61     	 str r3,[r7,#20]
1149:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1150:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#else
1151:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1152:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1153:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1154:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#endif
1155:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1156:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 877              	 .loc 1 1156 4 discriminator 4
 878 004e 7A69     	 ldr r2,[r7,#20]
 879 0050 3B68     	 ldr r3,[r7]
 880 0052 9A42     	 cmp r2,r3
 881 0054 00F08A80 	 beq .L45
1157:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1158:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The priority change may have readied a task of higher
1159:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				priority than the calling task. */
1160:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 882              	 .loc 1 1160 5
 883 0058 3A68     	 ldr r2,[r7]
 884 005a 7B69     	 ldr r3,[r7,#20]
 885 005c 9A42     	 cmp r2,r3
 886 005e 17D9     	 bls .L46
1161:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1162:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxTCB != pxCurrentTCB )
 887              	 .loc 1 1162 19
 888 0060 454B     	 ldr r3,.L52
 889 0062 1B68     	 ldr r3,[r3]
 890              	 .loc 1 1162 16
 891 0064 BA69     	 ldr r2,[r7,#24]
 892 0066 9A42     	 cmp r2,r3
 893 0068 14BF     	 ite ne
 894 006a 0123     	 movne r3,#1
 895 006c 0023     	 moveq r3,#0
 896 006e DBB2     	 uxtb r3,r3
 897              	 .loc 1 1162 6
ARM GAS   			page 42


 898 0070 002B     	 cmp r3,#0
 899 0072 19D0     	 beq .L47
1163:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1164:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The priority of a task other than the currently
1165:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						running task is being raised.  Is the priority being
1166:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						raised above that of the running task? */
1167:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 900              	 .loc 1 1167 28
 901 0074 404B     	 ldr r3,.L52
 902 0076 1B68     	 ldr r3,[r3]
 903              	 .loc 1 1167 42
 904 0078 DB6A     	 ldr r3,[r3,#44]
 905              	 .loc 1 1167 25
 906 007a 3A68     	 ldr r2,[r7]
 907 007c 9A42     	 cmp r2,r3
 908 007e 2CBF     	 ite cs
 909 0080 0123     	 movcs r3,#1
 910 0082 0023     	 movcc r3,#0
 911 0084 DBB2     	 uxtb r3,r3
 912              	 .loc 1 1167 7
 913 0086 002B     	 cmp r3,#0
 914 0088 0ED0     	 beq .L47
1168:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
1169:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xYieldRequired = pdTRUE;
 915              	 .loc 1 1169 23
 916 008a 0123     	 movs r3,#1
 917 008c FB61     	 str r3,[r7,#28]
 918 008e 0BE0     	 b .L47
 919              	.L46:
1170:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
1171:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						else
1172:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
1173:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1174:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
1175:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1176:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1177:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1178:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The priority of the running task is being raised,
1179:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						but the running task must already be the highest
1180:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						priority task able to run so no yield is required. */
1181:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1182:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1183:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 920              	 .loc 1 1183 23
 921 0090 394B     	 ldr r3,.L52
 922 0092 1B68     	 ldr r3,[r3]
 923              	 .loc 1 1183 20
 924 0094 BA69     	 ldr r2,[r7,#24]
 925 0096 9A42     	 cmp r2,r3
 926 0098 0CBF     	 ite eq
 927 009a 0123     	 moveq r3,#1
 928 009c 0023     	 movne r3,#0
 929 009e DBB2     	 uxtb r3,r3
 930              	 .loc 1 1183 10
 931 00a0 002B     	 cmp r3,#0
 932 00a2 01D0     	 beq .L47
1184:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
ARM GAS   			page 43


1185:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Setting the priority of the running task down means
1186:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					there may now be another task of higher priority that
1187:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					is ready to execute. */
1188:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xYieldRequired = pdTRUE;
 933              	 .loc 1 1188 21
 934 00a4 0123     	 movs r3,#1
 935 00a6 FB61     	 str r3,[r7,#28]
 936              	.L47:
1189:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1190:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1191:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1192:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Setting the priority of any other task down does not
1193:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					require a yield as the running task must be above the
1194:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					new priority of the task being modified. */
1195:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1196:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1197:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Remember the ready list the task might be referenced from
1198:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				before its uxPriority member is changed so the
1199:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1200:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 937              	 .loc 1 1200 27
 938 00a8 BB69     	 ldr r3,[r7,#24]
 939 00aa DB6A     	 ldr r3,[r3,#44]
 940 00ac 3B61     	 str r3,[r7,#16]
1201:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1202:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1203:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1204:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Only change the priority being used if the task is not
1205:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					currently using an inherited priority. */
1206:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 941              	 .loc 1 1206 17
 942 00ae BB69     	 ldr r3,[r7,#24]
 943 00b0 DA6C     	 ldr r2,[r3,#76]
 944              	 .loc 1 1206 42
 945 00b2 BB69     	 ldr r3,[r7,#24]
 946 00b4 DB6A     	 ldr r3,[r3,#44]
 947              	 .loc 1 1206 6
 948 00b6 9A42     	 cmp r2,r3
 949 00b8 02D1     	 bne .L48
1207:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1208:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 950              	 .loc 1 1208 25
 951 00ba BB69     	 ldr r3,[r7,#24]
 952 00bc 3A68     	 ldr r2,[r7]
 953 00be DA62     	 str r2,[r3,#44]
 954              	.L48:
1209:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1210:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1211:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1212:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1213:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1214:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1215:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The base priority gets set whatever. */
1216:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 955              	 .loc 1 1216 28
 956 00c0 BB69     	 ldr r3,[r7,#24]
 957 00c2 3A68     	 ldr r2,[r7]
ARM GAS   			page 44


 958 00c4 DA64     	 str r2,[r3,#76]
1217:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1218:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#else
1219:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1220:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1221:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1222:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
1223:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1224:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Only reset the event list item value if the value is not
1225:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				being used for anything else. */
1226:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 959              	 .loc 1 1226 11
 960 00c6 BB69     	 ldr r3,[r7,#24]
 961 00c8 9B69     	 ldr r3,[r3,#24]
 962              	 .loc 1 1226 5
 963 00ca 002B     	 cmp r3,#0
 964 00cc 04DB     	 blt .L49
1227:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1228:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 965              	 .loc 1 1228 6
 966 00ce 3B68     	 ldr r3,[r7]
 967 00d0 C3F10702 	 rsb r2,r3,#7
 968 00d4 BB69     	 ldr r3,[r7,#24]
 969 00d6 9A61     	 str r2,[r3,#24]
 970              	.L49:
1229:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1230:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1231:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1232:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1233:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1234:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1235:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1236:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				nothing more than change it's priority variable. However, if
1237:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				the task is in a ready list it needs to be removed and placed
1238:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				in the list appropriate to its new priority. */
1239:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 971              	 .loc 1 1239 9
 972 00d8 BB69     	 ldr r3,[r7,#24]
 973 00da 5969     	 ldr r1,[r3,#20]
 974 00dc 3A69     	 ldr r2,[r7,#16]
 975 00de 1346     	 mov r3,r2
 976 00e0 9B00     	 lsls r3,r3,#2
 977 00e2 1344     	 add r3,r3,r2
 978 00e4 9B00     	 lsls r3,r3,#2
 979 00e6 254A     	 ldr r2,.L52+4
 980 00e8 1344     	 add r3,r3,r2
 981 00ea 9942     	 cmp r1,r3
 982 00ec 0CBF     	 ite eq
 983 00ee 0123     	 moveq r3,#1
 984 00f0 0023     	 movne r3,#0
 985 00f2 DBB2     	 uxtb r3,r3
 986              	 .loc 1 1239 5
 987 00f4 002B     	 cmp r3,#0
 988 00f6 2ED0     	 beq .L50
1240:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1241:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The task is currently in its ready list - remove before adding
1242:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					it to it's new ready list.  As we are in a critical section we
ARM GAS   			page 45


1243:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					can do this even if the scheduler is suspended. */
1244:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 989              	 .loc 1 1244 22
 990 00f8 BB69     	 ldr r3,[r7,#24]
 991 00fa 0433     	 adds r3,r3,#4
 992 00fc 1846     	 mov r0,r3
 993 00fe FFF7FEFF 	 bl uxListRemove
 994 0102 0346     	 mov r3,r0
 995              	 .loc 1 1244 55
 996 0104 002B     	 cmp r3,#0
 997 0106 0CBF     	 ite eq
 998 0108 0123     	 moveq r3,#1
 999 010a 0023     	 movne r3,#0
 1000 010c DBB2     	 uxtb r3,r3
 1001              	 .loc 1 1244 6
 1002 010e 002B     	 cmp r3,#0
 1003 0110 09D0     	 beq .L51
1245:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1246:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* It is known that the task is in its ready list so
1247:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						there is no need to check again and the port level
1248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						reset macro can be called directly. */
1249:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1004              	 .loc 1 1249 7
 1005 0112 1B4B     	 ldr r3,.L52+8
 1006 0114 1A68     	 ldr r2,[r3]
 1007 0116 0121     	 movs r1,#1
 1008 0118 3B69     	 ldr r3,[r7,#16]
 1009 011a 01FA03F3 	 lsl r3,r1,r3
 1010 011e DB43     	 mvns r3,r3
 1011 0120 1340     	 ands r3,r3,r2
 1012 0122 174A     	 ldr r2,.L52+8
 1013 0124 1360     	 str r3,[r2]
 1014              	.L51:
1250:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1251:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1252:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1253:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1254:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1255:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1015              	 .loc 1 1255 6
 1016 0126 164B     	 ldr r3,.L52+8
 1017 0128 1A68     	 ldr r2,[r3]
 1018 012a BB69     	 ldr r3,[r7,#24]
 1019 012c DB6A     	 ldr r3,[r3,#44]
 1020 012e 0121     	 movs r1,#1
 1021 0130 01FA03F3 	 lsl r3,r1,r3
 1022 0134 1343     	 orrs r3,r3,r2
 1023 0136 124A     	 ldr r2,.L52+8
 1024 0138 1360     	 str r3,[r2]
 1025 013a BB69     	 ldr r3,[r7,#24]
 1026 013c DA6A     	 ldr r2,[r3,#44]
 1027 013e 1346     	 mov r3,r2
 1028 0140 9B00     	 lsls r3,r3,#2
 1029 0142 1344     	 add r3,r3,r2
 1030 0144 9B00     	 lsls r3,r3,#2
 1031 0146 0D4A     	 ldr r2,.L52+4
 1032 0148 1A44     	 add r2,r2,r3
ARM GAS   			page 46


 1033 014a BB69     	 ldr r3,[r7,#24]
 1034 014c 0433     	 adds r3,r3,#4
 1035 014e 1946     	 mov r1,r3
 1036 0150 1046     	 mov r0,r2
 1037 0152 FFF7FEFF 	 bl vListInsertEnd
 1038              	.L50:
1256:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1257:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1258:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1259:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1260:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1261:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1262:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( xYieldRequired == pdTRUE )
 1039              	 .loc 1 1262 5
 1040 0156 FB69     	 ldr r3,[r7,#28]
 1041 0158 012B     	 cmp r3,#1
 1042 015a 07D1     	 bne .L45
1263:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1264:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1043              	 .loc 1 1264 6
 1044 015c 094B     	 ldr r3,.L52+12
 1045 015e 4FF08052 	 mov r2,#268435456
 1046 0162 1A60     	 str r2,[r3]
 1047              	 .syntax unified
 1048              	
 1049 0164 BFF34F8F 	 dsb
 1050              	
 1051              	
 1052 0168 BFF36F8F 	 isb
 1053              	
 1054              	 .thumb
 1055              	 .syntax unified
 1056              	.L45:
1265:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1266:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1267:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1268:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1269:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1270:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1271:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Remove compiler warning about unused variables when the port
1272:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				optimised task selection is not being used. */
1273:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1274:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1275:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1276:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 1057              	 .loc 1 1276 3
 1058 016c FFF7FEFF 	 bl vPortExitCritical
1277:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 1059              	 .loc 1 1277 2
 1060 0170 00BF     	 nop
 1061 0172 2037     	 adds r7,r7,#32
 1062              	 .cfi_def_cfa_offset 8
 1063 0174 BD46     	 mov sp,r7
 1064              	 .cfi_def_cfa_register 13
 1065              	 
 1066 0176 80BD     	 pop {r7,pc}
 1067              	.L53:
ARM GAS   			page 47


 1068              	 .align 2
 1069              	.L52:
 1070 0178 00000000 	 .word pxCurrentTCB
 1071 017c 00000000 	 .word _ZL17pxReadyTasksLists
 1072 0180 00000000 	 .word _ZL18uxTopReadyPriority
 1073 0184 04ED00E0 	 .word -536810236
 1074              	 .cfi_endproc
 1075              	.LFE15:
 1076              	 .fnend
 1077              	 .size vTaskPrioritySet,.-vTaskPrioritySet
 1078              	 .section .text.vTaskSuspend,"ax",%progbits
 1079              	 .align 1
 1080              	 .global vTaskSuspend
 1081              	 .syntax unified
 1082              	 .thumb
 1083              	 .thumb_func
 1084              	 .type vTaskSuspend,%function
 1085              	vTaskSuspend:
 1086              	 .fnstart
 1087              	.LFB16:
1278:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1279:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1280:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1281:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1282:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1283:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1284:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1285:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 1088              	 .loc 1 1285 2
 1089              	 .cfi_startproc
 1090              	 
 1091              	 
 1092 0000 80B5     	 push {r7,lr}
 1093              	 .save {r7,lr}
 1094              	 .cfi_def_cfa_offset 8
 1095              	 .cfi_offset 7,-8
 1096              	 .cfi_offset 14,-4
 1097              	 .pad #16
 1098 0002 84B0     	 sub sp,sp,#16
 1099              	 .cfi_def_cfa_offset 24
 1100              	 .setfp r7,sp,#0
 1101 0004 00AF     	 add r7,sp,#0
 1102              	 .cfi_def_cfa_register 7
 1103 0006 7860     	 str r0,[r7,#4]
1286:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
1287:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1288:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 1104              	 .loc 1 1288 3
 1105 0008 FFF7FEFF 	 bl vPortEnterCritical
1289:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1290:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If null is passed in here then it is the running task that is
1291:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			being suspended. */
1292:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1106              	 .loc 1 1292 12
 1107 000c 7B68     	 ldr r3,[r7,#4]
 1108 000e 002B     	 cmp r3,#0
 1109 0010 02D1     	 bne .L55
ARM GAS   			page 48


 1110              	 .loc 1 1292 12 is_stmt 0 discriminator 1
 1111 0012 474B     	 ldr r3,.L66
 1112 0014 1B68     	 ldr r3,[r3]
 1113 0016 00E0     	 b .L56
 1114              	.L55:
 1115              	 .loc 1 1292 12 discriminator 2
 1116 0018 7B68     	 ldr r3,[r7,#4]
 1117              	.L56:
 1118              	 .loc 1 1292 10 is_stmt 1 discriminator 4
 1119 001a FB60     	 str r3,[r7,#12]
1293:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1294:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1295:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1296:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1297:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			suspended list. */
1298:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 1120              	 .loc 1 1298 20 discriminator 4
 1121 001c FB68     	 ldr r3,[r7,#12]
 1122 001e 0433     	 adds r3,r3,#4
 1123 0020 1846     	 mov r0,r3
 1124 0022 FFF7FEFF 	 bl uxListRemove
 1125 0026 0346     	 mov r3,r0
 1126              	 .loc 1 1298 53 discriminator 4
 1127 0028 002B     	 cmp r3,#0
 1128 002a 0CBF     	 ite eq
 1129 002c 0123     	 moveq r3,#1
 1130 002e 0023     	 movne r3,#0
 1131 0030 DBB2     	 uxtb r3,r3
 1132              	 .loc 1 1298 4 discriminator 4
 1133 0032 002B     	 cmp r3,#0
 1134 0034 15D0     	 beq .L57
1299:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1300:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1135              	 .loc 1 1300 5
 1136 0036 FB68     	 ldr r3,[r7,#12]
 1137 0038 DA6A     	 ldr r2,[r3,#44]
 1138 003a 3E49     	 ldr r1,.L66+4
 1139 003c 1346     	 mov r3,r2
 1140 003e 9B00     	 lsls r3,r3,#2
 1141 0040 1344     	 add r3,r3,r2
 1142 0042 9B00     	 lsls r3,r3,#2
 1143 0044 0B44     	 add r3,r3,r1
 1144 0046 1B68     	 ldr r3,[r3]
 1145 0048 002B     	 cmp r3,#0
 1146 004a 0AD1     	 bne .L57
 1147              	 .loc 1 1300 5 is_stmt 0 discriminator 1
 1148 004c 3A4B     	 ldr r3,.L66+8
 1149 004e 1A68     	 ldr r2,[r3]
 1150 0050 FB68     	 ldr r3,[r7,#12]
 1151 0052 DB6A     	 ldr r3,[r3,#44]
 1152 0054 0121     	 movs r1,#1
 1153 0056 01FA03F3 	 lsl r3,r1,r3
 1154 005a DB43     	 mvns r3,r3
 1155 005c 1340     	 ands r3,r3,r2
 1156 005e 364A     	 ldr r2,.L66+8
 1157 0060 1360     	 str r3,[r2]
 1158              	.L57:
ARM GAS   			page 49


1301:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1302:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1303:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1304:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1305:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1306:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1307:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Is the task waiting on an event also? */
1308:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1159              	 .loc 1 1308 8 is_stmt 1
 1160 0062 FB68     	 ldr r3,[r7,#12]
 1161 0064 9B6A     	 ldr r3,[r3,#40]
 1162              	 .loc 1 1308 4
 1163 0066 002B     	 cmp r3,#0
 1164 0068 04D0     	 beq .L58
1309:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1310:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1165              	 .loc 1 1310 26
 1166 006a FB68     	 ldr r3,[r7,#12]
 1167 006c 1833     	 adds r3,r3,#24
 1168 006e 1846     	 mov r0,r3
 1169 0070 FFF7FEFF 	 bl uxListRemove
 1170              	.L58:
1311:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1312:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1313:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1314:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1315:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1316:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1317:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1171              	 .loc 1 1317 18
 1172 0074 FB68     	 ldr r3,[r7,#12]
 1173 0076 0433     	 adds r3,r3,#4
 1174 0078 1946     	 mov r1,r3
 1175 007a 3048     	 ldr r0,.L66+12
 1176 007c FFF7FEFF 	 bl vListInsertEnd
1318:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1319:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 1177              	 .loc 1 1319 3
 1178 0080 FFF7FEFF 	 bl vPortExitCritical
1320:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1321:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1179              	 .loc 1 1321 16
 1180 0084 2A4B     	 ldr r3,.L66
 1181 0086 1B68     	 ldr r3,[r3]
 1182              	 .loc 1 1321 13
 1183 0088 FA68     	 ldr r2,[r7,#12]
 1184 008a 9A42     	 cmp r2,r3
 1185 008c 0CBF     	 ite eq
 1186 008e 0123     	 moveq r3,#1
 1187 0090 0023     	 movne r3,#0
 1188 0092 DBB2     	 uxtb r3,r3
 1189              	 .loc 1 1321 3
 1190 0094 002B     	 cmp r3,#0
 1191 0096 37D0     	 beq .L59
1322:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1323:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1192              	 .loc 1 1323 26
ARM GAS   			page 50


 1193 0098 294B     	 ldr r3,.L66+16
 1194 009a 1B68     	 ldr r3,[r3]
 1195 009c 002B     	 cmp r3,#0
 1196 009e 14BF     	 ite ne
 1197 00a0 0123     	 movne r3,#1
 1198 00a2 0023     	 moveq r3,#0
 1199 00a4 DBB2     	 uxtb r3,r3
 1200              	 .loc 1 1323 4
 1201 00a6 002B     	 cmp r3,#0
 1202 00a8 1CD0     	 beq .L60
1324:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1325:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The current task has just been suspended. */
1326:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1203              	 .loc 1 1326 5
 1204 00aa 264B     	 ldr r3,.L66+20
 1205 00ac 1B68     	 ldr r3,[r3]
 1206 00ae 002B     	 cmp r3,#0
 1207 00b0 14BF     	 ite ne
 1208 00b2 0123     	 movne r3,#1
 1209 00b4 0023     	 moveq r3,#0
 1210 00b6 DBB2     	 uxtb r3,r3
 1211 00b8 002B     	 cmp r3,#0
 1212 00ba 0AD0     	 beq .L61
 1213              	.LBB109:
 1214              	.LBB110:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1215              	 .loc 2 215 2
 1216              	 .syntax unified
 1217              	
 1218 00bc 4FF01003 	 mov r3,#16
 1219 00c0 83F31188 	 msr basepri,r3
 1220 00c4 BFF36F8F 	 isb 
 1221 00c8 BFF34F8F 	 dsb 
 1222              	
 1223              	
 1224              	 .thumb
 1225              	 .syntax unified
 1226 00cc BB60     	 str r3,[r7,#8]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 1227              	 .loc 2 223 1
 1228 00ce 00BF     	 nop
 1229              	.L62:
 1230              	.LBE110:
 1231              	.LBE109:
 1232              	 .loc 1 1326 5 discriminator 1
 1233 00d0 FEE7     	 b .L62
 1234              	.L61:
1327:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				portYIELD_WITHIN_API();
 1235              	 .loc 1 1327 5
 1236 00d2 1D4B     	 ldr r3,.L66+24
 1237 00d4 4FF08052 	 mov r2,#268435456
 1238 00d8 1A60     	 str r2,[r3]
 1239              	 .syntax unified
 1240              	
 1241 00da BFF34F8F 	 dsb
 1242              	
 1243              	
ARM GAS   			page 51


 1244 00de BFF36F8F 	 isb
 1245              	
1328:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1329:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1330:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1331:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1332:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1333:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				must be adjusted to point to a different task. */
1334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1335:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1336:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1337:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1338:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					be set to point to it no matter what its relative priority
1339:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					is. */
1340:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxCurrentTCB = NULL;
1341:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1342:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1343:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1344:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					vTaskSwitchContext();
1345:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1346:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1347:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1348:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1349:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1350:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1351:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1352:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* A task other than the currently running task was suspended,
1353:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				reset the next expected unblock time in case it referred to the
1354:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				task that is now in the Suspended state. */
1355:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskENTER_CRITICAL();
1356:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1357:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvResetNextTaskUnblockTime();
1358:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1359:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskEXIT_CRITICAL();
1360:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1361:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1362:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1363:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1364:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1365:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1366:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 1246              	 .loc 1 1366 2
 1247              	 .thumb
 1248              	 .syntax unified
 1249 00e2 20E0     	 b .L65
 1250              	.L60:
1334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 1251              	 .loc 1 1334 9
 1252 00e4 154B     	 ldr r3,.L66+12
 1253 00e6 1A68     	 ldr r2,[r3]
1334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 1254              	 .loc 1 1334 59
 1255 00e8 184B     	 ldr r3,.L66+28
 1256 00ea 1B68     	 ldr r3,[r3]
1334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 1257              	 .loc 1 1334 56
 1258 00ec 9A42     	 cmp r2,r3
ARM GAS   			page 52


 1259 00ee 0CBF     	 ite eq
 1260 00f0 0123     	 moveq r3,#1
 1261 00f2 0023     	 movne r3,#0
 1262 00f4 DBB2     	 uxtb r3,r3
1334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 1263              	 .loc 1 1334 5
 1264 00f6 002B     	 cmp r3,#0
 1265 00f8 03D0     	 beq .L64
1340:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 1266              	 .loc 1 1340 19
 1267 00fa 0D4B     	 ldr r3,.L66
 1268 00fc 0022     	 movs r2,#0
 1269 00fe 1A60     	 str r2,[r3]
 1270              	 .loc 1 1366 2
 1271 0100 11E0     	 b .L65
 1272              	.L64:
1344:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 1273              	 .loc 1 1344 24
 1274 0102 FFF7FEFF 	 bl vTaskSwitchContext
 1275              	 .loc 1 1366 2
 1276 0106 0EE0     	 b .L65
 1277              	.L59:
1350:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 1278              	 .loc 1 1350 26
 1279 0108 0D4B     	 ldr r3,.L66+16
 1280 010a 1B68     	 ldr r3,[r3]
 1281 010c 002B     	 cmp r3,#0
 1282 010e 14BF     	 ite ne
 1283 0110 0123     	 movne r3,#1
 1284 0112 0023     	 moveq r3,#0
 1285 0114 DBB2     	 uxtb r3,r3
1350:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 1286              	 .loc 1 1350 4
 1287 0116 002B     	 cmp r3,#0
 1288 0118 05D0     	 beq .L65
1355:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 1289              	 .loc 1 1355 5
 1290 011a FFF7FEFF 	 bl vPortEnterCritical
1357:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 1291              	 .loc 1 1357 33
 1292 011e FFF7FEFF 	 bl _ZL27prvResetNextTaskUnblockTimev
1359:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
 1293              	 .loc 1 1359 5
 1294 0122 FFF7FEFF 	 bl vPortExitCritical
 1295              	.L65:
 1296              	 .loc 1 1366 2
 1297 0126 00BF     	 nop
 1298 0128 1037     	 adds r7,r7,#16
 1299              	 .cfi_def_cfa_offset 8
 1300 012a BD46     	 mov sp,r7
 1301              	 .cfi_def_cfa_register 13
 1302              	 
 1303 012c 80BD     	 pop {r7,pc}
 1304              	.L67:
 1305 012e 00BF     	 .align 2
 1306              	.L66:
 1307 0130 00000000 	 .word pxCurrentTCB
ARM GAS   			page 53


 1308 0134 00000000 	 .word _ZL17pxReadyTasksLists
 1309 0138 00000000 	 .word _ZL18uxTopReadyPriority
 1310 013c 00000000 	 .word _ZL18xSuspendedTaskList
 1311 0140 00000000 	 .word _ZL17xSchedulerRunning
 1312 0144 00000000 	 .word _ZL20uxSchedulerSuspended
 1313 0148 04ED00E0 	 .word -536810236
 1314 014c 00000000 	 .word _ZL22uxCurrentNumberOfTasks
 1315              	 .cfi_endproc
 1316              	.LFE16:
 1317              	 .fnend
 1318              	 .size vTaskSuspend,.-vTaskSuspend
 1319              	 .section .text._ZL22prvTaskIsTaskSuspendedPv,"ax",%progbits
 1320              	 .align 1
 1321              	 .syntax unified
 1322              	 .thumb
 1323              	 .thumb_func
 1324              	 .type _ZL22prvTaskIsTaskSuspendedPv,%function
 1325              	_ZL22prvTaskIsTaskSuspendedPv:
 1326              	 .fnstart
 1327              	.LFB17:
1367:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1368:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1369:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1370:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1371:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1372:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1373:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1374:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 1328              	 .loc 1 1374 2
 1329              	 .cfi_startproc
 1330              	 
 1331              	 
 1332              	 
 1333 0000 80B4     	 push {r7}
 1334              	 .cfi_def_cfa_offset 4
 1335              	 .cfi_offset 7,-4
 1336 0002 87B0     	 sub sp,sp,#28
 1337              	 .cfi_def_cfa_offset 32
 1338 0004 00AF     	 add r7,sp,#0
 1339              	 .cfi_def_cfa_register 7
 1340 0006 7860     	 str r0,[r7,#4]
1375:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1341              	 .loc 1 1375 13
 1342 0008 0023     	 movs r3,#0
 1343 000a 7B61     	 str r3,[r7,#20]
1376:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1344              	 .loc 1 1376 22
 1345 000c 7B68     	 ldr r3,[r7,#4]
 1346 000e 3B61     	 str r3,[r7,#16]
1377:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1378:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1379:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		section. */
1380:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1381:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1382:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( xTask );
 1347              	 .loc 1 1382 3
 1348 0010 7B68     	 ldr r3,[r7,#4]
ARM GAS   			page 54


 1349 0012 002B     	 cmp r3,#0
 1350 0014 0AD1     	 bne .L69
 1351              	.LBB111:
 1352              	.LBB112:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1353              	 .loc 2 215 2
 1354              	 .syntax unified
 1355              	
 1356 0016 4FF01003 	 mov r3,#16
 1357 001a 83F31188 	 msr basepri,r3
 1358 001e BFF36F8F 	 isb 
 1359 0022 BFF34F8F 	 dsb 
 1360              	
 1361              	
 1362              	 .thumb
 1363              	 .syntax unified
 1364 0026 FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 1365              	 .loc 2 223 1
 1366 0028 00BF     	 nop
 1367              	.L70:
 1368              	.LBE112:
 1369              	.LBE111:
 1370              	 .loc 1 1382 3 discriminator 1
 1371 002a FEE7     	 b .L70
 1372              	.L69:
1383:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1384:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1385:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1373              	 .loc 1 1385 7
 1374 002c 3B69     	 ldr r3,[r7,#16]
 1375 002e 5B69     	 ldr r3,[r3,#20]
 1376 0030 0F4A     	 ldr r2,.L73
 1377 0032 9342     	 cmp r3,r2
 1378 0034 0CBF     	 ite eq
 1379 0036 0123     	 moveq r3,#1
 1380 0038 0023     	 movne r3,#0
 1381 003a DBB2     	 uxtb r3,r3
 1382              	 .loc 1 1385 3
 1383 003c 002B     	 cmp r3,#0
 1384 003e 0FD0     	 beq .L71
1386:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1387:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1388:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1385              	 .loc 1 1388 8
 1386 0040 3B69     	 ldr r3,[r7,#16]
 1387 0042 9B6A     	 ldr r3,[r3,#40]
 1388              	 .loc 1 1388 4
 1389 0044 0B4A     	 ldr r2,.L73+4
 1390 0046 9342     	 cmp r3,r2
 1391 0048 0AD0     	 beq .L71
1389:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1390:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1391:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				state, or because is is blocked with no timeout? */
1392:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1392              	 .loc 1 1392 9
 1393 004a 3B69     	 ldr r3,[r7,#16]
ARM GAS   			page 55


 1394 004c 9B6A     	 ldr r3,[r3,#40]
 1395 004e 002B     	 cmp r3,#0
 1396 0050 0CBF     	 ite eq
 1397 0052 0123     	 moveq r3,#1
 1398 0054 0023     	 movne r3,#0
 1399 0056 DBB2     	 uxtb r3,r3
 1400              	 .loc 1 1392 5
 1401 0058 002B     	 cmp r3,#0
 1402 005a 01D0     	 beq .L71
1393:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1394:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xReturn = pdTRUE;
 1403              	 .loc 1 1394 14
 1404 005c 0123     	 movs r3,#1
 1405 005e 7B61     	 str r3,[r7,#20]
 1406              	.L71:
1395:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1396:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1397:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1398:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1399:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1400:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1401:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1402:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1403:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1404:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1405:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1406:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1407:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1408:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1409:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1410:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1411:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 1407              	 .loc 1 1411 10
 1408 0060 7B69     	 ldr r3,[r7,#20]
1412:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1409              	 .loc 1 1412 2
 1410 0062 1846     	 mov r0,r3
 1411 0064 1C37     	 adds r7,r7,#28
 1412              	 .cfi_def_cfa_offset 4
 1413 0066 BD46     	 mov sp,r7
 1414              	 .cfi_def_cfa_register 13
 1415              	 
 1416 0068 5DF8047B 	 ldr r7,[sp],#4
 1417              	 .cfi_restore 7
 1418              	 .cfi_def_cfa_offset 0
 1419 006c 7047     	 bx lr
 1420              	.L74:
 1421 006e 00BF     	 .align 2
 1422              	.L73:
 1423 0070 00000000 	 .word _ZL18xSuspendedTaskList
 1424 0074 00000000 	 .word _ZL17xPendingReadyList
 1425              	 .cfi_endproc
 1426              	.LFE17:
 1427              	 .cantunwind
 1428              	 .fnend
 1429              	 .size _ZL22prvTaskIsTaskSuspendedPv,.-_ZL22prvTaskIsTaskSuspendedPv
 1430              	 .section .text.vTaskResume,"ax",%progbits
ARM GAS   			page 56


 1431              	 .align 1
 1432              	 .global vTaskResume
 1433              	 .syntax unified
 1434              	 .thumb
 1435              	 .thumb_func
 1436              	 .type vTaskResume,%function
 1437              	vTaskResume:
 1438              	 .fnstart
 1439              	.LFB18:
1413:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1414:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1415:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1416:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1417:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1418:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1419:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1420:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 1440              	 .loc 1 1420 2
 1441              	 .cfi_startproc
 1442              	 
 1443              	 
 1444 0000 80B5     	 push {r7,lr}
 1445              	 .save {r7,lr}
 1446              	 .cfi_def_cfa_offset 8
 1447              	 .cfi_offset 7,-8
 1448              	 .cfi_offset 14,-4
 1449              	 .pad #16
 1450 0002 84B0     	 sub sp,sp,#16
 1451              	 .cfi_def_cfa_offset 24
 1452              	 .setfp r7,sp,#0
 1453 0004 00AF     	 add r7,sp,#0
 1454              	 .cfi_def_cfa_register 7
 1455 0006 7860     	 str r0,[r7,#4]
1421:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1456              	 .loc 1 1421 16
 1457 0008 7B68     	 ldr r3,[r7,#4]
 1458 000a FB60     	 str r3,[r7,#12]
1422:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1423:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* It does not make sense to resume the calling task. */
1424:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( xTaskToResume );
 1459              	 .loc 1 1424 3
 1460 000c 7B68     	 ldr r3,[r7,#4]
 1461 000e 002B     	 cmp r3,#0
 1462 0010 0AD1     	 bne .L76
 1463              	.LBB113:
 1464              	.LBB114:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1465              	 .loc 2 215 2
 1466              	 .syntax unified
 1467              	
 1468 0012 4FF01003 	 mov r3,#16
 1469 0016 83F31188 	 msr basepri,r3
 1470 001a BFF36F8F 	 isb 
 1471 001e BFF34F8F 	 dsb 
 1472              	
 1473              	
 1474              	 .thumb
ARM GAS   			page 57


 1475              	 .syntax unified
 1476 0022 BB60     	 str r3,[r7,#8]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 1477              	 .loc 2 223 1
 1478 0024 00BF     	 nop
 1479              	.L77:
 1480              	.LBE114:
 1481              	.LBE113:
 1482              	 .loc 1 1424 3 discriminator 1
 1483 0026 FEE7     	 b .L77
 1484              	.L76:
1425:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1426:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1427:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		currently executing task. */
1428:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1485              	 .loc 1 1428 25
 1486 0028 FB68     	 ldr r3,[r7,#12]
 1487 002a 002B     	 cmp r3,#0
 1488 002c 06D0     	 beq .L78
 1489              	 .loc 1 1428 39 discriminator 1
 1490 002e 274B     	 ldr r3,.L83
 1491 0030 1B68     	 ldr r3,[r3]
 1492              	 .loc 1 1428 25 discriminator 1
 1493 0032 FA68     	 ldr r2,[r7,#12]
 1494 0034 9A42     	 cmp r2,r3
 1495 0036 01D0     	 beq .L78
 1496              	 .loc 1 1428 25 is_stmt 0 discriminator 3
 1497 0038 0123     	 movs r3,#1
 1498 003a 00E0     	 b .L79
 1499              	.L78:
 1500              	 .loc 1 1428 25 discriminator 4
 1501 003c 0023     	 movs r3,#0
 1502              	.L79:
 1503              	 .loc 1 1428 3 is_stmt 1 discriminator 6
 1504 003e 002B     	 cmp r3,#0
 1505 0040 3FD0     	 beq .L82
1429:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1430:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			taskENTER_CRITICAL();
 1506              	 .loc 1 1430 4
 1507 0042 FFF7FEFF 	 bl vPortEnterCritical
1431:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1432:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1508              	 .loc 1 1432 31
 1509 0046 F868     	 ldr r0,[r7,#12]
 1510 0048 FFF7FEFF 	 bl _ZL22prvTaskIsTaskSuspendedPv
 1511 004c 0346     	 mov r3,r0
 1512              	 .loc 1 1432 41
 1513 004e 012B     	 cmp r3,#1
 1514 0050 0CBF     	 ite eq
 1515 0052 0123     	 moveq r3,#1
 1516 0054 0023     	 movne r3,#0
 1517 0056 DBB2     	 uxtb r3,r3
 1518              	 .loc 1 1432 5
 1519 0058 002B     	 cmp r3,#0
 1520 005a 30D0     	 beq .L81
1433:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1434:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					traceTASK_RESUME( pxTCB );
ARM GAS   			page 58


1435:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1436:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* As we are in a critical section we can access the ready
1437:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					lists even if the scheduler is suspended. */
1438:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1521              	 .loc 1 1438 27
 1522 005c FB68     	 ldr r3,[r7,#12]
 1523 005e 0433     	 adds r3,r3,#4
 1524 0060 1846     	 mov r0,r3
 1525 0062 FFF7FEFF 	 bl uxListRemove
1439:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1526              	 .loc 1 1439 6
 1527 0066 1A4B     	 ldr r3,.L83+4
 1528 0068 1A68     	 ldr r2,[r3]
 1529 006a FB68     	 ldr r3,[r7,#12]
 1530 006c DB6A     	 ldr r3,[r3,#44]
 1531 006e 0121     	 movs r1,#1
 1532 0070 01FA03F3 	 lsl r3,r1,r3
 1533 0074 1343     	 orrs r3,r3,r2
 1534 0076 164A     	 ldr r2,.L83+4
 1535 0078 1360     	 str r3,[r2]
 1536 007a FB68     	 ldr r3,[r7,#12]
 1537 007c DA6A     	 ldr r2,[r3,#44]
 1538 007e 1346     	 mov r3,r2
 1539 0080 9B00     	 lsls r3,r3,#2
 1540 0082 1344     	 add r3,r3,r2
 1541 0084 9B00     	 lsls r3,r3,#2
 1542 0086 134A     	 ldr r2,.L83+8
 1543 0088 1A44     	 add r2,r2,r3
 1544 008a FB68     	 ldr r3,[r7,#12]
 1545 008c 0433     	 adds r3,r3,#4
 1546 008e 1946     	 mov r1,r3
 1547 0090 1046     	 mov r0,r2
 1548 0092 FFF7FEFF 	 bl vListInsertEnd
1440:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1441:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* We may have just resumed a higher priority task. */
1442:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1549              	 .loc 1 1442 17
 1550 0096 FB68     	 ldr r3,[r7,#12]
 1551 0098 DA6A     	 ldr r2,[r3,#44]
 1552              	 .loc 1 1442 31
 1553 009a 0C4B     	 ldr r3,.L83
 1554 009c 1B68     	 ldr r3,[r3]
 1555              	 .loc 1 1442 45
 1556 009e DB6A     	 ldr r3,[r3,#44]
 1557              	 .loc 1 1442 28
 1558 00a0 9A42     	 cmp r2,r3
 1559 00a2 2CBF     	 ite cs
 1560 00a4 0123     	 movcs r3,#1
 1561 00a6 0023     	 movcc r3,#0
 1562 00a8 DBB2     	 uxtb r3,r3
 1563              	 .loc 1 1442 6
 1564 00aa 002B     	 cmp r3,#0
 1565 00ac 07D0     	 beq .L81
1443:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1444:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* This yield may not cause the task just resumed to run,
1445:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						but will leave the lists in the correct state for the
1446:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						next yield. */
ARM GAS   			page 59


1447:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1566              	 .loc 1 1447 7
 1567 00ae 0A4B     	 ldr r3,.L83+12
 1568 00b0 4FF08052 	 mov r2,#268435456
 1569 00b4 1A60     	 str r2,[r3]
 1570              	 .syntax unified
 1571              	
 1572 00b6 BFF34F8F 	 dsb
 1573              	
 1574              	
 1575 00ba BFF36F8F 	 isb
 1576              	
 1577              	 .thumb
 1578              	 .syntax unified
 1579              	.L81:
1448:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1449:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1450:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1451:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1452:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1453:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1454:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1455:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1456:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1457:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1458:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1459:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			taskEXIT_CRITICAL();
 1580              	 .loc 1 1459 4
 1581 00be FFF7FEFF 	 bl vPortExitCritical
 1582              	.L82:
1460:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1461:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1462:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1464:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1465:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 1583              	 .loc 1 1465 2
 1584 00c2 00BF     	 nop
 1585 00c4 1037     	 adds r7,r7,#16
 1586              	 .cfi_def_cfa_offset 8
 1587 00c6 BD46     	 mov sp,r7
 1588              	 .cfi_def_cfa_register 13
 1589              	 
 1590 00c8 80BD     	 pop {r7,pc}
 1591              	.L84:
 1592 00ca 00BF     	 .align 2
 1593              	.L83:
 1594 00cc 00000000 	 .word pxCurrentTCB
 1595 00d0 00000000 	 .word _ZL18uxTopReadyPriority
 1596 00d4 00000000 	 .word _ZL17pxReadyTasksLists
 1597 00d8 04ED00E0 	 .word -536810236
 1598              	 .cfi_endproc
 1599              	.LFE18:
 1600              	 .fnend
 1601              	 .size vTaskResume,.-vTaskResume
 1602              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 1603              	 .align 1
ARM GAS   			page 60


 1604              	 .global xTaskResumeFromISR
 1605              	 .syntax unified
 1606              	 .thumb
 1607              	 .thumb_func
 1608              	 .type xTaskResumeFromISR,%function
 1609              	xTaskResumeFromISR:
 1610              	 .fnstart
 1611              	.LFB19:
1466:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1467:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1468:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1469:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1470:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1471:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1472:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1473:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1474:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 1612              	 .loc 1 1474 2
 1613              	 .cfi_startproc
 1614              	 
 1615              	 
 1616 0000 80B5     	 push {r7,lr}
 1617              	 .save {r7,lr}
 1618              	 .cfi_def_cfa_offset 8
 1619              	 .cfi_offset 7,-8
 1620              	 .cfi_offset 14,-4
 1621              	 .pad #40
 1622 0002 8AB0     	 sub sp,sp,#40
 1623              	 .cfi_def_cfa_offset 48
 1624              	 .setfp r7,sp,#0
 1625 0004 00AF     	 add r7,sp,#0
 1626              	 .cfi_def_cfa_register 7
 1627 0006 7860     	 str r0,[r7,#4]
1475:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1628              	 .loc 1 1475 13
 1629 0008 0023     	 movs r3,#0
 1630 000a 7B62     	 str r3,[r7,#36]
1476:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1631              	 .loc 1 1476 16
 1632 000c 7B68     	 ldr r3,[r7,#4]
 1633 000e 3B62     	 str r3,[r7,#32]
1477:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1478:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1479:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( xTaskToResume );
 1634              	 .loc 1 1479 3
 1635 0010 7B68     	 ldr r3,[r7,#4]
 1636 0012 002B     	 cmp r3,#0
 1637 0014 0AD1     	 bne .L86
 1638              	.LBB115:
 1639              	.LBB116:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1640              	 .loc 2 215 2
 1641              	 .syntax unified
 1642              	
 1643 0016 4FF01003 	 mov r3,#16
 1644 001a 83F31188 	 msr basepri,r3
 1645 001e BFF36F8F 	 isb 
ARM GAS   			page 61


 1646 0022 BFF34F8F 	 dsb 
 1647              	
 1648              	
 1649              	 .thumb
 1650              	 .syntax unified
 1651 0026 BB61     	 str r3,[r7,#24]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 1652              	 .loc 2 223 1
 1653 0028 00BF     	 nop
 1654              	.L87:
 1655              	.LBE116:
 1656              	.LBE115:
 1657              	 .loc 1 1479 3 discriminator 1
 1658 002a FEE7     	 b .L87
 1659              	.L86:
1480:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1481:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1482:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1483:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1484:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1485:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1486:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		is defined in FreeRTOSConfig.h then
1487:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1488:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1489:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		been assigned a priority above the configured maximum system call
1490:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1491:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1492:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1493:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1494:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1495:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		provided on the following link:
1496:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1497:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1660              	 .loc 1 1497 3
 1661 002c FFF7FEFF 	 bl vPortValidateInterruptPriority
 1662              	.LBB117:
 1663              	.LBB118:
 231:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1664              	 .loc 2 231 2
 1665              	 .syntax unified
 1666              	
 1667 0030 EFF31182 	 mrs r2,basepri
 1668 0034 4FF01003 	 mov r3,#16
 1669 0038 83F31188 	 msr basepri,r3
 1670 003c BFF36F8F 	 isb 
 1671 0040 BFF34F8F 	 dsb 
 1672              	
 1673              	
 1674              	 .thumb
 1675              	 .syntax unified
 1676 0044 7A61     	 str r2,[r7,#20]
 1677 0046 3B61     	 str r3,[r7,#16]
 243:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 1678              	 .loc 2 243 9
 1679 0048 7B69     	 ldr r3,[r7,#20]
 1680              	.LBE118:
 1681              	.LBE117:
ARM GAS   			page 62


1498:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1499:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1682              	 .loc 1 1499 28
 1683 004a FB61     	 str r3,[r7,#28]
1500:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1501:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1684              	 .loc 1 1501 30
 1685 004c 386A     	 ldr r0,[r7,#32]
 1686 004e FFF7FEFF 	 bl _ZL22prvTaskIsTaskSuspendedPv
 1687 0052 0346     	 mov r3,r0
 1688              	 .loc 1 1501 40
 1689 0054 012B     	 cmp r3,#1
 1690 0056 0CBF     	 ite eq
 1691 0058 0123     	 moveq r3,#1
 1692 005a 0023     	 movne r3,#0
 1693 005c DBB2     	 uxtb r3,r3
 1694              	 .loc 1 1501 4
 1695 005e 002B     	 cmp r3,#0
 1696 0060 3AD0     	 beq .L89
1502:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1503:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1504:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1505:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Check the ready lists can be accessed. */
1506:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1697              	 .loc 1 1506 30
 1698 0062 234B     	 ldr r3,.L93
 1699 0064 1B68     	 ldr r3,[r3]
 1700 0066 002B     	 cmp r3,#0
 1701 0068 0CBF     	 ite eq
 1702 006a 0123     	 moveq r3,#1
 1703 006c 0023     	 movne r3,#0
 1704 006e DBB2     	 uxtb r3,r3
 1705              	 .loc 1 1506 5
 1706 0070 002B     	 cmp r3,#0
 1707 0072 2BD0     	 beq .L90
1507:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1508:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Ready lists can be accessed so move the task from the
1509:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					suspended list to the ready list directly. */
1510:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1708              	 .loc 1 1510 17
 1709 0074 3B6A     	 ldr r3,[r7,#32]
 1710 0076 DA6A     	 ldr r2,[r3,#44]
 1711              	 .loc 1 1510 31
 1712 0078 1E4B     	 ldr r3,.L93+4
 1713 007a 1B68     	 ldr r3,[r3]
 1714              	 .loc 1 1510 45
 1715 007c DB6A     	 ldr r3,[r3,#44]
 1716              	 .loc 1 1510 28
 1717 007e 9A42     	 cmp r2,r3
 1718 0080 2CBF     	 ite cs
 1719 0082 0123     	 movcs r3,#1
 1720 0084 0023     	 movcc r3,#0
 1721 0086 DBB2     	 uxtb r3,r3
 1722              	 .loc 1 1510 6
 1723 0088 002B     	 cmp r3,#0
 1724 008a 01D0     	 beq .L91
1511:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
ARM GAS   			page 63


1512:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						xYieldRequired = pdTRUE;
 1725              	 .loc 1 1512 22
 1726 008c 0123     	 movs r3,#1
 1727 008e 7B62     	 str r3,[r7,#36]
 1728              	.L91:
1513:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1514:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1515:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1516:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1517:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1518:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1519:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1729              	 .loc 1 1519 27
 1730 0090 3B6A     	 ldr r3,[r7,#32]
 1731 0092 0433     	 adds r3,r3,#4
 1732 0094 1846     	 mov r0,r3
 1733 0096 FFF7FEFF 	 bl uxListRemove
1520:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1734              	 .loc 1 1520 6
 1735 009a 174B     	 ldr r3,.L93+8
 1736 009c 1A68     	 ldr r2,[r3]
 1737 009e 3B6A     	 ldr r3,[r7,#32]
 1738 00a0 DB6A     	 ldr r3,[r3,#44]
 1739 00a2 0121     	 movs r1,#1
 1740 00a4 01FA03F3 	 lsl r3,r1,r3
 1741 00a8 1343     	 orrs r3,r3,r2
 1742 00aa 134A     	 ldr r2,.L93+8
 1743 00ac 1360     	 str r3,[r2]
 1744 00ae 3B6A     	 ldr r3,[r7,#32]
 1745 00b0 DA6A     	 ldr r2,[r3,#44]
 1746 00b2 1346     	 mov r3,r2
 1747 00b4 9B00     	 lsls r3,r3,#2
 1748 00b6 1344     	 add r3,r3,r2
 1749 00b8 9B00     	 lsls r3,r3,#2
 1750 00ba 104A     	 ldr r2,.L93+12
 1751 00bc 1A44     	 add r2,r2,r3
 1752 00be 3B6A     	 ldr r3,[r7,#32]
 1753 00c0 0433     	 adds r3,r3,#4
 1754 00c2 1946     	 mov r1,r3
 1755 00c4 1046     	 mov r0,r2
 1756 00c6 FFF7FEFF 	 bl vListInsertEnd
 1757 00ca 05E0     	 b .L89
 1758              	.L90:
1521:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1522:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1523:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1524:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1525:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					is held in the pending ready list until the scheduler is
1526:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					unsuspended. */
1527:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1759              	 .loc 1 1527 20
 1760 00cc 3B6A     	 ldr r3,[r7,#32]
 1761 00ce 1833     	 adds r3,r3,#24
 1762 00d0 1946     	 mov r1,r3
 1763 00d2 0B48     	 ldr r0,.L93+16
 1764 00d4 FFF7FEFF 	 bl vListInsertEnd
 1765              	.L89:
ARM GAS   			page 64


 1766 00d8 FB69     	 ldr r3,[r7,#28]
 1767 00da FB60     	 str r3,[r7,#12]
 1768              	.LBB119:
 1769              	.LBB120:
 249:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1770              	 .loc 2 249 2
 1771 00dc FB68     	 ldr r3,[r7,#12]
 1772              	 .syntax unified
 1773              	
 1774 00de 83F31188 	 msr basepri,r3
 1775              	
 1776              	 .loc 2 253 1
 1777              	 .thumb
 1778              	 .syntax unified
 1779 00e2 00BF     	 nop
 1780              	.LBE120:
 1781              	.LBE119:
1528:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1529:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1530:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1531:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1532:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1533:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1534:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1535:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1536:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1537:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xYieldRequired;
 1782              	 .loc 1 1537 10
 1783 00e4 7B6A     	 ldr r3,[r7,#36]
1538:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 1784              	 .loc 1 1538 2
 1785 00e6 1846     	 mov r0,r3
 1786 00e8 2837     	 adds r7,r7,#40
 1787              	 .cfi_def_cfa_offset 8
 1788 00ea BD46     	 mov sp,r7
 1789              	 .cfi_def_cfa_register 13
 1790              	 
 1791 00ec 80BD     	 pop {r7,pc}
 1792              	.L94:
 1793 00ee 00BF     	 .align 2
 1794              	.L93:
 1795 00f0 00000000 	 .word _ZL20uxSchedulerSuspended
 1796 00f4 00000000 	 .word pxCurrentTCB
 1797 00f8 00000000 	 .word _ZL18uxTopReadyPriority
 1798 00fc 00000000 	 .word _ZL17pxReadyTasksLists
 1799 0100 00000000 	 .word _ZL17xPendingReadyList
 1800              	 .cfi_endproc
 1801              	.LFE19:
 1802              	 .fnend
 1803              	 .size xTaskResumeFromISR,.-xTaskResumeFromISR
 1804              	 .section .rodata
 1805              	 .align 2
 1806              	.LC0:
 1807 0000 49444C45 	 .ascii "IDLE\000"
 1807      00
 1808              	 .section .text.vTaskStartScheduler,"ax",%progbits
 1809              	 .align 1
ARM GAS   			page 65


 1810              	 .global vTaskStartScheduler
 1811              	 .syntax unified
 1812              	 .thumb
 1813              	 .thumb_func
 1814              	 .type vTaskStartScheduler,%function
 1815              	vTaskStartScheduler:
 1816              	 .fnstart
 1817              	.LFB20:
1539:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1540:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1541:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1542:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1543:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskStartScheduler( void )
1544:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 1818              	 .loc 1 1544 1
 1819              	 .cfi_startproc
 1820              	 
 1821              	 
 1822 0000 80B5     	 push {r7,lr}
 1823              	 .save {r7,lr}
 1824              	 .cfi_def_cfa_offset 8
 1825              	 .cfi_offset 7,-8
 1826              	 .cfi_offset 14,-4
 1827              	 .pad #32
 1828 0002 88B0     	 sub sp,sp,#32
 1829              	 .cfi_def_cfa_offset 40
 1830              	 .setfp r7,sp,#16
 1831 0004 04AF     	 add r7,sp,#16
 1832              	 .cfi_def_cfa 7,24
1545:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xReturn;
1546:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1547:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Add the idle task at the lowest priority. */
1548:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1549:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1550:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1551:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1552:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1553:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1554:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#else
1555:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1556:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Create the idle task without storing its handle. */
1557:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1833              	 .loc 1 1557 13
 1834 0006 0023     	 movs r3,#0
 1835 0008 0393     	 str r3,[sp,#12]
 1836 000a 0023     	 movs r3,#0
 1837 000c 0293     	 str r3,[sp,#8]
 1838 000e 0023     	 movs r3,#0
 1839 0010 0193     	 str r3,[sp,#4]
 1840 0012 0023     	 movs r3,#0
 1841 0014 0093     	 str r3,[sp]
 1842 0016 0023     	 movs r3,#0
 1843 0018 8022     	 movs r2,#128
 1844 001a 1A49     	 ldr r1,.L100
 1845 001c 1A48     	 ldr r0,.L100+4
 1846 001e FFF7FEFF 	 bl xTaskGenericCreate
 1847 0022 0346     	 mov r3,r0
ARM GAS   			page 66


 1848 0024 FB60     	 str r3,[r7,#12]
1558:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1559:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1560:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1561:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1562:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1563:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xReturn == pdPASS )
1564:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1565:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = xTimerCreateTimerTask();
1566:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1567:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1568:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1569:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1570:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1571:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1572:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* configUSE_TIMERS */
1573:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1574:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( xReturn == pdPASS )
 1849              	 .loc 1 1574 2
 1850 0026 FB68     	 ldr r3,[r7,#12]
 1851 0028 012B     	 cmp r3,#1
 1852 002a 18D1     	 bne .L96
 1853              	.LBB121:
 1854              	.LBB122:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1855              	 .loc 2 215 2
 1856              	 .syntax unified
 1857              	
 1858 002c 4FF01003 	 mov r3,#16
 1859 0030 83F31188 	 msr basepri,r3
 1860 0034 BFF36F8F 	 isb 
 1861 0038 BFF34F8F 	 dsb 
 1862              	
 1863              	
 1864              	 .thumb
 1865              	 .syntax unified
 1866 003c BB60     	 str r3,[r7,#8]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 1867              	 .loc 2 223 1
 1868 003e 00BF     	 nop
 1869              	.LBE122:
 1870              	.LBE121:
1575:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1576:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1577:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1578:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the created tasks contain a status word with interrupts switched on
1579:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1580:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		starts to run. */
1581:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portDISABLE_INTERRUPTS();
1582:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1583:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1584:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1585:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1586:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			structure specific to the task that will run first. */
1587:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1588:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1589:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
ARM GAS   			page 67


1590:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1591:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 1871              	 .loc 1 1591 24
 1872 0040 124B     	 ldr r3,.L100+8
 1873 0042 4FF0FF32 	 mov r2,#-1
 1874 0046 1A60     	 str r2,[r3]
1592:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xSchedulerRunning = pdTRUE;
 1875              	 .loc 1 1592 21
 1876 0048 114B     	 ldr r3,.L100+12
 1877 004a 0122     	 movs r2,#1
 1878 004c 1A60     	 str r2,[r3]
1593:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1879              	 .loc 1 1593 14
 1880 004e 114B     	 ldr r3,.L100+16
 1881 0050 0022     	 movs r2,#0
 1882 0052 1A60     	 str r2,[r3]
1594:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1595:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1596:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1597:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the run time counter time base. */
1598:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1599:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1600:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1601:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portable interface. */
1602:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1883              	 .loc 1 1602 26
 1884 0054 FFF7FEFF 	 bl xPortStartScheduler
 1885 0058 0346     	 mov r3,r0
 1886              	 .loc 1 1602 29
 1887 005a 002B     	 cmp r3,#0
1603:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1604:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Should not reach here as if the scheduler is running the
1605:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			function will not return. */
1606:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1607:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1608:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1609:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1610:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1611:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1612:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
1613:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1614:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1615:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1616:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		or the timer task. */
1617:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( xReturn );
1618:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1619:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 1888              	 .loc 1 1619 1
 1889 005c 0DE0     	 b .L99
 1890              	.L96:
1617:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 1891              	 .loc 1 1617 3
 1892 005e FB68     	 ldr r3,[r7,#12]
 1893 0060 002B     	 cmp r3,#0
 1894 0062 0AD1     	 bne .L99
 1895              	.LBB123:
 1896              	.LBB124:
ARM GAS   			page 68


 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1897              	 .loc 2 215 2
 1898              	 .syntax unified
 1899              	
 1900 0064 4FF01003 	 mov r3,#16
 1901 0068 83F31188 	 msr basepri,r3
 1902 006c BFF36F8F 	 isb 
 1903 0070 BFF34F8F 	 dsb 
 1904              	
 1905              	
 1906              	 .thumb
 1907              	 .syntax unified
 1908 0074 7B60     	 str r3,[r7,#4]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 1909              	 .loc 2 223 1
 1910 0076 00BF     	 nop
 1911              	.L98:
 1912              	.LBE124:
 1913              	.LBE123:
1617:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 1914              	 .loc 1 1617 3 discriminator 2
 1915 0078 FEE7     	 b .L98
 1916              	.L99:
 1917              	 .loc 1 1619 1
 1918 007a 00BF     	 nop
 1919 007c 1037     	 adds r7,r7,#16
 1920              	 .cfi_def_cfa_offset 8
 1921 007e BD46     	 mov sp,r7
 1922              	 .cfi_def_cfa_register 13
 1923              	 
 1924 0080 80BD     	 pop {r7,pc}
 1925              	.L101:
 1926 0082 00BF     	 .align 2
 1927              	.L100:
 1928 0084 00000000 	 .word .LC0
 1929 0088 00000000 	 .word _ZL11prvIdleTaskPv
 1930 008c 00000000 	 .word _ZL20xNextTaskUnblockTime
 1931 0090 00000000 	 .word _ZL17xSchedulerRunning
 1932 0094 00000000 	 .word _ZL10xTickCount
 1933              	 .cfi_endproc
 1934              	.LFE20:
 1935              	 .fnend
 1936              	 .size vTaskStartScheduler,.-vTaskStartScheduler
 1937              	 .section .text.vTaskEndScheduler,"ax",%progbits
 1938              	 .align 1
 1939              	 .global vTaskEndScheduler
 1940              	 .syntax unified
 1941              	 .thumb
 1942              	 .thumb_func
 1943              	 .type vTaskEndScheduler,%function
 1944              	vTaskEndScheduler:
 1945              	 .fnstart
 1946              	.LFB21:
1620:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1621:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1622:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskEndScheduler( void )
1623:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
ARM GAS   			page 69


 1947              	 .loc 1 1623 1
 1948              	 .cfi_startproc
 1949              	 
 1950              	 
 1951 0000 80B5     	 push {r7,lr}
 1952              	 .save {r7,lr}
 1953              	 .cfi_def_cfa_offset 8
 1954              	 .cfi_offset 7,-8
 1955              	 .cfi_offset 14,-4
 1956              	 .pad #8
 1957 0002 82B0     	 sub sp,sp,#8
 1958              	 .cfi_def_cfa_offset 16
 1959              	 .setfp r7,sp,#0
 1960 0004 00AF     	 add r7,sp,#0
 1961              	 .cfi_def_cfa_register 7
 1962              	.LBB125:
 1963              	.LBB126:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1964              	 .loc 2 215 2
 1965              	 .syntax unified
 1966              	
 1967 0006 4FF01003 	 mov r3,#16
 1968 000a 83F31188 	 msr basepri,r3
 1969 000e BFF36F8F 	 isb 
 1970 0012 BFF34F8F 	 dsb 
 1971              	
 1972              	
 1973              	 .thumb
 1974              	 .syntax unified
 1975 0016 7B60     	 str r3,[r7,#4]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 1976              	 .loc 2 223 1
 1977 0018 00BF     	 nop
 1978              	.LBE126:
 1979              	.LBE125:
1624:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1625:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1626:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1627:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	portDISABLE_INTERRUPTS();
1628:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	xSchedulerRunning = pdFALSE;
 1980              	 .loc 1 1628 20
 1981 001a 044B     	 ldr r3,.L103
 1982 001c 0022     	 movs r2,#0
 1983 001e 1A60     	 str r2,[r3]
1629:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vPortEndScheduler();
 1984              	 .loc 1 1629 19
 1985 0020 FFF7FEFF 	 bl vPortEndScheduler
1630:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 1986              	 .loc 1 1630 1
 1987 0024 00BF     	 nop
 1988 0026 0837     	 adds r7,r7,#8
 1989              	 .cfi_def_cfa_offset 8
 1990 0028 BD46     	 mov sp,r7
 1991              	 .cfi_def_cfa_register 13
 1992              	 
 1993 002a 80BD     	 pop {r7,pc}
 1994              	.L104:
ARM GAS   			page 70


 1995              	 .align 2
 1996              	.L103:
 1997 002c 00000000 	 .word _ZL17xSchedulerRunning
 1998              	 .cfi_endproc
 1999              	.LFE21:
 2000              	 .fnend
 2001              	 .size vTaskEndScheduler,.-vTaskEndScheduler
 2002              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2003              	 .align 1
 2004              	 .global vTaskSuspendAll
 2005              	 .syntax unified
 2006              	 .thumb
 2007              	 .thumb_func
 2008              	 .type vTaskSuspendAll,%function
 2009              	vTaskSuspendAll:
 2010              	 .fnstart
 2011              	.LFB22:
1631:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*----------------------------------------------------------*/
1632:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1633:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskSuspendAll( void )
1634:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 2012              	 .loc 1 1634 1
 2013              	 .cfi_startproc
 2014              	 
 2015              	 
 2016              	 
 2017 0000 80B4     	 push {r7}
 2018              	 .cfi_def_cfa_offset 4
 2019              	 .cfi_offset 7,-4
 2020 0002 00AF     	 add r7,sp,#0
 2021              	 .cfi_def_cfa_register 7
1635:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* A critical section is not required as the variable is of type
1636:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1637:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1638:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	http://goo.gl/wu4acr */
1639:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	++uxSchedulerSuspended;
 2022              	 .loc 1 1639 2
 2023 0004 044B     	 ldr r3,.L106
 2024 0006 1B68     	 ldr r3,[r3]
 2025 0008 0133     	 adds r3,r3,#1
 2026 000a 034A     	 ldr r2,.L106
 2027 000c 1360     	 str r3,[r2]
1640:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 2028              	 .loc 1 1640 1
 2029 000e 00BF     	 nop
 2030 0010 BD46     	 mov sp,r7
 2031              	 .cfi_def_cfa_register 13
 2032              	 
 2033 0012 5DF8047B 	 ldr r7,[sp],#4
 2034              	 .cfi_restore 7
 2035              	 .cfi_def_cfa_offset 0
 2036 0016 7047     	 bx lr
 2037              	.L107:
 2038              	 .align 2
 2039              	.L106:
 2040 0018 00000000 	 .word _ZL20uxSchedulerSuspended
 2041              	 .cfi_endproc
ARM GAS   			page 71


 2042              	.LFE22:
 2043              	 .cantunwind
 2044              	 .fnend
 2045              	 .size vTaskSuspendAll,.-vTaskSuspendAll
 2046              	 .section .text.xTaskResumeAll,"ax",%progbits
 2047              	 .align 1
 2048              	 .global xTaskResumeAll
 2049              	 .syntax unified
 2050              	 .thumb
 2051              	 .thumb_func
 2052              	 .type xTaskResumeAll,%function
 2053              	xTaskResumeAll:
 2054              	 .fnstart
 2055              	.LFB23:
1641:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*----------------------------------------------------------*/
1642:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1643:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1644:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1645:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1646:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1647:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TickType_t xReturn;
1648:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1649:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1650:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1651:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = 0;
1652:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1653:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1654:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1655:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1656:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			time slicing is used then the very next tick interrupt must be
1657:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			processed. */
1658:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = 0;
1659:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1660:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1661:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1662:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1663:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1664:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1665:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
1666:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1667:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1668:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1669:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*----------------------------------------------------------*/
1670:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1671:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xTaskResumeAll( void )
1672:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 2056              	 .loc 1 1672 1
 2057              	 .cfi_startproc
 2058              	 
 2059              	 
 2060 0000 80B5     	 push {r7,lr}
 2061              	 .save {r7,lr}
 2062              	 .cfi_def_cfa_offset 8
 2063              	 .cfi_offset 7,-8
 2064              	 .cfi_offset 14,-4
 2065              	 .pad #16
 2066 0002 84B0     	 sub sp,sp,#16
ARM GAS   			page 72


 2067              	 .cfi_def_cfa_offset 24
 2068              	 .setfp r7,sp,#0
 2069 0004 00AF     	 add r7,sp,#0
 2070              	 .cfi_def_cfa_register 7
1673:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TCB_t *pxTCB;
1674:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2071              	 .loc 1 1674 12
 2072 0006 0023     	 movs r3,#0
 2073 0008 FB60     	 str r3,[r7,#12]
1675:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1676:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1677:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	previous call to vTaskSuspendAll(). */
1678:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2074              	 .loc 1 1678 2
 2075 000a 534B     	 ldr r3,.L119
 2076 000c 1B68     	 ldr r3,[r3]
 2077 000e 002B     	 cmp r3,#0
 2078 0010 0CBF     	 ite eq
 2079 0012 0123     	 moveq r3,#1
 2080 0014 0023     	 movne r3,#0
 2081 0016 DBB2     	 uxtb r3,r3
 2082 0018 002B     	 cmp r3,#0
 2083 001a 0AD0     	 beq .L109
 2084              	.LBB127:
 2085              	.LBB128:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2086              	 .loc 2 215 2
 2087              	 .syntax unified
 2088              	
 2089 001c 4FF01003 	 mov r3,#16
 2090 0020 83F31188 	 msr basepri,r3
 2091 0024 BFF36F8F 	 isb 
 2092 0028 BFF34F8F 	 dsb 
 2093              	
 2094              	
 2095              	 .thumb
 2096              	 .syntax unified
 2097 002c 7B60     	 str r3,[r7,#4]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 2098              	 .loc 2 223 1
 2099 002e 00BF     	 nop
 2100              	.L110:
 2101              	.LBE128:
 2102              	.LBE127:
 2103              	 .loc 1 1678 2 discriminator 1
 2104 0030 FEE7     	 b .L110
 2105              	.L109:
1679:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1680:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1681:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1682:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1683:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1684:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	tasks from this list into their appropriate ready list. */
1685:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	taskENTER_CRITICAL();
 2106              	 .loc 1 1685 2
 2107 0032 FFF7FEFF 	 bl vPortEnterCritical
1686:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
ARM GAS   			page 73


1687:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		--uxSchedulerSuspended;
 2108              	 .loc 1 1687 3
 2109 0036 484B     	 ldr r3,.L119
 2110 0038 1B68     	 ldr r3,[r3]
 2111 003a 013B     	 subs r3,r3,#1
 2112 003c 464A     	 ldr r2,.L119
 2113 003e 1360     	 str r3,[r2]
1688:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1689:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2114              	 .loc 1 1689 28
 2115 0040 454B     	 ldr r3,.L119
 2116 0042 1B68     	 ldr r3,[r3]
 2117 0044 002B     	 cmp r3,#0
 2118 0046 0CBF     	 ite eq
 2119 0048 0123     	 moveq r3,#1
 2120 004a 0023     	 movne r3,#0
 2121 004c DBB2     	 uxtb r3,r3
 2122              	 .loc 1 1689 3
 2123 004e 002B     	 cmp r3,#0
 2124 0050 7AD0     	 beq .L111
1690:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1691:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2125              	 .loc 1 1691 31
 2126 0052 424B     	 ldr r3,.L119+4
 2127 0054 1B68     	 ldr r3,[r3]
 2128 0056 002B     	 cmp r3,#0
 2129 0058 14BF     	 ite ne
 2130 005a 0123     	 movne r3,#1
 2131 005c 0023     	 moveq r3,#0
 2132 005e DBB2     	 uxtb r3,r3
 2133              	 .loc 1 1691 4
 2134 0060 002B     	 cmp r3,#0
 2135 0062 71D0     	 beq .L111
 2136              	.L114:
1692:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1693:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Move any readied tasks from the pending list into the
1694:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				appropriate ready list. */
1695:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2137              	 .loc 1 1695 12
 2138 0064 3E4B     	 ldr r3,.L119+8
 2139 0066 1B68     	 ldr r3,[r3]
 2140              	 .loc 1 1695 52
 2141 0068 002B     	 cmp r3,#0
 2142 006a 35D0     	 beq .L112
1696:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1697:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2143              	 .loc 1 1697 26
 2144 006c 3C4B     	 ldr r3,.L119+8
 2145 006e DB68     	 ldr r3,[r3,#12]
 2146              	 .loc 1 1697 12
 2147 0070 DB68     	 ldr r3,[r3,#12]
 2148 0072 BB60     	 str r3,[r7,#8]
1698:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2149              	 .loc 1 1698 27
 2150 0074 BB68     	 ldr r3,[r7,#8]
 2151 0076 1833     	 adds r3,r3,#24
 2152 0078 1846     	 mov r0,r3
ARM GAS   			page 74


 2153 007a FFF7FEFF 	 bl uxListRemove
1699:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2154              	 .loc 1 1699 27
 2155 007e BB68     	 ldr r3,[r7,#8]
 2156 0080 0433     	 adds r3,r3,#4
 2157 0082 1846     	 mov r0,r3
 2158 0084 FFF7FEFF 	 bl uxListRemove
1700:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2159              	 .loc 1 1700 6
 2160 0088 364B     	 ldr r3,.L119+12
 2161 008a 1A68     	 ldr r2,[r3]
 2162 008c BB68     	 ldr r3,[r7,#8]
 2163 008e DB6A     	 ldr r3,[r3,#44]
 2164 0090 0121     	 movs r1,#1
 2165 0092 01FA03F3 	 lsl r3,r1,r3
 2166 0096 1343     	 orrs r3,r3,r2
 2167 0098 324A     	 ldr r2,.L119+12
 2168 009a 1360     	 str r3,[r2]
 2169 009c BB68     	 ldr r3,[r7,#8]
 2170 009e DA6A     	 ldr r2,[r3,#44]
 2171 00a0 1346     	 mov r3,r2
 2172 00a2 9B00     	 lsls r3,r3,#2
 2173 00a4 1344     	 add r3,r3,r2
 2174 00a6 9B00     	 lsls r3,r3,#2
 2175 00a8 2F4A     	 ldr r2,.L119+16
 2176 00aa 1A44     	 add r2,r2,r3
 2177 00ac BB68     	 ldr r3,[r7,#8]
 2178 00ae 0433     	 adds r3,r3,#4
 2179 00b0 1946     	 mov r1,r3
 2180 00b2 1046     	 mov r0,r2
 2181 00b4 FFF7FEFF 	 bl vListInsertEnd
1701:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1702:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* If the moved task has a priority higher than the current
1703:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					task then a yield must be performed. */
1704:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2182              	 .loc 1 1704 17
 2183 00b8 BB68     	 ldr r3,[r7,#8]
 2184 00ba DA6A     	 ldr r2,[r3,#44]
 2185              	 .loc 1 1704 31
 2186 00bc 2B4B     	 ldr r3,.L119+20
 2187 00be 1B68     	 ldr r3,[r3]
 2188              	 .loc 1 1704 45
 2189 00c0 DB6A     	 ldr r3,[r3,#44]
 2190              	 .loc 1 1704 28
 2191 00c2 9A42     	 cmp r2,r3
 2192 00c4 2CBF     	 ite cs
 2193 00c6 0123     	 movcs r3,#1
 2194 00c8 0023     	 movcc r3,#0
 2195 00ca DBB2     	 uxtb r3,r3
 2196              	 .loc 1 1704 6
 2197 00cc 002B     	 cmp r3,#0
 2198 00ce C9D0     	 beq .L114
1705:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1706:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						xYieldPending = pdTRUE;
 2199              	 .loc 1 1706 21
 2200 00d0 274B     	 ldr r3,.L119+24
 2201 00d2 0122     	 movs r2,#1
ARM GAS   			page 75


 2202 00d4 1A60     	 str r2,[r3]
1695:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 2203              	 .loc 1 1695 5
 2204 00d6 C5E7     	 b .L114
 2205              	.L112:
1707:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1708:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1709:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1710:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1711:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1712:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1713:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1714:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1715:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				they should be processed now.  This ensures the tick count does
1716:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1717:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				time. */
1718:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxPendedTicks > ( UBaseType_t ) 0U )
 2206              	 .loc 1 1718 23
 2207 00d8 264B     	 ldr r3,.L119+28
 2208 00da 1B68     	 ldr r3,[r3]
 2209 00dc 002B     	 cmp r3,#0
 2210 00de 14BF     	 ite ne
 2211 00e0 0123     	 movne r3,#1
 2212 00e2 0023     	 moveq r3,#0
 2213 00e4 DBB2     	 uxtb r3,r3
 2214              	 .loc 1 1718 5
 2215 00e6 002B     	 cmp r3,#0
 2216 00e8 1BD0     	 beq .L115
 2217              	.L117:
1719:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1720:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					while( uxPendedTicks > ( UBaseType_t ) 0U )
 2218              	 .loc 1 1720 27
 2219 00ea 224B     	 ldr r3,.L119+28
 2220 00ec 1B68     	 ldr r3,[r3]
 2221 00ee 002B     	 cmp r3,#0
 2222 00f0 14BF     	 ite ne
 2223 00f2 0123     	 movne r3,#1
 2224 00f4 0023     	 moveq r3,#0
 2225 00f6 DBB2     	 uxtb r3,r3
 2226 00f8 002B     	 cmp r3,#0
 2227 00fa 12D0     	 beq .L115
1721:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1722:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 2228              	 .loc 1 1722 29
 2229 00fc FFF7FEFF 	 bl xTaskIncrementTick
 2230 0100 0346     	 mov r3,r0
 2231              	 .loc 1 1722 32
 2232 0102 002B     	 cmp r3,#0
 2233 0104 14BF     	 ite ne
 2234 0106 0123     	 movne r3,#1
 2235 0108 0023     	 moveq r3,#0
 2236 010a DBB2     	 uxtb r3,r3
 2237              	 .loc 1 1722 7
 2238 010c 002B     	 cmp r3,#0
 2239 010e 02D0     	 beq .L116
1723:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
1724:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xYieldPending = pdTRUE;
ARM GAS   			page 76


 2240              	 .loc 1 1724 22
 2241 0110 174B     	 ldr r3,.L119+24
 2242 0112 0122     	 movs r2,#1
 2243 0114 1A60     	 str r2,[r3]
 2244              	.L116:
1725:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
1726:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						else
1727:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
1728:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1729:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
1730:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						--uxPendedTicks;
 2245              	 .loc 1 1730 7
 2246 0116 174B     	 ldr r3,.L119+28
 2247 0118 1B68     	 ldr r3,[r3]
 2248 011a 013B     	 subs r3,r3,#1
 2249 011c 154A     	 ldr r2,.L119+28
 2250 011e 1360     	 str r3,[r2]
1720:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
 2251              	 .loc 1 1720 6
 2252 0120 E3E7     	 b .L117
 2253              	.L115:
1731:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1732:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1733:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1734:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1735:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1736:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1737:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1738:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( xYieldPending == pdTRUE )
 2254              	 .loc 1 1738 23
 2255 0122 134B     	 ldr r3,.L119+24
 2256 0124 1B68     	 ldr r3,[r3]
 2257 0126 012B     	 cmp r3,#1
 2258 0128 0CBF     	 ite eq
 2259 012a 0123     	 moveq r3,#1
 2260 012c 0023     	 movne r3,#0
 2261 012e DBB2     	 uxtb r3,r3
 2262              	 .loc 1 1738 5
 2263 0130 002B     	 cmp r3,#0
 2264 0132 09D0     	 beq .L111
1739:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1740:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1741:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1742:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						xAlreadyYielded = pdTRUE;
 2265              	 .loc 1 1742 23
 2266 0134 0123     	 movs r3,#1
 2267 0136 FB60     	 str r3,[r7,#12]
1743:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1744:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#endif
1745:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2268              	 .loc 1 1745 6
 2269 0138 0F4B     	 ldr r3,.L119+32
 2270 013a 4FF08052 	 mov r2,#268435456
 2271 013e 1A60     	 str r2,[r3]
 2272              	 .syntax unified
 2273              	
 2274 0140 BFF34F8F 	 dsb
ARM GAS   			page 77


 2275              	
 2276              	
 2277 0144 BFF36F8F 	 isb
 2278              	
 2279              	 .thumb
 2280              	 .syntax unified
 2281              	.L111:
1746:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1747:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
1748:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1749:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1750:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1751:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1752:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1753:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
1754:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1755:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1756:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1757:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1758:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	taskEXIT_CRITICAL();
 2282              	 .loc 1 1758 2
 2283 0148 FFF7FEFF 	 bl vPortExitCritical
1759:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1760:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xAlreadyYielded;
 2284              	 .loc 1 1760 9
 2285 014c FB68     	 ldr r3,[r7,#12]
1761:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 2286              	 .loc 1 1761 1
 2287 014e 1846     	 mov r0,r3
 2288 0150 1037     	 adds r7,r7,#16
 2289              	 .cfi_def_cfa_offset 8
 2290 0152 BD46     	 mov sp,r7
 2291              	 .cfi_def_cfa_register 13
 2292              	 
 2293 0154 80BD     	 pop {r7,pc}
 2294              	.L120:
 2295 0156 00BF     	 .align 2
 2296              	.L119:
 2297 0158 00000000 	 .word _ZL20uxSchedulerSuspended
 2298 015c 00000000 	 .word _ZL22uxCurrentNumberOfTasks
 2299 0160 00000000 	 .word _ZL17xPendingReadyList
 2300 0164 00000000 	 .word _ZL18uxTopReadyPriority
 2301 0168 00000000 	 .word _ZL17pxReadyTasksLists
 2302 016c 00000000 	 .word pxCurrentTCB
 2303 0170 00000000 	 .word _ZL13xYieldPending
 2304 0174 00000000 	 .word _ZL13uxPendedTicks
 2305 0178 04ED00E0 	 .word -536810236
 2306              	 .cfi_endproc
 2307              	.LFE23:
 2308              	 .fnend
 2309              	 .size xTaskResumeAll,.-xTaskResumeAll
 2310              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2311              	 .align 1
 2312              	 .global xTaskGetTickCount
 2313              	 .syntax unified
 2314              	 .thumb
 2315              	 .thumb_func
ARM GAS   			page 78


 2316              	 .type xTaskGetTickCount,%function
 2317              	xTaskGetTickCount:
 2318              	 .fnstart
 2319              	.LFB24:
1762:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1763:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1764:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t xTaskGetTickCount( void )
1765:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 2320              	 .loc 1 1765 1
 2321              	 .cfi_startproc
 2322              	 
 2323              	 
 2324              	 
 2325 0000 80B4     	 push {r7}
 2326              	 .cfi_def_cfa_offset 4
 2327              	 .cfi_offset 7,-4
 2328 0002 83B0     	 sub sp,sp,#12
 2329              	 .cfi_def_cfa_offset 16
 2330 0004 00AF     	 add r7,sp,#0
 2331              	 .cfi_def_cfa_register 7
1766:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t xTicks;
1767:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1768:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1769:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
1770:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1771:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xTicks = xTickCount;
 2332              	 .loc 1 1771 10
 2333 0006 054B     	 ldr r3,.L123
 2334 0008 1B68     	 ldr r3,[r3]
 2335 000a 7B60     	 str r3,[r7,#4]
1772:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1773:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
1774:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1775:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xTicks;
 2336              	 .loc 1 1775 9
 2337 000c 7B68     	 ldr r3,[r7,#4]
1776:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 2338              	 .loc 1 1776 1
 2339 000e 1846     	 mov r0,r3
 2340 0010 0C37     	 adds r7,r7,#12
 2341              	 .cfi_def_cfa_offset 4
 2342 0012 BD46     	 mov sp,r7
 2343              	 .cfi_def_cfa_register 13
 2344              	 
 2345 0014 5DF8047B 	 ldr r7,[sp],#4
 2346              	 .cfi_restore 7
 2347              	 .cfi_def_cfa_offset 0
 2348 0018 7047     	 bx lr
 2349              	.L124:
 2350 001a 00BF     	 .align 2
 2351              	.L123:
 2352 001c 00000000 	 .word _ZL10xTickCount
 2353              	 .cfi_endproc
 2354              	.LFE24:
 2355              	 .cantunwind
 2356              	 .fnend
 2357              	 .size xTaskGetTickCount,.-xTaskGetTickCount
ARM GAS   			page 79


 2358              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2359              	 .align 1
 2360              	 .global xTaskGetTickCountFromISR
 2361              	 .syntax unified
 2362              	 .thumb
 2363              	 .thumb_func
 2364              	 .type xTaskGetTickCountFromISR,%function
 2365              	xTaskGetTickCountFromISR:
 2366              	 .fnstart
 2367              	.LFB25:
1777:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1778:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1779:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
1780:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 2368              	 .loc 1 1780 1
 2369              	 .cfi_startproc
 2370              	 
 2371              	 
 2372 0000 80B5     	 push {r7,lr}
 2373              	 .save {r7,lr}
 2374              	 .cfi_def_cfa_offset 8
 2375              	 .cfi_offset 7,-8
 2376              	 .cfi_offset 14,-4
 2377              	 .pad #8
 2378 0002 82B0     	 sub sp,sp,#8
 2379              	 .cfi_def_cfa_offset 16
 2380              	 .setfp r7,sp,#0
 2381 0004 00AF     	 add r7,sp,#0
 2382              	 .cfi_def_cfa_register 7
1781:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t xReturn;
1782:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** UBaseType_t uxSavedInterruptStatus;
1783:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1784:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1785:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1786:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1787:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1788:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1789:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1790:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1791:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	assigned a priority above the configured maximum system call priority.
1792:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1793:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1794:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1795:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1796:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1797:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1798:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2383              	 .loc 1 1798 2
 2384 0006 FFF7FEFF 	 bl vPortValidateInterruptPriority
1799:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1800:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2385              	 .loc 1 1800 25
 2386 000a 0023     	 movs r3,#0
 2387 000c 7B60     	 str r3,[r7,#4]
1801:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1802:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = xTickCount;
 2388              	 .loc 1 1802 11
ARM GAS   			page 80


 2389 000e 044B     	 ldr r3,.L127
 2390 0010 1B68     	 ldr r3,[r3]
 2391 0012 3B60     	 str r3,[r7]
1803:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1804:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1805:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1806:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xReturn;
 2392              	 .loc 1 1806 9
 2393 0014 3B68     	 ldr r3,[r7]
1807:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 2394              	 .loc 1 1807 1
 2395 0016 1846     	 mov r0,r3
 2396 0018 0837     	 adds r7,r7,#8
 2397              	 .cfi_def_cfa_offset 8
 2398 001a BD46     	 mov sp,r7
 2399              	 .cfi_def_cfa_register 13
 2400              	 
 2401 001c 80BD     	 pop {r7,pc}
 2402              	.L128:
 2403 001e 00BF     	 .align 2
 2404              	.L127:
 2405 0020 00000000 	 .word _ZL10xTickCount
 2406              	 .cfi_endproc
 2407              	.LFE25:
 2408              	 .fnend
 2409              	 .size xTaskGetTickCountFromISR,.-xTaskGetTickCountFromISR
 2410              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 2411              	 .align 1
 2412              	 .global uxTaskGetNumberOfTasks
 2413              	 .syntax unified
 2414              	 .thumb
 2415              	 .thumb_func
 2416              	 .type uxTaskGetNumberOfTasks,%function
 2417              	uxTaskGetNumberOfTasks:
 2418              	 .fnstart
 2419              	.LFB26:
1808:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1809:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1810:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
1811:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 2420              	 .loc 1 1811 1
 2421              	 .cfi_startproc
 2422              	 
 2423              	 
 2424              	 
 2425 0000 80B4     	 push {r7}
 2426              	 .cfi_def_cfa_offset 4
 2427              	 .cfi_offset 7,-4
 2428 0002 00AF     	 add r7,sp,#0
 2429              	 .cfi_def_cfa_register 7
1812:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* A critical section is not required because the variables are of type
1813:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t. */
1814:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return uxCurrentNumberOfTasks;
 2430              	 .loc 1 1814 9
 2431 0004 034B     	 ldr r3,.L131
 2432 0006 1B68     	 ldr r3,[r3]
1815:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
ARM GAS   			page 81


 2433              	 .loc 1 1815 1
 2434 0008 1846     	 mov r0,r3
 2435 000a BD46     	 mov sp,r7
 2436              	 .cfi_def_cfa_register 13
 2437              	 
 2438 000c 5DF8047B 	 ldr r7,[sp],#4
 2439              	 .cfi_restore 7
 2440              	 .cfi_def_cfa_offset 0
 2441 0010 7047     	 bx lr
 2442              	.L132:
 2443 0012 00BF     	 .align 2
 2444              	.L131:
 2445 0014 00000000 	 .word _ZL22uxCurrentNumberOfTasks
 2446              	 .cfi_endproc
 2447              	.LFE26:
 2448              	 .cantunwind
 2449              	 .fnend
 2450              	 .size uxTaskGetNumberOfTasks,.-uxTaskGetNumberOfTasks
 2451              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 2452              	 .align 1
 2453              	 .global uxTaskGetSystemState
 2454              	 .syntax unified
 2455              	 .thumb
 2456              	 .thumb_func
 2457              	 .type uxTaskGetSystemState,%function
 2458              	uxTaskGetSystemState:
 2459              	 .fnstart
 2460              	.LFB27:
1816:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1817:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1818:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1819:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1820:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1821:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1822:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
1823:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1824:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1825:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1826:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( pxTCB );
1827:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1828:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1829:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1830:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1831:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
1832:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1833:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1834:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1835:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
1836:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 2461              	 .loc 1 1836 2
 2462              	 .cfi_startproc
 2463              	 
 2464              	 
 2465 0000 80B5     	 push {r7,lr}
 2466              	 .save {r7,lr}
 2467              	 .cfi_def_cfa_offset 8
 2468              	 .cfi_offset 7,-8
ARM GAS   			page 82


 2469              	 .cfi_offset 14,-4
 2470              	 .pad #24
 2471 0002 86B0     	 sub sp,sp,#24
 2472              	 .cfi_def_cfa_offset 32
 2473              	 .setfp r7,sp,#0
 2474 0004 00AF     	 add r7,sp,#0
 2475              	 .cfi_def_cfa_register 7
 2476 0006 F860     	 str r0,[r7,#12]
 2477 0008 B960     	 str r1,[r7,#8]
 2478 000a 7A60     	 str r2,[r7,#4]
1837:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2479              	 .loc 1 1837 14
 2480 000c 0023     	 movs r3,#0
 2481 000e 7B61     	 str r3,[r7,#20]
 2482              	 .loc 1 1837 26
 2483 0010 0723     	 movs r3,#7
 2484 0012 3B61     	 str r3,[r7,#16]
1838:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1839:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vTaskSuspendAll();
 2485              	 .loc 1 1839 18
 2486 0014 FFF7FEFF 	 bl vTaskSuspendAll
1840:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1841:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Is there a space in the array for each task in the system? */
1842:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2487              	 .loc 1 1842 23
 2488 0018 2C4B     	 ldr r3,.L138
 2489 001a 1B68     	 ldr r3,[r3]
 2490              	 .loc 1 1842 20
 2491 001c BA68     	 ldr r2,[r7,#8]
 2492 001e 9A42     	 cmp r2,r3
 2493 0020 2CBF     	 ite cs
 2494 0022 0123     	 movcs r3,#1
 2495 0024 0023     	 movcc r3,#0
 2496 0026 DBB2     	 uxtb r3,r3
 2497              	 .loc 1 1842 4
 2498 0028 002B     	 cmp r3,#0
 2499 002a 48D0     	 beq .L134
 2500              	.L136:
1843:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1844:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1845:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				task in the Ready state. */
1846:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				do
1847:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1848:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					uxQueue--;
 2501              	 .loc 1 1848 13
 2502 002c 3B69     	 ldr r3,[r7,#16]
 2503 002e 013B     	 subs r3,r3,#1
 2504 0030 3B61     	 str r3,[r7,#16]
1849:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
 2505              	 .loc 1 1849 74
 2506 0032 7B69     	 ldr r3,[r7,#20]
 2507 0034 5B01     	 lsls r3,r3,#5
 2508              	 .loc 1 1849 43
 2509 0036 FA68     	 ldr r2,[r7,#12]
 2510 0038 D018     	 adds r0,r2,r3
 2511 003a 3A69     	 ldr r2,[r7,#16]
 2512 003c 1346     	 mov r3,r2
ARM GAS   			page 83


 2513 003e 9B00     	 lsls r3,r3,#2
 2514 0040 1344     	 add r3,r3,r2
 2515 0042 9B00     	 lsls r3,r3,#2
 2516 0044 224A     	 ldr r2,.L138+4
 2517 0046 1344     	 add r3,r3,r2
 2518 0048 0122     	 movs r2,#1
 2519 004a 1946     	 mov r1,r3
 2520 004c FFF7FEFF 	 bl _ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 2521 0050 0246     	 mov r2,r0
 2522              	 .loc 1 1849 13
 2523 0052 7B69     	 ldr r3,[r7,#20]
 2524 0054 1344     	 add r3,r3,r2
 2525 0056 7B61     	 str r3,[r7,#20]
1850:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1851:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 2526              	 .loc 1 1851 22
 2527 0058 3B69     	 ldr r3,[r7,#16]
 2528 005a 002B     	 cmp r3,#0
 2529 005c 00D0     	 beq .L135
1846:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
 2530              	 .loc 1 1846 5
 2531 005e E5E7     	 b .L136
 2532              	.L135:
1852:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1853:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1854:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				task in the Blocked state. */
1855:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
 2533              	 .loc 1 1855 73
 2534 0060 7B69     	 ldr r3,[r7,#20]
 2535 0062 5B01     	 lsls r3,r3,#5
 2536              	 .loc 1 1855 42
 2537 0064 FA68     	 ldr r2,[r7,#12]
 2538 0066 1344     	 add r3,r3,r2
 2539 0068 1A4A     	 ldr r2,.L138+8
 2540 006a 1168     	 ldr r1,[r2]
 2541 006c 0222     	 movs r2,#2
 2542 006e 1846     	 mov r0,r3
 2543 0070 FFF7FEFF 	 bl _ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 2544 0074 0246     	 mov r2,r0
 2545              	 .loc 1 1855 12
 2546 0076 7B69     	 ldr r3,[r7,#20]
 2547 0078 1344     	 add r3,r3,r2
 2548 007a 7B61     	 str r3,[r7,#20]
1856:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2549              	 .loc 1 1856 73
 2550 007c 7B69     	 ldr r3,[r7,#20]
 2551 007e 5B01     	 lsls r3,r3,#5
 2552              	 .loc 1 1856 42
 2553 0080 FA68     	 ldr r2,[r7,#12]
 2554 0082 1344     	 add r3,r3,r2
 2555 0084 144A     	 ldr r2,.L138+12
 2556 0086 1168     	 ldr r1,[r2]
 2557 0088 0222     	 movs r2,#2
 2558 008a 1846     	 mov r0,r3
 2559 008c FFF7FEFF 	 bl _ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 2560 0090 0246     	 mov r2,r0
 2561              	 .loc 1 1856 12
ARM GAS   			page 84


 2562 0092 7B69     	 ldr r3,[r7,#20]
 2563 0094 1344     	 add r3,r3,r2
 2564 0096 7B61     	 str r3,[r7,#20]
1857:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1858:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1859:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1860:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1861:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1862:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1863:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1864:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
1865:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1866:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1867:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1868:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1869:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					each task in the Suspended state. */
1870:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
 2565              	 .loc 1 1870 74
 2566 0098 7B69     	 ldr r3,[r7,#20]
 2567 009a 5B01     	 lsls r3,r3,#5
 2568              	 .loc 1 1870 43
 2569 009c FA68     	 ldr r2,[r7,#12]
 2570 009e 1344     	 add r3,r3,r2
 2571 00a0 0322     	 movs r2,#3
 2572 00a2 0E49     	 ldr r1,.L138+16
 2573 00a4 1846     	 mov r0,r3
 2574 00a6 FFF7FEFF 	 bl _ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 2575 00aa 0246     	 mov r2,r0
 2576              	 .loc 1 1870 13
 2577 00ac 7B69     	 ldr r3,[r7,#20]
 2578 00ae 1344     	 add r3,r3,r2
 2579 00b0 7B61     	 str r3,[r7,#20]
1871:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1872:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
1873:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1874:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1875:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1876:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pulTotalRunTime != NULL )
1877:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1878:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1879:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1880:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#else
1881:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1882:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#endif
1883:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1884:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1885:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#else
1886:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1887:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pulTotalRunTime != NULL )
 2580              	 .loc 1 1887 6
 2581 00b2 7B68     	 ldr r3,[r7,#4]
 2582 00b4 002B     	 cmp r3,#0
 2583 00b6 02D0     	 beq .L134
1888:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1889:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						*pulTotalRunTime = 0;
 2584              	 .loc 1 1889 24
 2585 00b8 7B68     	 ldr r3,[r7,#4]
ARM GAS   			page 85


 2586 00ba 0022     	 movs r2,#0
 2587 00bc 1A60     	 str r2,[r3]
 2588              	.L134:
1890:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1891:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
1892:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
1893:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1894:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1895:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1896:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1897:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1898:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
1899:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		( void ) xTaskResumeAll();
 2589              	 .loc 1 1899 26
 2590 00be FFF7FEFF 	 bl xTaskResumeAll
1900:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1901:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return uxTask;
 2591              	 .loc 1 1901 10
 2592 00c2 7B69     	 ldr r3,[r7,#20]
1902:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 2593              	 .loc 1 1902 2
 2594 00c4 1846     	 mov r0,r3
 2595 00c6 1837     	 adds r7,r7,#24
 2596              	 .cfi_def_cfa_offset 8
 2597 00c8 BD46     	 mov sp,r7
 2598              	 .cfi_def_cfa_register 13
 2599              	 
 2600 00ca 80BD     	 pop {r7,pc}
 2601              	.L139:
 2602              	 .align 2
 2603              	.L138:
 2604 00cc 00000000 	 .word _ZL22uxCurrentNumberOfTasks
 2605 00d0 00000000 	 .word _ZL17pxReadyTasksLists
 2606 00d4 00000000 	 .word _ZL17pxDelayedTaskList
 2607 00d8 00000000 	 .word _ZL25pxOverflowDelayedTaskList
 2608 00dc 00000000 	 .word _ZL18xSuspendedTaskList
 2609              	 .cfi_endproc
 2610              	.LFE27:
 2611              	 .fnend
 2612              	 .size uxTaskGetSystemState,.-uxTaskGetSystemState
 2613              	 .section .text.xTaskIncrementTick,"ax",%progbits
 2614              	 .align 1
 2615              	 .global xTaskIncrementTick
 2616              	 .syntax unified
 2617              	 .thumb
 2618              	 .thumb_func
 2619              	 .type xTaskIncrementTick,%function
 2620              	xTaskIncrementTick:
 2621              	 .fnstart
 2622              	.LFB28:
1903:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1904:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1905:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*----------------------------------------------------------*/
1906:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1907:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1908:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1909:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
ARM GAS   			page 86


1910:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1911:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1912:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1913:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1914:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xIdleTaskHandle;
1915:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1916:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1917:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1918:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*----------------------------------------------------------*/
1919:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1920:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1921:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1922:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1923:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 1. */
1924:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1925:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1926:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
1927:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1928:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Correct the tick count value after a period during which the tick
1929:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1930:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		each stepped tick. */
1931:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1932:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xTickCount += xTicksToJump;
1933:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1934:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
1935:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1936:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1937:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*----------------------------------------------------------*/
1938:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1939:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xTaskIncrementTick( void )
1940:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 2623              	 .loc 1 1940 1
 2624              	 .cfi_startproc
 2625              	 
 2626              	 
 2627 0000 80B5     	 push {r7,lr}
 2628              	 .save {r7,lr}
 2629              	 .cfi_def_cfa_offset 8
 2630              	 .cfi_offset 7,-8
 2631              	 .cfi_offset 14,-4
 2632              	 .pad #24
 2633 0002 86B0     	 sub sp,sp,#24
 2634              	 .cfi_def_cfa_offset 32
 2635              	 .setfp r7,sp,#0
 2636 0004 00AF     	 add r7,sp,#0
 2637              	 .cfi_def_cfa_register 7
1941:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TCB_t * pxTCB;
1942:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t xItemValue;
1943:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2638              	 .loc 1 1943 12
 2639 0006 0023     	 movs r3,#0
 2640 0008 7B61     	 str r3,[r7,#20]
 2641              	.LBB129:
1944:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1945:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1946:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1947:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	tasks to be unblocked. */
ARM GAS   			page 87


1948:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1949:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2642              	 .loc 1 1949 27
 2643 000a 634B     	 ldr r3,.L155
 2644 000c 1B68     	 ldr r3,[r3]
 2645 000e 002B     	 cmp r3,#0
 2646 0010 0CBF     	 ite eq
 2647 0012 0123     	 moveq r3,#1
 2648 0014 0023     	 movne r3,#0
 2649 0016 DBB2     	 uxtb r3,r3
 2650              	 .loc 1 1949 2
 2651 0018 002B     	 cmp r3,#0
 2652 001a 00F0A880 	 beq .L141
 2653              	.LBB130:
1950:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
1951:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1952:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		delayed lists if it wraps to 0. */
1953:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		++xTickCount;
 2654              	 .loc 1 1953 3
 2655 001e 5F4B     	 ldr r3,.L155+4
 2656 0020 1B68     	 ldr r3,[r3]
 2657 0022 0133     	 adds r3,r3,#1
 2658 0024 5D4A     	 ldr r2,.L155+4
 2659 0026 1360     	 str r3,[r2]
 2660              	.LBB131:
1954:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1955:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
1956:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1957:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			block. */
1958:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 2661              	 .loc 1 1958 39
 2662 0028 5C4B     	 ldr r3,.L155+4
 2663 002a 1B68     	 ldr r3,[r3]
 2664 002c 3B61     	 str r3,[r7,#16]
 2665              	.LBB132:
1959:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1960:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xConstTickCount == ( TickType_t ) 0U )
 2666              	 .loc 1 1960 4
 2667 002e 3B69     	 ldr r3,[r7,#16]
 2668 0030 002B     	 cmp r3,#0
 2669 0032 25D1     	 bne .L142
 2670              	.LBB133:
 2671              	.LBB134:
1961:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1962:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2672              	 .loc 1 1962 5
 2673 0034 5A4B     	 ldr r3,.L155+8
 2674 0036 1B68     	 ldr r3,[r3]
 2675 0038 1B68     	 ldr r3,[r3]
 2676 003a 002B     	 cmp r3,#0
 2677 003c 14BF     	 ite ne
 2678 003e 0123     	 movne r3,#1
 2679 0040 0023     	 moveq r3,#0
 2680 0042 DBB2     	 uxtb r3,r3
 2681 0044 002B     	 cmp r3,#0
 2682 0046 0AD0     	 beq .L143
 2683              	.LBB135:
ARM GAS   			page 88


 2684              	.LBB136:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2685              	 .loc 2 215 2
 2686              	 .syntax unified
 2687              	
 2688 0048 4FF01003 	 mov r3,#16
 2689 004c 83F31188 	 msr basepri,r3
 2690 0050 BFF36F8F 	 isb 
 2691 0054 BFF34F8F 	 dsb 
 2692              	
 2693              	
 2694              	 .thumb
 2695              	 .syntax unified
 2696 0058 3B60     	 str r3,[r7]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 2697              	 .loc 2 223 1
 2698 005a 00BF     	 nop
 2699              	.L144:
 2700              	.LBE136:
 2701              	.LBE135:
 2702              	 .loc 1 1962 5 discriminator 1
 2703 005c FEE7     	 b .L144
 2704              	.L143:
 2705              	 .loc 1 1962 5 is_stmt 0 discriminator 2
 2706 005e 504B     	 ldr r3,.L155+8
 2707 0060 1B68     	 ldr r3,[r3]
 2708 0062 FB60     	 str r3,[r7,#12]
 2709 0064 4F4B     	 ldr r3,.L155+12
 2710 0066 1B68     	 ldr r3,[r3]
 2711 0068 4D4A     	 ldr r2,.L155+8
 2712 006a 1360     	 str r3,[r2]
 2713 006c 4D4A     	 ldr r2,.L155+12
 2714 006e FB68     	 ldr r3,[r7,#12]
 2715 0070 1360     	 str r3,[r2]
 2716 0072 4D4B     	 ldr r3,.L155+16
 2717 0074 1B68     	 ldr r3,[r3]
 2718 0076 0133     	 adds r3,r3,#1
 2719 0078 4B4A     	 ldr r2,.L155+16
 2720 007a 1360     	 str r3,[r2]
 2721 007c FFF7FEFF 	 bl _ZL27prvResetNextTaskUnblockTimev
 2722              	.L142:
 2723              	.LBE134:
 2724              	.LBE133:
 2725              	.LBE132:
1963:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1964:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
1965:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1966:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1967:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
1968:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1969:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1970:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1971:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			has been found whose block time has not expired there is no need to
1972:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			look any further down the list. */
1973:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2726              	 .loc 1 1973 27 is_stmt 1
 2727 0080 4A4B     	 ldr r3,.L155+20
ARM GAS   			page 89


 2728 0082 1B68     	 ldr r3,[r3]
 2729              	 .loc 1 1973 24
 2730 0084 3A69     	 ldr r2,[r7,#16]
 2731 0086 9A42     	 cmp r2,r3
 2732 0088 2CBF     	 ite cs
 2733 008a 0123     	 movcs r3,#1
 2734 008c 0023     	 movcc r3,#0
 2735 008e DBB2     	 uxtb r3,r3
 2736              	 .loc 1 1973 4
 2737 0090 002B     	 cmp r3,#0
 2738 0092 58D0     	 beq .L145
 2739              	.L151:
1974:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
1975:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				for( ;; )
1976:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
1977:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2740              	 .loc 1 1977 10
 2741 0094 424B     	 ldr r3,.L155+8
 2742 0096 1B68     	 ldr r3,[r3]
 2743 0098 1B68     	 ldr r3,[r3]
 2744 009a 002B     	 cmp r3,#0
 2745 009c 0CBF     	 ite eq
 2746 009e 0123     	 moveq r3,#1
 2747 00a0 0023     	 movne r3,#0
 2748 00a2 DBB2     	 uxtb r3,r3
 2749              	 .loc 1 1977 49
 2750 00a4 002B     	 cmp r3,#0
 2751 00a6 14BF     	 ite ne
 2752 00a8 0123     	 movne r3,#1
 2753 00aa 0023     	 moveq r3,#0
 2754 00ac DBB2     	 uxtb r3,r3
 2755              	 .loc 1 1977 6
 2756 00ae 002B     	 cmp r3,#0
 2757 00b0 04D0     	 beq .L146
1978:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1979:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1980:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						to the maximum possible value so it is extremely
1981:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						unlikely that the
1982:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1983:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						next time through. */
1984:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2758              	 .loc 1 1984 28
 2759 00b2 3E4B     	 ldr r3,.L155+20
 2760 00b4 4FF0FF32 	 mov r2,#-1
 2761 00b8 1A60     	 str r2,[r3]
1985:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						break;
 2762              	 .loc 1 1985 7
 2763 00ba 44E0     	 b .L145
 2764              	.L146:
1986:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
1987:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
1988:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
1989:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The delayed list is not empty, get the value of the
1990:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						item at the head of the delayed list.  This is the time
1991:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						at which the task at the head of the delayed list must
1992:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						be removed from the Blocked state. */
1993:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
ARM GAS   			page 90


 2765              	 .loc 1 1993 27
 2766 00bc 384B     	 ldr r3,.L155+8
 2767 00be 1B68     	 ldr r3,[r3]
 2768 00c0 DB68     	 ldr r3,[r3,#12]
 2769              	 .loc 1 1993 13
 2770 00c2 DB68     	 ldr r3,[r3,#12]
 2771 00c4 BB60     	 str r3,[r7,#8]
1994:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2772              	 .loc 1 1994 18
 2773 00c6 BB68     	 ldr r3,[r7,#8]
 2774 00c8 5B68     	 ldr r3,[r3,#4]
 2775 00ca 7B60     	 str r3,[r7,#4]
1995:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
1996:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( xConstTickCount < xItemValue )
 2776              	 .loc 1 1996 7
 2777 00cc 3A69     	 ldr r2,[r7,#16]
 2778 00ce 7B68     	 ldr r3,[r7,#4]
 2779 00d0 9A42     	 cmp r2,r3
 2780 00d2 03D2     	 bcs .L148
1997:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
1998:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* It is not time to unblock this item yet, but the
1999:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							item value is the time at which the task at the head
2000:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							of the blocked list must be removed from the Blocked
2001:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							state -	so record the item value in
2002:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xNextTaskUnblockTime. */
2003:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2781              	 .loc 1 2003 29
 2782 00d4 354A     	 ldr r2,.L155+20
 2783 00d6 7B68     	 ldr r3,[r7,#4]
 2784 00d8 1360     	 str r3,[r2]
2004:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							break;
 2785              	 .loc 1 2004 8
 2786 00da 34E0     	 b .L145
 2787              	.L148:
2005:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
2006:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						else
2007:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
2008:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2009:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
2010:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2011:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* It is time to remove the item from the Blocked state. */
2012:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2788              	 .loc 1 2012 28
 2789 00dc BB68     	 ldr r3,[r7,#8]
 2790 00de 0433     	 adds r3,r3,#4
 2791 00e0 1846     	 mov r0,r3
 2792 00e2 FFF7FEFF 	 bl uxListRemove
2013:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2014:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* Is the task waiting on an event also?  If so remove
2015:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						it from the event list. */
2016:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2793              	 .loc 1 2016 11
 2794 00e6 BB68     	 ldr r3,[r7,#8]
 2795 00e8 9B6A     	 ldr r3,[r3,#40]
 2796              	 .loc 1 2016 7
 2797 00ea 002B     	 cmp r3,#0
 2798 00ec 04D0     	 beq .L149
ARM GAS   			page 91


2017:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
2018:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2799              	 .loc 1 2018 29
 2800 00ee BB68     	 ldr r3,[r7,#8]
 2801 00f0 1833     	 adds r3,r3,#24
 2802 00f2 1846     	 mov r0,r3
 2803 00f4 FFF7FEFF 	 bl uxListRemove
 2804              	.L149:
2019:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
2020:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						else
2021:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
2022:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2023:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
2024:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2025:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* Place the unblocked task into the appropriate ready
2026:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						list. */
2027:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2805              	 .loc 1 2027 7
 2806 00f8 2D4B     	 ldr r3,.L155+24
 2807 00fa 1A68     	 ldr r2,[r3]
 2808 00fc BB68     	 ldr r3,[r7,#8]
 2809 00fe DB6A     	 ldr r3,[r3,#44]
 2810 0100 0121     	 movs r1,#1
 2811 0102 01FA03F3 	 lsl r3,r1,r3
 2812 0106 1343     	 orrs r3,r3,r2
 2813 0108 294A     	 ldr r2,.L155+24
 2814 010a 1360     	 str r3,[r2]
 2815 010c BB68     	 ldr r3,[r7,#8]
 2816 010e DA6A     	 ldr r2,[r3,#44]
 2817 0110 1346     	 mov r3,r2
 2818 0112 9B00     	 lsls r3,r3,#2
 2819 0114 1344     	 add r3,r3,r2
 2820 0116 9B00     	 lsls r3,r3,#2
 2821 0118 264A     	 ldr r2,.L155+28
 2822 011a 1A44     	 add r2,r2,r3
 2823 011c BB68     	 ldr r3,[r7,#8]
 2824 011e 0433     	 adds r3,r3,#4
 2825 0120 1946     	 mov r1,r3
 2826 0122 1046     	 mov r0,r2
 2827 0124 FFF7FEFF 	 bl vListInsertEnd
2028:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2029:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* A task being unblocked cannot cause an immediate
2030:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						context switch if preemption is turned off. */
2031:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
2032:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
2033:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* Preemption is on, but a context switch should
2034:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							only be performed if the unblocked task has a
2035:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							priority that is equal to or higher than the
2036:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							currently executing task. */
2037:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2828              	 .loc 1 2037 19
 2829 0128 BB68     	 ldr r3,[r7,#8]
 2830 012a DA6A     	 ldr r2,[r3,#44]
 2831              	 .loc 1 2037 33
 2832 012c 224B     	 ldr r3,.L155+32
 2833 012e 1B68     	 ldr r3,[r3]
 2834              	 .loc 1 2037 47
ARM GAS   			page 92


 2835 0130 DB6A     	 ldr r3,[r3,#44]
 2836              	 .loc 1 2037 30
 2837 0132 9A42     	 cmp r2,r3
 2838 0134 2CBF     	 ite cs
 2839 0136 0123     	 movcs r3,#1
 2840 0138 0023     	 movcc r3,#0
 2841 013a DBB2     	 uxtb r3,r3
 2842              	 .loc 1 2037 8
 2843 013c 002B     	 cmp r3,#0
 2844 013e A9D0     	 beq .L151
2038:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							{
2039:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 								xSwitchRequired = pdTRUE;
 2845              	 .loc 1 2039 25
 2846 0140 0123     	 movs r3,#1
 2847 0142 7B61     	 str r3,[r7,#20]
1977:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
 2848              	 .loc 1 1977 6
 2849 0144 A6E7     	 b .L151
 2850              	.L145:
 2851              	.LBE131:
2040:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							}
2041:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							else
2042:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							{
2043:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2044:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							}
2045:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
2046:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#endif /* configUSE_PREEMPTION */
2047:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
2048:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
2049:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2050:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2051:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2052:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2053:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		processing time (time slice) if preemption is on, and the application
2054:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		writer has not explicitly turned time slicing off. */
2055:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2056:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2057:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2852              	 .loc 1 2057 8
 2853 0146 1C4B     	 ldr r3,.L155+32
 2854 0148 1B68     	 ldr r3,[r3]
 2855 014a DA6A     	 ldr r2,[r3,#44]
 2856 014c 1949     	 ldr r1,.L155+28
 2857 014e 1346     	 mov r3,r2
 2858 0150 9B00     	 lsls r3,r3,#2
 2859 0152 1344     	 add r3,r3,r2
 2860 0154 9B00     	 lsls r3,r3,#2
 2861 0156 0B44     	 add r3,r3,r1
 2862 0158 1B68     	 ldr r3,[r3]
 2863              	 .loc 1 2057 86
 2864 015a 012B     	 cmp r3,#1
 2865 015c 8CBF     	 ite hi
 2866 015e 0123     	 movhi r3,#1
 2867 0160 0023     	 movls r3,#0
 2868 0162 DBB2     	 uxtb r3,r3
 2869              	 .loc 1 2057 4
 2870 0164 002B     	 cmp r3,#0
ARM GAS   			page 93


 2871 0166 07D0     	 beq .L152
2058:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2059:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xSwitchRequired = pdTRUE;
 2872              	 .loc 1 2059 21
 2873 0168 0123     	 movs r3,#1
 2874 016a 7B61     	 str r3,[r7,#20]
 2875 016c 04E0     	 b .L152
 2876              	.L141:
 2877              	.LBE130:
2060:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2061:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
2062:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2063:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2064:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2065:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2066:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2067:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2068:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2069:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2070:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2071:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2072:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2073:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2074:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				vApplicationTickHook();
2075:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2076:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
2077:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2078:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2079:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2080:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2081:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2082:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2083:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2084:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2085:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		++uxPendedTicks;
 2878              	 .loc 1 2085 3
 2879 016e 134B     	 ldr r3,.L155+36
 2880 0170 1B68     	 ldr r3,[r3]
 2881 0172 0133     	 adds r3,r3,#1
 2882 0174 114A     	 ldr r2,.L155+36
 2883 0176 1360     	 str r3,[r2]
 2884              	.L152:
 2885              	.LBE129:
2086:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2087:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2088:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		scheduler is locked. */
2089:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2090:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2091:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vApplicationTickHook();
2092:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2093:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif
2094:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2095:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2096:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2097:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2098:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xYieldPending != pdFALSE )
 2886              	 .loc 1 2098 21
ARM GAS   			page 94


 2887 0178 114B     	 ldr r3,.L155+40
 2888 017a 1B68     	 ldr r3,[r3]
 2889 017c 002B     	 cmp r3,#0
 2890 017e 14BF     	 ite ne
 2891 0180 0123     	 movne r3,#1
 2892 0182 0023     	 moveq r3,#0
 2893 0184 DBB2     	 uxtb r3,r3
 2894              	 .loc 1 2098 3
 2895 0186 002B     	 cmp r3,#0
 2896 0188 01D0     	 beq .L153
2099:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2100:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xSwitchRequired = pdTRUE;
 2897              	 .loc 1 2100 20
 2898 018a 0123     	 movs r3,#1
 2899 018c 7B61     	 str r3,[r7,#20]
 2900              	.L153:
2101:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2102:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2103:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2104:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2105:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2106:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2107:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* configUSE_PREEMPTION */
2108:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2109:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xSwitchRequired;
 2901              	 .loc 1 2109 9
 2902 018e 7B69     	 ldr r3,[r7,#20]
2110:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 2903              	 .loc 1 2110 1
 2904 0190 1846     	 mov r0,r3
 2905 0192 1837     	 adds r7,r7,#24
 2906              	 .cfi_def_cfa_offset 8
 2907 0194 BD46     	 mov sp,r7
 2908              	 .cfi_def_cfa_register 13
 2909              	 
 2910 0196 80BD     	 pop {r7,pc}
 2911              	.L156:
 2912              	 .align 2
 2913              	.L155:
 2914 0198 00000000 	 .word _ZL20uxSchedulerSuspended
 2915 019c 00000000 	 .word _ZL10xTickCount
 2916 01a0 00000000 	 .word _ZL17pxDelayedTaskList
 2917 01a4 00000000 	 .word _ZL25pxOverflowDelayedTaskList
 2918 01a8 00000000 	 .word _ZL15xNumOfOverflows
 2919 01ac 00000000 	 .word _ZL20xNextTaskUnblockTime
 2920 01b0 00000000 	 .word _ZL18uxTopReadyPriority
 2921 01b4 00000000 	 .word _ZL17pxReadyTasksLists
 2922 01b8 00000000 	 .word pxCurrentTCB
 2923 01bc 00000000 	 .word _ZL13uxPendedTicks
 2924 01c0 00000000 	 .word _ZL13xYieldPending
 2925              	 .cfi_endproc
 2926              	.LFE28:
 2927              	 .fnend
 2928              	 .size xTaskIncrementTick,.-xTaskIncrementTick
 2929              	 .section .text.vTaskSwitchContext,"ax",%progbits
 2930              	 .align 1
 2931              	 .global vTaskSwitchContext
ARM GAS   			page 95


 2932              	 .syntax unified
 2933              	 .thumb
 2934              	 .thumb_func
 2935              	 .type vTaskSwitchContext,%function
 2936              	vTaskSwitchContext:
 2937              	 .fnstart
 2938              	.LFB29:
2111:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2112:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2113:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2114:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2115:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2116:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2117:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *xTCB;
2118:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2119:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2120:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		getting set. */
2121:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTask == NULL )
2122:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2123:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2124:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2125:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2126:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2127:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2128:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2129:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2130:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2131:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the value can be accessed from an interrupt. */
2132:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
2133:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2134:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
2135:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2136:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2137:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2138:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2139:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2140:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2141:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2142:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2143:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2144:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *xTCB;
2145:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TaskHookFunction_t xReturn;
2146:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2147:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2148:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTask == NULL )
2149:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2150:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2151:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2152:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2153:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2154:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2155:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2156:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2157:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2158:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the value can be accessed from an interrupt. */
2159:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
2160:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
ARM GAS   			page 96


2161:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = xTCB->pxTaskTag;
2162:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2163:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
2164:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2165:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
2166:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2167:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2168:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2169:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2170:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2171:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2172:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2173:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2174:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2175:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *xTCB;
2176:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn;
2177:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2178:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2179:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTask == NULL )
2180:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2181:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2182:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2183:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2184:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2185:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2186:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2187:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2188:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2189:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2190:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2191:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2192:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2193:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2194:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = pdFAIL;
2195:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2196:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2197:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
2198:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2199:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2200:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2201:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2202:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2203:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskSwitchContext( void )
2204:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 2939              	 .loc 1 2204 1
 2940              	 .cfi_startproc
 2941              	 
 2942              	 
 2943              	 
 2944 0000 80B4     	 push {r7}
 2945              	 .cfi_def_cfa_offset 4
 2946              	 .cfi_offset 7,-4
 2947 0002 87B0     	 sub sp,sp,#28
 2948              	 .cfi_def_cfa_offset 32
 2949 0004 00AF     	 add r7,sp,#0
 2950              	 .cfi_def_cfa_register 7
 2951              	.LBB137:
ARM GAS   			page 97


2205:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2952              	 .loc 1 2205 27
 2953 0006 294B     	 ldr r3,.L165
 2954 0008 1B68     	 ldr r3,[r3]
 2955 000a 002B     	 cmp r3,#0
 2956 000c 14BF     	 ite ne
 2957 000e 0123     	 movne r3,#1
 2958 0010 0023     	 moveq r3,#0
 2959 0012 DBB2     	 uxtb r3,r3
 2960              	 .loc 1 2205 2
 2961 0014 002B     	 cmp r3,#0
 2962 0016 03D0     	 beq .L158
2206:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2207:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2208:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		switch. */
2209:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xYieldPending = pdTRUE;
 2963              	 .loc 1 2209 17
 2964 0018 254B     	 ldr r3,.L165+4
 2965 001a 0122     	 movs r2,#1
 2966 001c 1A60     	 str r2,[r3]
 2967              	.LBE137:
2210:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2211:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2212:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2213:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xYieldPending = pdFALSE;
2214:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_OUT();
2215:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2216:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2217:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2218:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2219:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2220:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#else
2221:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2222:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
2223:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2224:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Add the amount of time the task has been running to the
2225:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				accumulated	time so far.  The time the task started running was
2226:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2227:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				protection here	so count values are only valid until the timer
2228:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				overflows.  The guard against negative values is to protect
2229:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				against suspect run time stat counter implementations - which
2230:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				are provided by the application, not the kernel. */
2231:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2232:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
2233:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2234:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
2235:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
2236:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
2237:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2238:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
2239:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2240:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2241:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2242:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2243:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Check for stack overflow, if configured. */
2244:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2245:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 98


2246:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Select a new task to run using either the generic C or port
2247:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		optimised asm code. */
2248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2249:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_IN();
2250:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2251:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2252:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2253:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2254:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			structure specific to this task. */
2255:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2256:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2257:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2258:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2259:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 2968              	 .loc 1 2259 1
 2969 001e 3FE0     	 b .L164
 2970              	.L158:
 2971              	.LBB145:
 2972              	.LBB138:
2213:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_OUT();
 2973              	 .loc 1 2213 17
 2974 0020 234B     	 ldr r3,.L165+4
 2975 0022 0022     	 movs r2,#0
 2976 0024 1A60     	 str r2,[r3]
 2977              	.LBB139:
2248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_IN();
 2978              	 .loc 1 2248 3
 2979 0026 234B     	 ldr r3,.L165+8
 2980 0028 1B68     	 ldr r3,[r3]
 2981 002a FB60     	 str r3,[r7,#12]
 2982              	.LBB140:
 2983              	.LBB141:
 176:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		return ucReturn;
 2984              	 .loc 2 176 3
 2985 002c FB68     	 ldr r3,[r7,#12]
 2986              	 .syntax unified
 2987              	
 2988 002e B3FA83F3 	 clz r3,r3
 2989              	
 2990              	 .thumb
 2991              	 .syntax unified
 2992 0032 FB72     	 strb r3,[r7,#11]
 177:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	}
 2993              	 .loc 2 177 10
 2994 0034 FB7A     	 ldrb r3,[r7,#11]
 2995              	.LBE141:
 2996              	.LBE140:
2248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_IN();
 2997              	 .loc 1 2248 3
 2998 0036 C3F11F03 	 rsb r3,r3,#31
 2999 003a 7B61     	 str r3,[r7,#20]
 3000 003c 1E49     	 ldr r1,.L165+12
 3001 003e 7A69     	 ldr r2,[r7,#20]
 3002 0040 1346     	 mov r3,r2
 3003 0042 9B00     	 lsls r3,r3,#2
 3004 0044 1344     	 add r3,r3,r2
 3005 0046 9B00     	 lsls r3,r3,#2
ARM GAS   			page 99


 3006 0048 0B44     	 add r3,r3,r1
 3007 004a 1B68     	 ldr r3,[r3]
 3008 004c 002B     	 cmp r3,#0
 3009 004e 0AD1     	 bne .L161
 3010              	.LBB142:
 3011              	.LBB143:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3012              	 .loc 2 215 2
 3013              	 .syntax unified
 3014              	
 3015 0050 4FF01003 	 mov r3,#16
 3016 0054 83F31188 	 msr basepri,r3
 3017 0058 BFF36F8F 	 isb 
 3018 005c BFF34F8F 	 dsb 
 3019              	
 3020              	
 3021              	 .thumb
 3022              	 .syntax unified
 3023 0060 7B60     	 str r3,[r7,#4]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3024              	 .loc 2 223 1
 3025 0062 00BF     	 nop
 3026              	.L162:
 3027              	.LBE143:
 3028              	.LBE142:
2248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_IN();
 3029              	 .loc 1 2248 3 discriminator 1
 3030 0064 FEE7     	 b .L162
 3031              	.L161:
 3032              	.LBB144:
2248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_IN();
 3033              	 .loc 1 2248 3 is_stmt 0 discriminator 2
 3034 0066 7A69     	 ldr r2,[r7,#20]
 3035 0068 1346     	 mov r3,r2
 3036 006a 9B00     	 lsls r3,r3,#2
 3037 006c 1344     	 add r3,r3,r2
 3038 006e 9B00     	 lsls r3,r3,#2
 3039 0070 114A     	 ldr r2,.L165+12
 3040 0072 1344     	 add r3,r3,r2
 3041 0074 3B61     	 str r3,[r7,#16]
 3042 0076 3B69     	 ldr r3,[r7,#16]
 3043 0078 5B68     	 ldr r3,[r3,#4]
 3044 007a 5A68     	 ldr r2,[r3,#4]
 3045 007c 3B69     	 ldr r3,[r7,#16]
 3046 007e 5A60     	 str r2,[r3,#4]
 3047 0080 3B69     	 ldr r3,[r7,#16]
 3048 0082 5A68     	 ldr r2,[r3,#4]
 3049 0084 3B69     	 ldr r3,[r7,#16]
 3050 0086 0833     	 adds r3,r3,#8
 3051 0088 9A42     	 cmp r2,r3
 3052 008a 04D1     	 bne .L163
2248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_IN();
 3053              	 .loc 1 2248 3 discriminator 3
 3054 008c 3B69     	 ldr r3,[r7,#16]
 3055 008e 5B68     	 ldr r3,[r3,#4]
 3056 0090 5A68     	 ldr r2,[r3,#4]
 3057 0092 3B69     	 ldr r3,[r7,#16]
ARM GAS   			page 100


 3058 0094 5A60     	 str r2,[r3,#4]
 3059              	.L163:
2248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		traceTASK_SWITCHED_IN();
 3060              	 .loc 1 2248 3 discriminator 5
 3061 0096 3B69     	 ldr r3,[r7,#16]
 3062 0098 5B68     	 ldr r3,[r3,#4]
 3063 009a DB68     	 ldr r3,[r3,#12]
 3064 009c 074A     	 ldr r2,.L165+16
 3065 009e 1360     	 str r3,[r2]
 3066              	.L164:
 3067              	.LBE144:
 3068              	.LBE139:
 3069              	.LBE138:
 3070              	.LBE145:
 3071              	 .loc 1 2259 1 is_stmt 1
 3072 00a0 00BF     	 nop
 3073 00a2 1C37     	 adds r7,r7,#28
 3074              	 .cfi_def_cfa_offset 4
 3075 00a4 BD46     	 mov sp,r7
 3076              	 .cfi_def_cfa_register 13
 3077              	 
 3078 00a6 5DF8047B 	 ldr r7,[sp],#4
 3079              	 .cfi_restore 7
 3080              	 .cfi_def_cfa_offset 0
 3081 00aa 7047     	 bx lr
 3082              	.L166:
 3083              	 .align 2
 3084              	.L165:
 3085 00ac 00000000 	 .word _ZL20uxSchedulerSuspended
 3086 00b0 00000000 	 .word _ZL13xYieldPending
 3087 00b4 00000000 	 .word _ZL18uxTopReadyPriority
 3088 00b8 00000000 	 .word _ZL17pxReadyTasksLists
 3089 00bc 00000000 	 .word pxCurrentTCB
 3090              	 .cfi_endproc
 3091              	.LFE29:
 3092              	 .cantunwind
 3093              	 .fnend
 3094              	 .size vTaskSwitchContext,.-vTaskSwitchContext
 3095              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 3096              	 .align 1
 3097              	 .global vTaskPlaceOnEventList
 3098              	 .syntax unified
 3099              	 .thumb
 3100              	 .thumb_func
 3101              	 .type vTaskPlaceOnEventList,%function
 3102              	vTaskPlaceOnEventList:
 3103              	 .fnstart
 3104              	.LFB30:
2260:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2261:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2262:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2263:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 3105              	 .loc 1 2263 1
 3106              	 .cfi_startproc
 3107              	 
 3108              	 
 3109 0000 80B5     	 push {r7,lr}
ARM GAS   			page 101


 3110              	 .save {r7,lr}
 3111              	 .cfi_def_cfa_offset 8
 3112              	 .cfi_offset 7,-8
 3113              	 .cfi_offset 14,-4
 3114              	 .pad #16
 3115 0002 84B0     	 sub sp,sp,#16
 3116              	 .cfi_def_cfa_offset 24
 3117              	 .setfp r7,sp,#0
 3118 0004 00AF     	 add r7,sp,#0
 3119              	 .cfi_def_cfa_register 7
 3120 0006 7860     	 str r0,[r7,#4]
 3121 0008 3960     	 str r1,[r7]
2264:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t xTimeToWake;
2265:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2266:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxEventList );
 3122              	 .loc 1 2266 2
 3123 000a 7B68     	 ldr r3,[r7,#4]
 3124 000c 002B     	 cmp r3,#0
 3125 000e 0AD1     	 bne .L168
 3126              	.LBB146:
 3127              	.LBB147:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3128              	 .loc 2 215 2
 3129              	 .syntax unified
 3130              	
 3131 0010 4FF01003 	 mov r3,#16
 3132 0014 83F31188 	 msr basepri,r3
 3133 0018 BFF36F8F 	 isb 
 3134 001c BFF34F8F 	 dsb 
 3135              	
 3136              	
 3137              	 .thumb
 3138              	 .syntax unified
 3139 0020 BB60     	 str r3,[r7,#8]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3140              	 .loc 2 223 1
 3141 0022 00BF     	 nop
 3142              	.L169:
 3143              	.LBE147:
 3144              	.LBE146:
 3145              	 .loc 1 2266 2 discriminator 1
 3146 0024 FEE7     	 b .L169
 3147              	.L168:
2267:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2268:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2269:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2270:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2271:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2272:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	This is placed in the list in priority order so the highest priority task
2273:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2274:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2275:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3148              	 .loc 1 2275 31
 3149 0026 1C4B     	 ldr r3,.L174
 3150 0028 1B68     	 ldr r3,[r3]
 3151              	 .loc 1 2275 13
 3152 002a 1833     	 adds r3,r3,#24
ARM GAS   			page 102


 3153 002c 1946     	 mov r1,r3
 3154 002e 7868     	 ldr r0,[r7,#4]
 3155 0030 FFF7FEFF 	 bl vListInsert
2276:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2277:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2278:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2279:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2280:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3156              	 .loc 1 2280 23
 3157 0034 184B     	 ldr r3,.L174
 3158 0036 1B68     	 ldr r3,[r3]
 3159              	 .loc 1 2280 18
 3160 0038 0433     	 adds r3,r3,#4
 3161 003a 1846     	 mov r0,r3
 3162 003c FFF7FEFF 	 bl uxListRemove
 3163 0040 0346     	 mov r3,r0
 3164              	 .loc 1 2280 58
 3165 0042 002B     	 cmp r3,#0
 3166 0044 0CBF     	 ite eq
 3167 0046 0123     	 moveq r3,#1
 3168 0048 0023     	 movne r3,#0
 3169 004a DBB2     	 uxtb r3,r3
 3170              	 .loc 1 2280 2
 3171 004c 002B     	 cmp r3,#0
 3172 004e 0BD0     	 beq .L170
2281:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2282:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2283:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		check, and the port reset macro can be called directly. */
2284:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3173              	 .loc 1 2284 3
 3174 0050 114B     	 ldr r3,.L174
 3175 0052 1B68     	 ldr r3,[r3]
 3176 0054 DB6A     	 ldr r3,[r3,#44]
 3177 0056 0122     	 movs r2,#1
 3178 0058 02FA03F3 	 lsl r3,r2,r3
 3179 005c DA43     	 mvns r2,r3
 3180 005e 0F4B     	 ldr r3,.L174+4
 3181 0060 1B68     	 ldr r3,[r3]
 3182 0062 1340     	 ands r3,r3,r2
 3183 0064 0D4A     	 ldr r2,.L174+4
 3184 0066 1360     	 str r3,[r2]
 3185              	.L170:
2285:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2286:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2287:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2288:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2289:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2290:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2291:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2292:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2293:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 3186              	 .loc 1 2293 3
 3187 0068 3B68     	 ldr r3,[r7]
 3188 006a B3F1FF3F 	 cmp r3,#-1
 3189 006e 07D1     	 bne .L171
2294:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2295:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
ARM GAS   			page 103


2296:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2297:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			block indefinitely. */
2298:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3190              	 .loc 1 2298 44
 3191 0070 094B     	 ldr r3,.L174
 3192 0072 1B68     	 ldr r3,[r3]
 3193              	 .loc 1 2298 18
 3194 0074 0433     	 adds r3,r3,#4
 3195 0076 1946     	 mov r1,r3
 3196 0078 0948     	 ldr r0,.L174+8
 3197 007a FFF7FEFF 	 bl vListInsertEnd
2299:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2300:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2301:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2302:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2303:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2304:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			scheduler will handle it. */
2305:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2306:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2307:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2308:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2309:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2310:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2311:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2312:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2313:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			will handle it. */
2314:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2315:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2316:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2317:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2318:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 3198              	 .loc 1 2318 1
 3199 007e 07E0     	 b .L173
 3200              	.L171:
2305:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3201              	 .loc 1 2305 18
 3202 0080 084B     	 ldr r3,.L174+12
 3203 0082 1B68     	 ldr r3,[r3]
2305:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3204              	 .loc 1 2305 16
 3205 0084 3A68     	 ldr r2,[r7]
 3206 0086 1344     	 add r3,r3,r2
 3207 0088 FB60     	 str r3,[r7,#12]
2306:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 3208              	 .loc 1 2306 34
 3209 008a F868     	 ldr r0,[r7,#12]
 3210 008c FFF7FEFF 	 bl _ZL30prvAddCurrentTaskToDelayedListm
 3211              	.L173:
 3212              	 .loc 1 2318 1
 3213 0090 00BF     	 nop
 3214 0092 1037     	 adds r7,r7,#16
 3215              	 .cfi_def_cfa_offset 8
 3216 0094 BD46     	 mov sp,r7
 3217              	 .cfi_def_cfa_register 13
 3218              	 
 3219 0096 80BD     	 pop {r7,pc}
 3220              	.L175:
ARM GAS   			page 104


 3221              	 .align 2
 3222              	.L174:
 3223 0098 00000000 	 .word pxCurrentTCB
 3224 009c 00000000 	 .word _ZL18uxTopReadyPriority
 3225 00a0 00000000 	 .word _ZL18xSuspendedTaskList
 3226 00a4 00000000 	 .word _ZL10xTickCount
 3227              	 .cfi_endproc
 3228              	.LFE30:
 3229              	 .fnend
 3230              	 .size vTaskPlaceOnEventList,.-vTaskPlaceOnEventList
 3231              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3232              	 .align 1
 3233              	 .global vTaskPlaceOnUnorderedEventList
 3234              	 .syntax unified
 3235              	 .thumb
 3236              	 .thumb_func
 3237              	 .type vTaskPlaceOnUnorderedEventList,%function
 3238              	vTaskPlaceOnUnorderedEventList:
 3239              	 .fnstart
 3240              	.LFB31:
2319:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2320:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2321:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2322:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 3241              	 .loc 1 2322 1
 3242              	 .cfi_startproc
 3243              	 
 3244              	 
 3245 0000 80B5     	 push {r7,lr}
 3246              	 .save {r7,lr}
 3247              	 .cfi_def_cfa_offset 8
 3248              	 .cfi_offset 7,-8
 3249              	 .cfi_offset 14,-4
 3250              	 .pad #32
 3251 0002 88B0     	 sub sp,sp,#32
 3252              	 .cfi_def_cfa_offset 40
 3253              	 .setfp r7,sp,#0
 3254 0004 00AF     	 add r7,sp,#0
 3255              	 .cfi_def_cfa_register 7
 3256 0006 F860     	 str r0,[r7,#12]
 3257 0008 B960     	 str r1,[r7,#8]
 3258 000a 7A60     	 str r2,[r7,#4]
2323:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t xTimeToWake;
2324:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2325:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxEventList );
 3259              	 .loc 1 2325 2
 3260 000c FB68     	 ldr r3,[r7,#12]
 3261 000e 002B     	 cmp r3,#0
 3262 0010 0AD1     	 bne .L177
 3263              	.LBB148:
 3264              	.LBB149:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3265              	 .loc 2 215 2
 3266              	 .syntax unified
 3267              	
 3268 0012 4FF01003 	 mov r3,#16
 3269 0016 83F31188 	 msr basepri,r3
ARM GAS   			page 105


 3270 001a BFF36F8F 	 isb 
 3271 001e BFF34F8F 	 dsb 
 3272              	
 3273              	
 3274              	 .thumb
 3275              	 .syntax unified
 3276 0022 BB61     	 str r3,[r7,#24]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3277              	 .loc 2 223 1
 3278 0024 00BF     	 nop
 3279              	.L178:
 3280              	.LBE149:
 3281              	.LBE148:
 3282              	 .loc 1 2325 2 discriminator 1
 3283 0026 FEE7     	 b .L178
 3284              	.L177:
2326:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2327:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2328:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	the event groups implementation. */
2329:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3285              	 .loc 1 2329 2
 3286 0028 294B     	 ldr r3,.L185
 3287 002a 1B68     	 ldr r3,[r3]
 3288 002c 002B     	 cmp r3,#0
 3289 002e 0CBF     	 ite eq
 3290 0030 0123     	 moveq r3,#1
 3291 0032 0023     	 movne r3,#0
 3292 0034 DBB2     	 uxtb r3,r3
 3293 0036 002B     	 cmp r3,#0
 3294 0038 0AD0     	 beq .L179
 3295              	.LBB150:
 3296              	.LBB151:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3297              	 .loc 2 215 2
 3298              	 .syntax unified
 3299              	
 3300 003a 4FF01003 	 mov r3,#16
 3301 003e 83F31188 	 msr basepri,r3
 3302 0042 BFF36F8F 	 isb 
 3303 0046 BFF34F8F 	 dsb 
 3304              	
 3305              	
 3306              	 .thumb
 3307              	 .syntax unified
 3308 004a 7B61     	 str r3,[r7,#20]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3309              	 .loc 2 223 1
 3310 004c 00BF     	 nop
 3311              	.L180:
 3312              	.LBE151:
 3313              	.LBE150:
 3314              	 .loc 1 2329 2 discriminator 2
 3315 004e FEE7     	 b .L180
 3316              	.L179:
2330:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2331:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2332:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	event list item here as interrupts won't access the event list item of a
ARM GAS   			page 106


2333:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	task that is not in the Blocked state. */
2334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3317              	 .loc 1 2334 2
 3318 0050 204B     	 ldr r3,.L185+4
 3319 0052 1B68     	 ldr r3,[r3]
 3320 0054 BA68     	 ldr r2,[r7,#8]
 3321 0056 42F00042 	 orr r2,r2,#-2147483648
 3322 005a 9A61     	 str r2,[r3,#24]
2335:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2336:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2337:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2338:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	event group implementation - and interrupts don't access event groups
2339:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2340:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	the task level). */
2341:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3323              	 .loc 1 2341 34
 3324 005c 1D4B     	 ldr r3,.L185+4
 3325 005e 1B68     	 ldr r3,[r3]
 3326              	 .loc 1 2341 16
 3327 0060 1833     	 adds r3,r3,#24
 3328 0062 1946     	 mov r1,r3
 3329 0064 F868     	 ldr r0,[r7,#12]
 3330 0066 FFF7FEFF 	 bl vListInsertEnd
2342:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2343:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2344:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2345:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	scheduler is locked. */
2346:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3331              	 .loc 1 2346 23
 3332 006a 1A4B     	 ldr r3,.L185+4
 3333 006c 1B68     	 ldr r3,[r3]
 3334              	 .loc 1 2346 18
 3335 006e 0433     	 adds r3,r3,#4
 3336 0070 1846     	 mov r0,r3
 3337 0072 FFF7FEFF 	 bl uxListRemove
 3338 0076 0346     	 mov r3,r0
 3339              	 .loc 1 2346 58
 3340 0078 002B     	 cmp r3,#0
 3341 007a 0CBF     	 ite eq
 3342 007c 0123     	 moveq r3,#1
 3343 007e 0023     	 movne r3,#0
 3344 0080 DBB2     	 uxtb r3,r3
 3345              	 .loc 1 2346 2
 3346 0082 002B     	 cmp r3,#0
 3347 0084 0BD0     	 beq .L181
2347:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2348:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2349:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		check, and the port reset macro can be called directly. */
2350:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3348              	 .loc 1 2350 3
 3349 0086 134B     	 ldr r3,.L185+4
 3350 0088 1B68     	 ldr r3,[r3]
 3351 008a DB6A     	 ldr r3,[r3,#44]
 3352 008c 0122     	 movs r2,#1
 3353 008e 02FA03F3 	 lsl r3,r2,r3
 3354 0092 DA43     	 mvns r2,r3
 3355 0094 104B     	 ldr r3,.L185+8
ARM GAS   			page 107


 3356 0096 1B68     	 ldr r3,[r3]
 3357 0098 1340     	 ands r3,r3,r2
 3358 009a 0F4A     	 ldr r2,.L185+8
 3359 009c 1360     	 str r3,[r2]
 3360              	.L181:
2351:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2352:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2353:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2354:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2355:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2356:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2357:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2358:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2359:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 3361              	 .loc 1 2359 3
 3362 009e 7B68     	 ldr r3,[r7,#4]
 3363 00a0 B3F1FF3F 	 cmp r3,#-1
 3364 00a4 07D1     	 bne .L182
2360:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2361:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2362:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2363:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			indefinitely. */
2364:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3365              	 .loc 1 2364 44
 3366 00a6 0B4B     	 ldr r3,.L185+4
 3367 00a8 1B68     	 ldr r3,[r3]
 3368              	 .loc 1 2364 18
 3369 00aa 0433     	 adds r3,r3,#4
 3370 00ac 1946     	 mov r1,r3
 3371 00ae 0B48     	 ldr r0,.L185+12
 3372 00b0 FFF7FEFF 	 bl vListInsertEnd
2365:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2366:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2367:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2368:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2369:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2370:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			kernel will manage it correctly. */
2371:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2372:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2373:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2374:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2375:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2376:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2377:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2378:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2379:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			will manage it correctly. */
2380:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2381:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2382:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2383:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2384:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 3373              	 .loc 1 2384 1
 3374 00b4 07E0     	 b .L184
 3375              	.L182:
2371:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3376              	 .loc 1 2371 18
 3377 00b6 0A4B     	 ldr r3,.L185+16
ARM GAS   			page 108


 3378 00b8 1B68     	 ldr r3,[r3]
2371:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3379              	 .loc 1 2371 16
 3380 00ba 7A68     	 ldr r2,[r7,#4]
 3381 00bc 1344     	 add r3,r3,r2
 3382 00be FB61     	 str r3,[r7,#28]
2372:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 3383              	 .loc 1 2372 34
 3384 00c0 F869     	 ldr r0,[r7,#28]
 3385 00c2 FFF7FEFF 	 bl _ZL30prvAddCurrentTaskToDelayedListm
 3386              	.L184:
 3387              	 .loc 1 2384 1
 3388 00c6 00BF     	 nop
 3389 00c8 2037     	 adds r7,r7,#32
 3390              	 .cfi_def_cfa_offset 8
 3391 00ca BD46     	 mov sp,r7
 3392              	 .cfi_def_cfa_register 13
 3393              	 
 3394 00cc 80BD     	 pop {r7,pc}
 3395              	.L186:
 3396 00ce 00BF     	 .align 2
 3397              	.L185:
 3398 00d0 00000000 	 .word _ZL20uxSchedulerSuspended
 3399 00d4 00000000 	 .word pxCurrentTCB
 3400 00d8 00000000 	 .word _ZL18uxTopReadyPriority
 3401 00dc 00000000 	 .word _ZL18xSuspendedTaskList
 3402 00e0 00000000 	 .word _ZL10xTickCount
 3403              	 .cfi_endproc
 3404              	.LFE31:
 3405              	 .fnend
 3406              	 .size vTaskPlaceOnUnorderedEventList,.-vTaskPlaceOnUnorderedEventList
 3407              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 3408              	 .align 1
 3409              	 .global xTaskRemoveFromEventList
 3410              	 .syntax unified
 3411              	 .thumb
 3412              	 .thumb_func
 3413              	 .type xTaskRemoveFromEventList,%function
 3414              	xTaskRemoveFromEventList:
 3415              	 .fnstart
 3416              	.LFB32:
2385:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2386:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2387:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if configUSE_TIMERS == 1
2388:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2389:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, c
2390:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2391:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TickType_t xTimeToWake;
2392:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2393:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( pxEventList );
2394:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2395:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* This function should not be called by application code hence the
2396:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2397:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2398:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		it should be called with the scheduler suspended. */
2399:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2400:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 109


2401:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2402:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		In this case it is assume that this is the only task that is going to
2403:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2404:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		can be used in place of vListInsert. */
2405:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2406:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2407:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2408:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		blocked list as the same list item is used for both lists.  This
2409:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		function is called with the scheduler locked so interrupts will not
2410:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		access the lists at the same time. */
2411:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2412:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2413:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2414:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			check, and the port reset macro can be called directly. */
2415:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2416:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2417:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2418:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2419:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2420:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2421:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2422:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If vTaskSuspend() is available then the suspended task list is also
2423:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		available and a task that is blocking indefinitely can enter the
2424:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		suspended state (it is not really suspended as it will re-enter the
2425:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		Ready state when the event it is waiting indefinitely for occurs).
2426:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		Blocking indefinitely is useful when using tickless idle mode as when
2427:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		all tasks are blocked indefinitely all timers can be turned off. */
2428:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if( INCLUDE_vTaskSuspend == 1 )
2429:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2430:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xWaitIndefinitely == pdTRUE )
2431:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2432:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Add the task to the suspended task list instead of a delayed
2433:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				task list to ensure the task is not woken by a timing event.  It
2434:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				will block indefinitely. */
2435:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2436:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2437:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
2438:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2439:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Calculate the time at which the task should be woken if the
2440:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				event does not occur.  This may overflow but this doesn't
2441:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				matter. */
2442:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xTimeToWake = xTickCount + xTicksToWait;
2443:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				traceTASK_DELAY_UNTIL();
2444:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
2445:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2446:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2447:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#else
2448:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2449:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2450:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			does not occur.  This may overflow but this doesn't matter. */
2451:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2452:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_DELAY_UNTIL();
2453:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2454:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2455:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
2456:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			defined. */
2457:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			( void ) xWaitIndefinitely;
ARM GAS   			page 110


2458:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2459:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif
2460:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2461:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2462:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TIMERS */
2463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2464:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2465:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2466:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 3417              	 .loc 1 2466 1
 3418              	 .cfi_startproc
 3419              	 
 3420              	 
 3421 0000 80B5     	 push {r7,lr}
 3422              	 .save {r7,lr}
 3423              	 .cfi_def_cfa_offset 8
 3424              	 .cfi_offset 7,-8
 3425              	 .cfi_offset 14,-4
 3426              	 .pad #24
 3427 0002 86B0     	 sub sp,sp,#24
 3428              	 .cfi_def_cfa_offset 32
 3429              	 .setfp r7,sp,#0
 3430 0004 00AF     	 add r7,sp,#0
 3431              	 .cfi_def_cfa_register 7
 3432 0006 7860     	 str r0,[r7,#4]
2467:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TCB_t *pxUnblockedTCB;
2468:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xReturn;
2469:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2470:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2471:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	called from a critical section within an ISR. */
2472:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2473:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2474:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2475:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	the delayed list, and add it to the ready list.
2476:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2477:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	If an event is for a queue that is locked then this function will never
2478:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2479:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	means exclusive access to the event list is guaranteed here.
2480:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2481:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	This function assumes that a check has already been made to ensure that
2482:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxEventList is not empty. */
2483:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3433              	 .loc 1 2483 31
 3434 0008 7B68     	 ldr r3,[r7,#4]
 3435 000a DB68     	 ldr r3,[r3,#12]
 3436              	 .loc 1 2483 17
 3437 000c DB68     	 ldr r3,[r3,#12]
 3438 000e 3B61     	 str r3,[r7,#16]
2484:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxUnblockedTCB );
 3439              	 .loc 1 2484 2
 3440 0010 3B69     	 ldr r3,[r7,#16]
 3441 0012 002B     	 cmp r3,#0
 3442 0014 0AD1     	 bne .L188
 3443              	.LBB152:
 3444              	.LBB153:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3445              	 .loc 2 215 2
ARM GAS   			page 111


 3446              	 .syntax unified
 3447              	
 3448 0016 4FF01003 	 mov r3,#16
 3449 001a 83F31188 	 msr basepri,r3
 3450 001e BFF36F8F 	 isb 
 3451 0022 BFF34F8F 	 dsb 
 3452              	
 3453              	
 3454              	 .thumb
 3455              	 .syntax unified
 3456 0026 FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3457              	 .loc 2 223 1
 3458 0028 00BF     	 nop
 3459              	.L189:
 3460              	.LBE153:
 3461              	.LBE152:
 3462              	 .loc 1 2484 2 discriminator 1
 3463 002a FEE7     	 b .L189
 3464              	.L188:
2485:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3465              	 .loc 1 2485 23
 3466 002c 3B69     	 ldr r3,[r7,#16]
 3467 002e 1833     	 adds r3,r3,#24
 3468 0030 1846     	 mov r0,r3
 3469 0032 FFF7FEFF 	 bl uxListRemove
2486:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2487:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3470              	 .loc 1 2487 27
 3471 0036 234B     	 ldr r3,.L195
 3472 0038 1B68     	 ldr r3,[r3]
 3473 003a 002B     	 cmp r3,#0
 3474 003c 0CBF     	 ite eq
 3475 003e 0123     	 moveq r3,#1
 3476 0040 0023     	 movne r3,#0
 3477 0042 DBB2     	 uxtb r3,r3
 3478              	 .loc 1 2487 2
 3479 0044 002B     	 cmp r3,#0
 3480 0046 1DD0     	 beq .L190
2488:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2489:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3481              	 .loc 1 2489 24
 3482 0048 3B69     	 ldr r3,[r7,#16]
 3483 004a 0433     	 adds r3,r3,#4
 3484 004c 1846     	 mov r0,r3
 3485 004e FFF7FEFF 	 bl uxListRemove
2490:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3486              	 .loc 1 2490 3
 3487 0052 1D4B     	 ldr r3,.L195+4
 3488 0054 1A68     	 ldr r2,[r3]
 3489 0056 3B69     	 ldr r3,[r7,#16]
 3490 0058 DB6A     	 ldr r3,[r3,#44]
 3491 005a 0121     	 movs r1,#1
 3492 005c 01FA03F3 	 lsl r3,r1,r3
 3493 0060 1343     	 orrs r3,r3,r2
 3494 0062 194A     	 ldr r2,.L195+4
 3495 0064 1360     	 str r3,[r2]
ARM GAS   			page 112


 3496 0066 3B69     	 ldr r3,[r7,#16]
 3497 0068 DA6A     	 ldr r2,[r3,#44]
 3498 006a 1346     	 mov r3,r2
 3499 006c 9B00     	 lsls r3,r3,#2
 3500 006e 1344     	 add r3,r3,r2
 3501 0070 9B00     	 lsls r3,r3,#2
 3502 0072 164A     	 ldr r2,.L195+8
 3503 0074 1A44     	 add r2,r2,r3
 3504 0076 3B69     	 ldr r3,[r7,#16]
 3505 0078 0433     	 adds r3,r3,#4
 3506 007a 1946     	 mov r1,r3
 3507 007c 1046     	 mov r0,r2
 3508 007e FFF7FEFF 	 bl vListInsertEnd
 3509 0082 05E0     	 b .L191
 3510              	.L190:
2491:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2492:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2493:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2494:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2495:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pending until the scheduler is resumed. */
2496:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3511              	 .loc 1 2496 17
 3512 0084 3B69     	 ldr r3,[r7,#16]
 3513 0086 1833     	 adds r3,r3,#24
 3514 0088 1946     	 mov r1,r3
 3515 008a 1148     	 ldr r0,.L195+12
 3516 008c FFF7FEFF 	 bl vListInsertEnd
 3517              	.L191:
2497:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2498:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2499:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3518              	 .loc 1 2499 22
 3519 0090 3B69     	 ldr r3,[r7,#16]
 3520 0092 DA6A     	 ldr r2,[r3,#44]
 3521              	 .loc 1 2499 35
 3522 0094 0F4B     	 ldr r3,.L195+16
 3523 0096 1B68     	 ldr r3,[r3]
 3524              	 .loc 1 2499 49
 3525 0098 DB6A     	 ldr r3,[r3,#44]
 3526              	 .loc 1 2499 33
 3527 009a 9A42     	 cmp r2,r3
 3528 009c 8CBF     	 ite hi
 3529 009e 0123     	 movhi r3,#1
 3530 00a0 0023     	 movls r3,#0
 3531 00a2 DBB2     	 uxtb r3,r3
 3532              	 .loc 1 2499 2
 3533 00a4 002B     	 cmp r3,#0
 3534 00a6 05D0     	 beq .L192
2500:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2501:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Return true if the task removed from the event list has a higher
2502:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2503:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		it should force a context switch now. */
2504:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = pdTRUE;
 3535              	 .loc 1 2504 11
 3536 00a8 0123     	 movs r3,#1
 3537 00aa 7B61     	 str r3,[r7,#20]
2505:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 113


2506:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2507:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2508:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xYieldPending = pdTRUE;
 3538              	 .loc 1 2508 17
 3539 00ac 0A4B     	 ldr r3,.L195+20
 3540 00ae 0122     	 movs r2,#1
 3541 00b0 1A60     	 str r2,[r3]
 3542 00b2 01E0     	 b .L193
 3543              	.L192:
2509:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2510:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2511:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2512:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = pdFALSE;
 3544              	 .loc 1 2512 11
 3545 00b4 0023     	 movs r3,#0
 3546 00b6 7B61     	 str r3,[r7,#20]
 3547              	.L193:
2513:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2514:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2515:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2516:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2517:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2518:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2519:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2520:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2521:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2522:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2523:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2524:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		ensure it is updated at the earliest possible time. */
2525:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		prvResetNextTaskUnblockTime();
2526:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2527:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
2528:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2529:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xReturn;
 3548              	 .loc 1 2529 9
 3549 00b8 7B69     	 ldr r3,[r7,#20]
2530:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 3550              	 .loc 1 2530 1
 3551 00ba 1846     	 mov r0,r3
 3552 00bc 1837     	 adds r7,r7,#24
 3553              	 .cfi_def_cfa_offset 8
 3554 00be BD46     	 mov sp,r7
 3555              	 .cfi_def_cfa_register 13
 3556              	 
 3557 00c0 80BD     	 pop {r7,pc}
 3558              	.L196:
 3559 00c2 00BF     	 .align 2
 3560              	.L195:
 3561 00c4 00000000 	 .word _ZL20uxSchedulerSuspended
 3562 00c8 00000000 	 .word _ZL18uxTopReadyPriority
 3563 00cc 00000000 	 .word _ZL17pxReadyTasksLists
 3564 00d0 00000000 	 .word _ZL17xPendingReadyList
 3565 00d4 00000000 	 .word pxCurrentTCB
 3566 00d8 00000000 	 .word _ZL13xYieldPending
 3567              	 .cfi_endproc
 3568              	.LFE32:
 3569              	 .fnend
ARM GAS   			page 114


 3570              	 .size xTaskRemoveFromEventList,.-xTaskRemoveFromEventList
 3571              	 .section .text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3572              	 .align 1
 3573              	 .global xTaskRemoveFromUnorderedEventList
 3574              	 .syntax unified
 3575              	 .thumb
 3576              	 .thumb_func
 3577              	 .type xTaskRemoveFromUnorderedEventList,%function
 3578              	xTaskRemoveFromUnorderedEventList:
 3579              	 .fnstart
 3580              	.LFB33:
2531:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2532:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2533:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2534:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 3581              	 .loc 1 2534 1
 3582              	 .cfi_startproc
 3583              	 
 3584              	 
 3585 0000 80B5     	 push {r7,lr}
 3586              	 .save {r7,lr}
 3587              	 .cfi_def_cfa_offset 8
 3588              	 .cfi_offset 7,-8
 3589              	 .cfi_offset 14,-4
 3590              	 .pad #24
 3591 0002 86B0     	 sub sp,sp,#24
 3592              	 .cfi_def_cfa_offset 32
 3593              	 .setfp r7,sp,#0
 3594 0004 00AF     	 add r7,sp,#0
 3595              	 .cfi_def_cfa_register 7
 3596 0006 7860     	 str r0,[r7,#4]
 3597 0008 3960     	 str r1,[r7]
2535:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TCB_t *pxUnblockedTCB;
2536:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xReturn;
2537:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2538:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2539:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	the event flags implementation. */
2540:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3598              	 .loc 1 2540 2
 3599 000a 314B     	 ldr r3,.L205
 3600 000c 1B68     	 ldr r3,[r3]
 3601 000e 002B     	 cmp r3,#0
 3602 0010 0CBF     	 ite eq
 3603 0012 0123     	 moveq r3,#1
 3604 0014 0023     	 movne r3,#0
 3605 0016 DBB2     	 uxtb r3,r3
 3606 0018 002B     	 cmp r3,#0
 3607 001a 0AD0     	 beq .L198
 3608              	.LBB154:
 3609              	.LBB155:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3610              	 .loc 2 215 2
 3611              	 .syntax unified
 3612              	
 3613 001c 4FF01003 	 mov r3,#16
 3614 0020 83F31188 	 msr basepri,r3
 3615 0024 BFF36F8F 	 isb 
ARM GAS   			page 115


 3616 0028 BFF34F8F 	 dsb 
 3617              	
 3618              	
 3619              	 .thumb
 3620              	 .syntax unified
 3621 002c FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3622              	 .loc 2 223 1
 3623 002e 00BF     	 nop
 3624              	.L199:
 3625              	.LBE155:
 3626              	.LBE154:
 3627              	 .loc 1 2540 2 discriminator 1
 3628 0030 FEE7     	 b .L199
 3629              	.L198:
2541:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2542:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Store the new item value in the event list. */
2543:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3630              	 .loc 1 2543 2
 3631 0032 3B68     	 ldr r3,[r7]
 3632 0034 43F00042 	 orr r2,r3,#-2147483648
 3633 0038 7B68     	 ldr r3,[r7,#4]
 3634 003a 1A60     	 str r2,[r3]
2544:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2545:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2546:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	event flags. */
2547:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3635              	 .loc 1 2547 17
 3636 003c 7B68     	 ldr r3,[r7,#4]
 3637 003e DB68     	 ldr r3,[r3,#12]
 3638 0040 3B61     	 str r3,[r7,#16]
2548:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxUnblockedTCB );
 3639              	 .loc 1 2548 2
 3640 0042 3B69     	 ldr r3,[r7,#16]
 3641 0044 002B     	 cmp r3,#0
 3642 0046 0AD1     	 bne .L200
 3643              	.LBB156:
 3644              	.LBB157:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3645              	 .loc 2 215 2
 3646              	 .syntax unified
 3647              	
 3648 0048 4FF01003 	 mov r3,#16
 3649 004c 83F31188 	 msr basepri,r3
 3650 0050 BFF36F8F 	 isb 
 3651 0054 BFF34F8F 	 dsb 
 3652              	
 3653              	
 3654              	 .thumb
 3655              	 .syntax unified
 3656 0058 BB60     	 str r3,[r7,#8]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3657              	 .loc 2 223 1
 3658 005a 00BF     	 nop
 3659              	.L201:
 3660              	.LBE157:
 3661              	.LBE156:
ARM GAS   			page 116


 3662              	 .loc 1 2548 2 discriminator 2
 3663 005c FEE7     	 b .L201
 3664              	.L200:
2549:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3665              	 .loc 1 2549 23
 3666 005e 7868     	 ldr r0,[r7,#4]
 3667 0060 FFF7FEFF 	 bl uxListRemove
2550:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2551:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2552:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2553:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	lists. */
2554:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3668              	 .loc 1 2554 23
 3669 0064 3B69     	 ldr r3,[r7,#16]
 3670 0066 0433     	 adds r3,r3,#4
 3671 0068 1846     	 mov r0,r3
 3672 006a FFF7FEFF 	 bl uxListRemove
2555:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3673              	 .loc 1 2555 2
 3674 006e 194B     	 ldr r3,.L205+4
 3675 0070 1A68     	 ldr r2,[r3]
 3676 0072 3B69     	 ldr r3,[r7,#16]
 3677 0074 DB6A     	 ldr r3,[r3,#44]
 3678 0076 0121     	 movs r1,#1
 3679 0078 01FA03F3 	 lsl r3,r1,r3
 3680 007c 1343     	 orrs r3,r3,r2
 3681 007e 154A     	 ldr r2,.L205+4
 3682 0080 1360     	 str r3,[r2]
 3683 0082 3B69     	 ldr r3,[r7,#16]
 3684 0084 DA6A     	 ldr r2,[r3,#44]
 3685 0086 1346     	 mov r3,r2
 3686 0088 9B00     	 lsls r3,r3,#2
 3687 008a 1344     	 add r3,r3,r2
 3688 008c 9B00     	 lsls r3,r3,#2
 3689 008e 124A     	 ldr r2,.L205+8
 3690 0090 1A44     	 add r2,r2,r3
 3691 0092 3B69     	 ldr r3,[r7,#16]
 3692 0094 0433     	 adds r3,r3,#4
 3693 0096 1946     	 mov r1,r3
 3694 0098 1046     	 mov r0,r2
 3695 009a FFF7FEFF 	 bl vListInsertEnd
2556:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2557:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3696              	 .loc 1 2557 22
 3697 009e 3B69     	 ldr r3,[r7,#16]
 3698 00a0 DA6A     	 ldr r2,[r3,#44]
 3699              	 .loc 1 2557 35
 3700 00a2 0E4B     	 ldr r3,.L205+12
 3701 00a4 1B68     	 ldr r3,[r3]
 3702              	 .loc 1 2557 49
 3703 00a6 DB6A     	 ldr r3,[r3,#44]
 3704              	 .loc 1 2557 33
 3705 00a8 9A42     	 cmp r2,r3
 3706 00aa 8CBF     	 ite hi
 3707 00ac 0123     	 movhi r3,#1
 3708 00ae 0023     	 movls r3,#0
 3709 00b0 DBB2     	 uxtb r3,r3
ARM GAS   			page 117


 3710              	 .loc 1 2557 2
 3711 00b2 002B     	 cmp r3,#0
 3712 00b4 05D0     	 beq .L202
2558:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2559:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Return true if the task removed from the event list has
2560:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		a higher priority than the calling task.  This allows
2561:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the calling task to know if it should force a context
2562:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		switch now. */
2563:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = pdTRUE;
 3713              	 .loc 1 2563 11
 3714 00b6 0123     	 movs r3,#1
 3715 00b8 7B61     	 str r3,[r7,#20]
2564:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2565:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2566:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2567:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xYieldPending = pdTRUE;
 3716              	 .loc 1 2567 17
 3717 00ba 094B     	 ldr r3,.L205+16
 3718 00bc 0122     	 movs r2,#1
 3719 00be 1A60     	 str r2,[r3]
 3720 00c0 01E0     	 b .L203
 3721              	.L202:
2568:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2569:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2570:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2571:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = pdFALSE;
 3722              	 .loc 1 2571 11
 3723 00c2 0023     	 movs r3,#0
 3724 00c4 7B61     	 str r3,[r7,#20]
 3725              	.L203:
2572:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2573:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2574:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xReturn;
 3726              	 .loc 1 2574 9
 3727 00c6 7B69     	 ldr r3,[r7,#20]
2575:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 3728              	 .loc 1 2575 1
 3729 00c8 1846     	 mov r0,r3
 3730 00ca 1837     	 adds r7,r7,#24
 3731              	 .cfi_def_cfa_offset 8
 3732 00cc BD46     	 mov sp,r7
 3733              	 .cfi_def_cfa_register 13
 3734              	 
 3735 00ce 80BD     	 pop {r7,pc}
 3736              	.L206:
 3737              	 .align 2
 3738              	.L205:
 3739 00d0 00000000 	 .word _ZL20uxSchedulerSuspended
 3740 00d4 00000000 	 .word _ZL18uxTopReadyPriority
 3741 00d8 00000000 	 .word _ZL17pxReadyTasksLists
 3742 00dc 00000000 	 .word pxCurrentTCB
 3743 00e0 00000000 	 .word _ZL13xYieldPending
 3744              	 .cfi_endproc
 3745              	.LFE33:
 3746              	 .fnend
 3747              	 .size xTaskRemoveFromUnorderedEventList,.-xTaskRemoveFromUnorderedEventList
 3748              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
ARM GAS   			page 118


 3749              	 .align 1
 3750              	 .global vTaskSetTimeOutState
 3751              	 .syntax unified
 3752              	 .thumb
 3753              	 .thumb_func
 3754              	 .type vTaskSetTimeOutState,%function
 3755              	vTaskSetTimeOutState:
 3756              	 .fnstart
 3757              	.LFB34:
2576:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2577:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2578:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2579:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 3758              	 .loc 1 2579 1
 3759              	 .cfi_startproc
 3760              	 
 3761              	 
 3762              	 
 3763 0000 80B4     	 push {r7}
 3764              	 .cfi_def_cfa_offset 4
 3765              	 .cfi_offset 7,-4
 3766 0002 85B0     	 sub sp,sp,#20
 3767              	 .cfi_def_cfa_offset 24
 3768 0004 00AF     	 add r7,sp,#0
 3769              	 .cfi_def_cfa_register 7
 3770 0006 7860     	 str r0,[r7,#4]
2580:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxTimeOut );
 3771              	 .loc 1 2580 2
 3772 0008 7B68     	 ldr r3,[r7,#4]
 3773 000a 002B     	 cmp r3,#0
 3774 000c 0AD1     	 bne .L208
 3775              	.LBB158:
 3776              	.LBB159:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3777              	 .loc 2 215 2
 3778              	 .syntax unified
 3779              	
 3780 000e 4FF01003 	 mov r3,#16
 3781 0012 83F31188 	 msr basepri,r3
 3782 0016 BFF36F8F 	 isb 
 3783 001a BFF34F8F 	 dsb 
 3784              	
 3785              	
 3786              	 .thumb
 3787              	 .syntax unified
 3788 001e FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3789              	 .loc 2 223 1
 3790 0020 00BF     	 nop
 3791              	.L209:
 3792              	.LBE159:
 3793              	.LBE158:
 3794              	 .loc 1 2580 2 discriminator 1
 3795 0022 FEE7     	 b .L209
 3796              	.L208:
2581:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3797              	 .loc 1 2581 28
ARM GAS   			page 119


 3798 0024 064B     	 ldr r3,.L210
 3799 0026 1A68     	 ldr r2,[r3]
 3800 0028 7B68     	 ldr r3,[r7,#4]
 3801 002a 1A60     	 str r2,[r3]
2582:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3802              	 .loc 1 2582 29
 3803 002c 054B     	 ldr r3,.L210+4
 3804 002e 1A68     	 ldr r2,[r3]
 3805 0030 7B68     	 ldr r3,[r7,#4]
 3806 0032 5A60     	 str r2,[r3,#4]
2583:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 3807              	 .loc 1 2583 1
 3808 0034 00BF     	 nop
 3809 0036 1437     	 adds r7,r7,#20
 3810              	 .cfi_def_cfa_offset 4
 3811 0038 BD46     	 mov sp,r7
 3812              	 .cfi_def_cfa_register 13
 3813              	 
 3814 003a 5DF8047B 	 ldr r7,[sp],#4
 3815              	 .cfi_restore 7
 3816              	 .cfi_def_cfa_offset 0
 3817 003e 7047     	 bx lr
 3818              	.L211:
 3819              	 .align 2
 3820              	.L210:
 3821 0040 00000000 	 .word _ZL15xNumOfOverflows
 3822 0044 00000000 	 .word _ZL10xTickCount
 3823              	 .cfi_endproc
 3824              	.LFE34:
 3825              	 .cantunwind
 3826              	 .fnend
 3827              	 .size vTaskSetTimeOutState,.-vTaskSetTimeOutState
 3828              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 3829              	 .align 1
 3830              	 .global xTaskCheckForTimeOut
 3831              	 .syntax unified
 3832              	 .thumb
 3833              	 .thumb_func
 3834              	 .type xTaskCheckForTimeOut,%function
 3835              	xTaskCheckForTimeOut:
 3836              	 .fnstart
 3837              	.LFB35:
2584:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2585:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2586:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
2587:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 3838              	 .loc 1 2587 1
 3839              	 .cfi_startproc
 3840              	 
 3841              	 
 3842 0000 80B5     	 push {r7,lr}
 3843              	 .save {r7,lr}
 3844              	 .cfi_def_cfa_offset 8
 3845              	 .cfi_offset 7,-8
 3846              	 .cfi_offset 14,-4
 3847              	 .pad #24
 3848 0002 86B0     	 sub sp,sp,#24
ARM GAS   			page 120


 3849              	 .cfi_def_cfa_offset 32
 3850              	 .setfp r7,sp,#0
 3851 0004 00AF     	 add r7,sp,#0
 3852              	 .cfi_def_cfa_register 7
 3853 0006 7860     	 str r0,[r7,#4]
 3854 0008 3960     	 str r1,[r7]
2588:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** BaseType_t xReturn;
2589:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2590:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxTimeOut );
 3855              	 .loc 1 2590 2
 3856 000a 7B68     	 ldr r3,[r7,#4]
 3857 000c 002B     	 cmp r3,#0
 3858 000e 0AD1     	 bne .L213
 3859              	.LBB160:
 3860              	.LBB161:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3861              	 .loc 2 215 2
 3862              	 .syntax unified
 3863              	
 3864 0010 4FF01003 	 mov r3,#16
 3865 0014 83F31188 	 msr basepri,r3
 3866 0018 BFF36F8F 	 isb 
 3867 001c BFF34F8F 	 dsb 
 3868              	
 3869              	
 3870              	 .thumb
 3871              	 .syntax unified
 3872 0020 FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3873              	 .loc 2 223 1
 3874 0022 00BF     	 nop
 3875              	.L214:
 3876              	.LBE161:
 3877              	.LBE160:
 3878              	 .loc 1 2590 2 discriminator 1
 3879 0024 FEE7     	 b .L214
 3880              	.L213:
2591:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	configASSERT( pxTicksToWait );
 3881              	 .loc 1 2591 2
 3882 0026 3B68     	 ldr r3,[r7]
 3883 0028 002B     	 cmp r3,#0
 3884 002a 0AD1     	 bne .L215
 3885              	.LBB162:
 3886              	.LBB163:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 3887              	 .loc 2 215 2
 3888              	 .syntax unified
 3889              	
 3890 002c 4FF01003 	 mov r3,#16
 3891 0030 83F31188 	 msr basepri,r3
 3892 0034 BFF36F8F 	 isb 
 3893 0038 BFF34F8F 	 dsb 
 3894              	
 3895              	
 3896              	 .thumb
 3897              	 .syntax unified
 3898 003c BB60     	 str r3,[r7,#8]
ARM GAS   			page 121


 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 3899              	 .loc 2 223 1
 3900 003e 00BF     	 nop
 3901              	.L216:
 3902              	.LBE163:
 3903              	.LBE162:
 3904              	 .loc 1 2591 2 discriminator 2
 3905 0040 FEE7     	 b .L216
 3906              	.L215:
2592:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2593:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	taskENTER_CRITICAL();
 3907              	 .loc 1 2593 2
 3908 0042 FFF7FEFF 	 bl vPortEnterCritical
 3909              	.LBB164:
2594:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2595:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2596:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3910              	 .loc 1 2596 38
 3911 0046 1F4B     	 ldr r3,.L224
 3912 0048 1B68     	 ldr r3,[r3]
 3913 004a 3B61     	 str r3,[r7,#16]
2597:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2598:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2599:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2600:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			the maximum block time then the task should block indefinitely, and
2601:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			therefore never time out. */
2602:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3914              	 .loc 1 2602 8
 3915 004c 3B68     	 ldr r3,[r7]
 3916 004e 1B68     	 ldr r3,[r3]
 3917              	 .loc 1 2602 4
 3918 0050 B3F1FF3F 	 cmp r3,#-1
 3919 0054 02D1     	 bne .L217
2603:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2604:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xReturn = pdFALSE;
 3920              	 .loc 1 2604 13
 3921 0056 0023     	 movs r3,#0
 3922 0058 7B61     	 str r3,[r7,#20]
 3923 005a 2BE0     	 b .L218
 3924              	.L217:
2605:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2606:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2607:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif
2608:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2609:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3925              	 .loc 1 2609 39
 3926 005c 7B68     	 ldr r3,[r7,#4]
 3927 005e 1A68     	 ldr r2,[r3]
 3928              	 .loc 1 2609 9
 3929 0060 194B     	 ldr r3,.L224+4
 3930 0062 1B68     	 ldr r3,[r3]
 3931              	 .loc 1 2609 56
 3932 0064 9A42     	 cmp r2,r3
 3933 0066 06D0     	 beq .L219
 3934              	 .loc 1 2609 91 discriminator 1
 3935 0068 7B68     	 ldr r3,[r7,#4]
 3936 006a 5B68     	 ldr r3,[r3,#4]
ARM GAS   			page 122


 3937              	 .loc 1 2609 56 discriminator 1
 3938 006c 3A69     	 ldr r2,[r7,#16]
 3939 006e 9A42     	 cmp r2,r3
 3940 0070 01D3     	 bcc .L219
 3941              	 .loc 1 2609 56 is_stmt 0 discriminator 3
 3942 0072 0123     	 movs r3,#1
 3943 0074 00E0     	 b .L220
 3944              	.L219:
 3945              	 .loc 1 2609 56 discriminator 4
 3946 0076 0023     	 movs r3,#0
 3947              	.L220:
 3948              	 .loc 1 2609 3 is_stmt 1 discriminator 6
 3949 0078 002B     	 cmp r3,#0
 3950 007a 02D0     	 beq .L221
2610:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2611:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2612:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2613:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2614:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			passed since vTaskSetTimeout() was called. */
2615:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = pdTRUE;
 3951              	 .loc 1 2615 12
 3952 007c 0123     	 movs r3,#1
 3953 007e 7B61     	 str r3,[r7,#20]
 3954 0080 18E0     	 b .L218
 3955              	.L221:
2616:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2617:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 3956              	 .loc 1 2617 43
 3957 0082 7B68     	 ldr r3,[r7,#4]
 3958 0084 5B68     	 ldr r3,[r3,#4]
 3959              	 .loc 1 2617 30
 3960 0086 3A69     	 ldr r2,[r7,#16]
 3961 0088 D21A     	 subs r2,r2,r3
 3962              	 .loc 1 2617 63
 3963 008a 3B68     	 ldr r3,[r7]
 3964 008c 1B68     	 ldr r3,[r3]
 3965              	 .loc 1 2617 8
 3966 008e 9A42     	 cmp r2,r3
 3967 0090 0ED2     	 bcs .L222
2618:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2619:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2620:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 3968              	 .loc 1 2620 19
 3969 0092 3B68     	 ldr r3,[r7]
 3970 0094 1A68     	 ldr r2,[r3]
 3971              	 .loc 1 2620 54
 3972 0096 7B68     	 ldr r3,[r7,#4]
 3973 0098 5968     	 ldr r1,[r3,#4]
 3974              	 .loc 1 2620 19
 3975 009a 3B69     	 ldr r3,[r7,#16]
 3976 009c CB1A     	 subs r3,r1,r3
 3977 009e 1A44     	 add r2,r2,r3
 3978 00a0 3B68     	 ldr r3,[r7]
 3979 00a2 1A60     	 str r2,[r3]
2621:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3980              	 .loc 1 2621 24
 3981 00a4 7868     	 ldr r0,[r7,#4]
ARM GAS   			page 123


 3982 00a6 FFF7FEFF 	 bl vTaskSetTimeOutState
2622:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = pdFALSE;
 3983              	 .loc 1 2622 12
 3984 00aa 0023     	 movs r3,#0
 3985 00ac 7B61     	 str r3,[r7,#20]
 3986 00ae 01E0     	 b .L218
 3987              	.L222:
2623:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2624:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2625:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2626:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = pdTRUE;
 3988              	 .loc 1 2626 12
 3989 00b0 0123     	 movs r3,#1
 3990 00b2 7B61     	 str r3,[r7,#20]
 3991              	.L218:
 3992              	.LBE164:
2627:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2628:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2629:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	taskEXIT_CRITICAL();
 3993              	 .loc 1 2629 2
 3994 00b4 FFF7FEFF 	 bl vPortExitCritical
2630:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2631:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return xReturn;
 3995              	 .loc 1 2631 9
 3996 00b8 7B69     	 ldr r3,[r7,#20]
2632:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 3997              	 .loc 1 2632 1
 3998 00ba 1846     	 mov r0,r3
 3999 00bc 1837     	 adds r7,r7,#24
 4000              	 .cfi_def_cfa_offset 8
 4001 00be BD46     	 mov sp,r7
 4002              	 .cfi_def_cfa_register 13
 4003              	 
 4004 00c0 80BD     	 pop {r7,pc}
 4005              	.L225:
 4006 00c2 00BF     	 .align 2
 4007              	.L224:
 4008 00c4 00000000 	 .word _ZL10xTickCount
 4009 00c8 00000000 	 .word _ZL15xNumOfOverflows
 4010              	 .cfi_endproc
 4011              	.LFE35:
 4012              	 .fnend
 4013              	 .size xTaskCheckForTimeOut,.-xTaskCheckForTimeOut
 4014              	 .section .text.vTaskMissedYield,"ax",%progbits
 4015              	 .align 1
 4016              	 .global vTaskMissedYield
 4017              	 .syntax unified
 4018              	 .thumb
 4019              	 .thumb_func
 4020              	 .type vTaskMissedYield,%function
 4021              	vTaskMissedYield:
 4022              	 .fnstart
 4023              	.LFB36:
2633:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2634:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2635:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** void vTaskMissedYield( void )
2636:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
ARM GAS   			page 124


 4024              	 .loc 1 2636 1
 4025              	 .cfi_startproc
 4026              	 
 4027              	 
 4028              	 
 4029 0000 80B4     	 push {r7}
 4030              	 .cfi_def_cfa_offset 4
 4031              	 .cfi_offset 7,-4
 4032 0002 00AF     	 add r7,sp,#0
 4033              	 .cfi_def_cfa_register 7
2637:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	xYieldPending = pdTRUE;
 4034              	 .loc 1 2637 16
 4035 0004 034B     	 ldr r3,.L227
 4036 0006 0122     	 movs r2,#1
 4037 0008 1A60     	 str r2,[r3]
2638:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 4038              	 .loc 1 2638 1
 4039 000a 00BF     	 nop
 4040 000c BD46     	 mov sp,r7
 4041              	 .cfi_def_cfa_register 13
 4042              	 
 4043 000e 5DF8047B 	 ldr r7,[sp],#4
 4044              	 .cfi_restore 7
 4045              	 .cfi_def_cfa_offset 0
 4046 0012 7047     	 bx lr
 4047              	.L228:
 4048              	 .align 2
 4049              	.L227:
 4050 0014 00000000 	 .word _ZL13xYieldPending
 4051              	 .cfi_endproc
 4052              	.LFE36:
 4053              	 .cantunwind
 4054              	 .fnend
 4055              	 .size vTaskMissedYield,.-vTaskMissedYield
 4056              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 4057              	 .align 1
 4058              	 .global uxTaskGetTaskNumber
 4059              	 .syntax unified
 4060              	 .thumb
 4061              	 .thumb_func
 4062              	 .type uxTaskGetTaskNumber,%function
 4063              	uxTaskGetTaskNumber:
 4064              	 .fnstart
 4065              	.LFB37:
2639:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2640:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2641:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2642:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2643:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2644:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 4066              	 .loc 1 2644 2
 4067              	 .cfi_startproc
 4068              	 
 4069              	 
 4070              	 
 4071 0000 80B4     	 push {r7}
 4072              	 .cfi_def_cfa_offset 4
ARM GAS   			page 125


 4073              	 .cfi_offset 7,-4
 4074 0002 85B0     	 sub sp,sp,#20
 4075              	 .cfi_def_cfa_offset 24
 4076 0004 00AF     	 add r7,sp,#0
 4077              	 .cfi_def_cfa_register 7
 4078 0006 7860     	 str r0,[r7,#4]
2645:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxReturn;
2646:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
2647:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2648:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTask != NULL )
 4079              	 .loc 1 2648 3
 4080 0008 7B68     	 ldr r3,[r7,#4]
 4081 000a 002B     	 cmp r3,#0
 4082 000c 05D0     	 beq .L230
2649:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2650:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4083              	 .loc 1 2650 10
 4084 000e 7B68     	 ldr r3,[r7,#4]
 4085 0010 BB60     	 str r3,[r7,#8]
2651:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4086              	 .loc 1 2651 13
 4087 0012 BB68     	 ldr r3,[r7,#8]
 4088 0014 9B6C     	 ldr r3,[r3,#72]
 4089 0016 FB60     	 str r3,[r7,#12]
 4090 0018 01E0     	 b .L231
 4091              	.L230:
2652:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2653:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2654:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2655:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxReturn = 0U;
 4092              	 .loc 1 2655 13
 4093 001a 0023     	 movs r3,#0
 4094 001c FB60     	 str r3,[r7,#12]
 4095              	.L231:
2656:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2657:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2658:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return uxReturn;
 4096              	 .loc 1 2658 10
 4097 001e FB68     	 ldr r3,[r7,#12]
2659:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 4098              	 .loc 1 2659 2
 4099 0020 1846     	 mov r0,r3
 4100 0022 1437     	 adds r7,r7,#20
 4101              	 .cfi_def_cfa_offset 4
 4102 0024 BD46     	 mov sp,r7
 4103              	 .cfi_def_cfa_register 13
 4104              	 
 4105 0026 5DF8047B 	 ldr r7,[sp],#4
 4106              	 .cfi_restore 7
 4107              	 .cfi_def_cfa_offset 0
 4108 002a 7047     	 bx lr
 4109              	 .cfi_endproc
 4110              	.LFE37:
 4111              	 .cantunwind
 4112              	 .fnend
 4113              	 .size uxTaskGetTaskNumber,.-uxTaskGetTaskNumber
 4114              	 .section .text.vTaskSetTaskNumber,"ax",%progbits
ARM GAS   			page 126


 4115              	 .align 1
 4116              	 .global vTaskSetTaskNumber
 4117              	 .syntax unified
 4118              	 .thumb
 4119              	 .thumb_func
 4120              	 .type vTaskSetTaskNumber,%function
 4121              	vTaskSetTaskNumber:
 4122              	 .fnstart
 4123              	.LFB38:
2660:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2661:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2662:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2663:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2664:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2665:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2666:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
2667:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 4124              	 .loc 1 2667 2
 4125              	 .cfi_startproc
 4126              	 
 4127              	 
 4128              	 
 4129 0000 80B4     	 push {r7}
 4130              	 .cfi_def_cfa_offset 4
 4131              	 .cfi_offset 7,-4
 4132 0002 85B0     	 sub sp,sp,#20
 4133              	 .cfi_def_cfa_offset 24
 4134 0004 00AF     	 add r7,sp,#0
 4135              	 .cfi_def_cfa_register 7
 4136 0006 7860     	 str r0,[r7,#4]
 4137 0008 3960     	 str r1,[r7]
2668:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
2669:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2670:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTask != NULL )
 4138              	 .loc 1 2670 3
 4139 000a 7B68     	 ldr r3,[r7,#4]
 4140 000c 002B     	 cmp r3,#0
 4141 000e 04D0     	 beq .L235
2671:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2672:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 4142              	 .loc 1 2672 10
 4143 0010 7B68     	 ldr r3,[r7,#4]
 4144 0012 FB60     	 str r3,[r7,#12]
2673:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4145              	 .loc 1 2673 24
 4146 0014 FB68     	 ldr r3,[r7,#12]
 4147 0016 3A68     	 ldr r2,[r7]
 4148 0018 9A64     	 str r2,[r3,#72]
 4149              	.L235:
2674:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2675:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 4150              	 .loc 1 2675 2
 4151 001a 00BF     	 nop
 4152 001c 1437     	 adds r7,r7,#20
 4153              	 .cfi_def_cfa_offset 4
 4154 001e BD46     	 mov sp,r7
 4155              	 .cfi_def_cfa_register 13
ARM GAS   			page 127


 4156              	 
 4157 0020 5DF8047B 	 ldr r7,[sp],#4
 4158              	 .cfi_restore 7
 4159              	 .cfi_def_cfa_offset 0
 4160 0024 7047     	 bx lr
 4161              	 .cfi_endproc
 4162              	.LFE38:
 4163              	 .cantunwind
 4164              	 .fnend
 4165              	 .size vTaskSetTaskNumber,.-vTaskSetTaskNumber
 4166              	 .section .text._ZL11prvIdleTaskPv,"ax",%progbits
 4167              	 .align 1
 4168              	 .syntax unified
 4169              	 .thumb
 4170              	 .thumb_func
 4171              	 .type _ZL11prvIdleTaskPv,%function
 4172              	_ZL11prvIdleTaskPv:
 4173              	 .fnstart
 4174              	.LFB39:
2676:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2677:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2678:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2679:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*
2680:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * -----------------------------------------------------------
2681:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * The Idle task.
2682:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * ----------------------------------------------------------
2683:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
2684:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2685:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2686:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
2687:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  * void prvIdleTask( void *pvParameters );
2688:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  *
2689:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****  */
2690:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2691:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 4175              	 .loc 1 2691 1
 4176              	 .cfi_startproc
 4177              	 
 4178              	 
 4179 0000 80B5     	 push {r7,lr}
 4180              	 .cfi_def_cfa_offset 8
 4181              	 .cfi_offset 7,-8
 4182              	 .cfi_offset 14,-4
 4183 0002 82B0     	 sub sp,sp,#8
 4184              	 .cfi_def_cfa_offset 16
 4185 0004 00AF     	 add r7,sp,#0
 4186              	 .cfi_def_cfa_register 7
 4187 0006 7860     	 str r0,[r7,#4]
 4188              	.L238:
2692:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Stop warnings. */
2693:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	( void ) pvParameters;
2694:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2695:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	for( ;; )
2696:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2697:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* See if any tasks have been deleted. */
2698:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		prvCheckTasksWaitingTermination();
 4189              	 .loc 1 2698 34
ARM GAS   			page 128


 4190 0008 FFF7FEFF 	 bl _ZL31prvCheckTasksWaitingTerminationv
2699:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2700:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2701:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2702:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2703:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			see if any other task has become available.  If we are using
2704:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			preemption we don't need to do this as any task becoming available
2705:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			will automatically get the processor anyway. */
2706:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			taskYIELD();
2707:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2708:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configUSE_PREEMPTION */
2709:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2710:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2711:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2712:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* When using preemption tasks of equal priority will be
2713:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2714:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			to run then the idle task should yield before the end of the
2715:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			timeslice.
2716:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2717:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			A critical region is not required here as we are just reading from
2718:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2719:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			the ready list at the idle priority contains more than one task
2720:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			then a task other than the idle task is ready to execute. */
2721:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4191              	 .loc 1 2721 8
 4192 000c 064B     	 ldr r3,.L239
 4193 000e 1B68     	 ldr r3,[r3]
 4194              	 .loc 1 2721 4
 4195 0010 012B     	 cmp r3,#1
 4196 0012 F9D9     	 bls .L238
2722:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2723:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskYIELD();
 4197              	 .loc 1 2723 5
 4198 0014 054B     	 ldr r3,.L239+4
 4199 0016 4FF08052 	 mov r2,#268435456
 4200 001a 1A60     	 str r2,[r3]
 4201              	 .syntax unified
 4202              	
 4203 001c BFF34F8F 	 dsb
 4204              	
 4205              	
 4206 0020 BFF36F8F 	 isb
 4207              	
2698:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 4208              	 .loc 1 2698 34
 4209              	 .thumb
 4210              	 .syntax unified
 4211 0024 F0E7     	 b .L238
 4212              	.L240:
 4213 0026 00BF     	 .align 2
 4214              	.L239:
 4215 0028 00000000 	 .word _ZL17pxReadyTasksLists
 4216 002c 04ED00E0 	 .word -536810236
 4217              	 .cfi_endproc
 4218              	.LFE39:
 4219              	 .cantunwind
 4220              	 .fnend
ARM GAS   			page 129


 4221              	 .size _ZL11prvIdleTaskPv,.-_ZL11prvIdleTaskPv
 4222              	 .section .text._ZL25prvInitialiseTCBVariablesP19tskTaskControlBlockPKcmPK14xMEMORY_REGIONt,"ax",%progbits
 4223              	 .align 1
 4224              	 .syntax unified
 4225              	 .thumb
 4226              	 .thumb_func
 4227              	 .type _ZL25prvInitialiseTCBVariablesP19tskTaskControlBlockPKcmPK14xMEMORY_REGIONt,%function
 4228              	_ZL25prvInitialiseTCBVariablesP19tskTaskControlBlockPKcmPK14xMEMORY_REGIONt:
 4229              	 .fnstart
 4230              	.LFB40:
2724:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2725:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
2726:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2727:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2728:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2729:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2730:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2731:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2732:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2733:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2734:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			extern void vApplicationIdleHook( void );
2735:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2736:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Call the user defined function from within the idle task.  This
2737:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			allows the application designer to add background functionality
2738:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			without the overhead of a separate task.
2739:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2740:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2741:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vApplicationIdleHook();
2742:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2743:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2744:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2745:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2746:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2747:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		user defined low power mode	implementations require
2748:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2749:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2750:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2751:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		TickType_t xExpectedIdleTime;
2752:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2753:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2754:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2755:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			test of the expected idle time is performed without the
2756:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			scheduler suspended.  The result here is not necessarily
2757:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			valid. */
2758:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2759:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2760:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2761:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2762:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				vTaskSuspendAll();
2763:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
2764:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2765:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					time can be sampled again, and this time its value can
2766:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					be used. */
2767:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2768:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2769:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2770:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
ARM GAS   			page 130


2771:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
2772:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2773:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2774:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						traceLOW_POWER_IDLE_END();
2775:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
2776:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
2777:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
2778:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2779:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
2780:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
2781:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				( void ) xTaskResumeAll();
2782:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2783:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
2784:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2785:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2786:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2787:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2788:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2789:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2790:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
2791:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2792:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2793:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
2794:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2795:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2796:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2797:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* The idle task exists in addition to the application tasks. */
2798:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
2799:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2800:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2801:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2802:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2803:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2804:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			eReturn = eAbortSleep;
2805:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2806:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else if( xYieldPending != pdFALSE )
2807:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2808:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2809:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			eReturn = eAbortSleep;
2810:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2811:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2812:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2813:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
2814:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			have an infinite block time rather than actually being suspended)
2815:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			then it is safe to turn all clocks off and just wait for external
2816:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			interrupts. */
2817:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
2818:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2819:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
2820:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2821:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
2822:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
2823:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2824:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
2825:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2826:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2827:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return eReturn;
ARM GAS   			page 131


2828:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2829:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2830:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2831:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2832:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2833:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
2834:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 4231              	 .loc 1 2834 1
 4232              	 .cfi_startproc
 4233              	 
 4234              	 
 4235 0000 80B5     	 push {r7,lr}
 4236              	 .save {r7,lr}
 4237              	 .cfi_def_cfa_offset 8
 4238              	 .cfi_offset 7,-8
 4239              	 .cfi_offset 14,-4
 4240              	 .pad #24
 4241 0002 86B0     	 sub sp,sp,#24
 4242              	 .cfi_def_cfa_offset 32
 4243              	 .setfp r7,sp,#0
 4244 0004 00AF     	 add r7,sp,#0
 4245              	 .cfi_def_cfa_register 7
 4246 0006 F860     	 str r0,[r7,#12]
 4247 0008 B960     	 str r1,[r7,#8]
 4248 000a 7A60     	 str r2,[r7,#4]
 4249 000c 3B60     	 str r3,[r7]
2835:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** UBaseType_t x;
2836:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2837:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Store the task name in the TCB. */
2838:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 4250              	 .loc 1 2838 9
 4251 000e 0023     	 movs r3,#0
 4252 0010 7B61     	 str r3,[r7,#20]
 4253              	.L244:
 4254              	 .loc 1 2838 32 discriminator 1
 4255 0012 7B69     	 ldr r3,[r7,#20]
 4256 0014 0F2B     	 cmp r3,#15
 4257 0016 14D8     	 bhi .L242
2839:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2840:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 4258              	 .loc 1 2840 38
 4259 0018 BA68     	 ldr r2,[r7,#8]
 4260 001a 7B69     	 ldr r3,[r7,#20]
 4261 001c 1344     	 add r3,r3,r2
 4262 001e 1978     	 ldrb r1,[r3]
 4263              	 .loc 1 2840 26
 4264 0020 FA68     	 ldr r2,[r7,#12]
 4265 0022 7B69     	 ldr r3,[r7,#20]
 4266 0024 1344     	 add r3,r3,r2
 4267 0026 3433     	 adds r3,r3,#52
 4268 0028 0A46     	 mov r2,r1
 4269 002a 1A70     	 strb r2,[r3]
2841:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2842:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2843:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2844:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		string is not accessible (extremely unlikely). */
2845:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pcName[ x ] == 0x00 )
ARM GAS   			page 132


 4270              	 .loc 1 2845 17
 4271 002c BA68     	 ldr r2,[r7,#8]
 4272 002e 7B69     	 ldr r3,[r7,#20]
 4273 0030 1344     	 add r3,r3,r2
 4274 0032 1B78     	 ldrb r3,[r3]
 4275              	 .loc 1 2845 3
 4276 0034 002B     	 cmp r3,#0
 4277 0036 03D0     	 beq .L246
2838:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 4278              	 .loc 1 2838 2 discriminator 2
 4279 0038 7B69     	 ldr r3,[r7,#20]
 4280 003a 0133     	 adds r3,r3,#1
 4281 003c 7B61     	 str r3,[r7,#20]
 4282 003e E8E7     	 b .L244
 4283              	.L246:
2846:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2847:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			break;
 4284              	 .loc 1 2847 4
 4285 0040 00BF     	 nop
 4286              	.L242:
2848:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2849:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2850:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2851:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2852:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2853:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2854:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2855:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2856:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2857:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 4287              	 .loc 1 2857 51
 4288 0042 FB68     	 ldr r3,[r7,#12]
 4289 0044 0022     	 movs r2,#0
 4290 0046 83F84320 	 strb r2,[r3,#67]
2858:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2859:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2860:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	remove the privilege bit if one is present. */
2861:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 4291              	 .loc 1 2861 2
 4292 004a 7B68     	 ldr r3,[r7,#4]
 4293 004c 062B     	 cmp r3,#6
 4294 004e 01D9     	 bls .L245
2862:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2863:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 4295              	 .loc 1 2863 14
 4296 0050 0623     	 movs r3,#6
 4297 0052 7B60     	 str r3,[r7,#4]
 4298              	.L245:
2864:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2865:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
2866:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2867:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2868:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2869:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2870:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxTCB->uxPriority = uxPriority;
 4299              	 .loc 1 2870 20
 4300 0054 FB68     	 ldr r3,[r7,#12]
ARM GAS   			page 133


 4301 0056 7A68     	 ldr r2,[r7,#4]
 4302 0058 DA62     	 str r2,[r3,#44]
2871:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2872:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2873:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 4303              	 .loc 1 2873 25
 4304 005a FB68     	 ldr r3,[r7,#12]
 4305 005c 7A68     	 ldr r2,[r7,#4]
 4306 005e DA64     	 str r2,[r3,#76]
2874:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 4307              	 .loc 1 2874 24
 4308 0060 FB68     	 ldr r3,[r7,#12]
 4309 0062 0022     	 movs r2,#0
 4310 0064 1A65     	 str r2,[r3,#80]
2875:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2876:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* configUSE_MUTEXES */
2877:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2878:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 4311              	 .loc 1 2878 21
 4312 0066 FB68     	 ldr r3,[r7,#12]
 4313 0068 0433     	 adds r3,r3,#4
 4314 006a 1846     	 mov r0,r3
 4315 006c FFF7FEFF 	 bl vListInitialiseItem
2879:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 4316              	 .loc 1 2879 21
 4317 0070 FB68     	 ldr r3,[r7,#12]
 4318 0072 1833     	 adds r3,r3,#24
 4319 0074 1846     	 mov r0,r3
 4320 0076 FFF7FEFF 	 bl vListInitialiseItem
2880:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2881:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2882:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2883:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 4321              	 .loc 1 2883 2
 4322 007a FB68     	 ldr r3,[r7,#12]
 4323 007c FA68     	 ldr r2,[r7,#12]
 4324 007e 1A61     	 str r2,[r3,#16]
2884:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2885:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Event lists are always in priority order. */
2886:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickT
 4325              	 .loc 1 2886 2
 4326 0080 7B68     	 ldr r3,[r7,#4]
 4327 0082 C3F10702 	 rsb r2,r3,#7
 4328 0086 FB68     	 ldr r3,[r7,#12]
 4329 0088 9A61     	 str r2,[r3,#24]
2887:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 4330              	 .loc 1 2887 2
 4331 008a FB68     	 ldr r3,[r7,#12]
 4332 008c FA68     	 ldr r2,[r7,#12]
 4333 008e 5A62     	 str r2,[r3,#36]
2888:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2889:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2890:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2891:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
2892:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2893:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2894:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 134


2895:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2896:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2897:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->pxTaskTag = NULL;
2898:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2899:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2900:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2901:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2902:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2903:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2904:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2905:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2906:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2907:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2908:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2909:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2910:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2911:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2912:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2913:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		( void ) xRegions;
2914:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		( void ) usStackDepth;
2915:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2916:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2917:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2918:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2919:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2920:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
2921:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2922:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
2923:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2924:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2925:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
2926:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2927:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
2928:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2929:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->ulNotifiedValue = 0;
 4334              	 .loc 1 2929 26
 4335 0090 FB68     	 ldr r3,[r7,#12]
 4336 0092 0022     	 movs r2,#0
 4337 0094 5A65     	 str r2,[r3,#84]
2930:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
 4338              	 .loc 1 2930 23
 4339 0096 FB68     	 ldr r3,[r7,#12]
 4340 0098 0022     	 movs r2,#0
 4341 009a 83F85820 	 strb r2,[r3,#88]
2931:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2932:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif
2933:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2934:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2935:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2936:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2937:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2938:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2939:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2940:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 4342              	 .loc 1 2940 1
 4343 009e 00BF     	 nop
 4344 00a0 1837     	 adds r7,r7,#24
ARM GAS   			page 135


 4345              	 .cfi_def_cfa_offset 8
 4346 00a2 BD46     	 mov sp,r7
 4347              	 .cfi_def_cfa_register 13
 4348              	 
 4349 00a4 80BD     	 pop {r7,pc}
 4350              	 .cfi_endproc
 4351              	.LFE40:
 4352              	 .fnend
 4353              	 .size _ZL25prvInitialiseTCBVariablesP19tskTaskControlBlockPKcmPK14xMEMORY_REGIONt,.-_ZL25prvInitialiseTCBVariablesP19tskTaskControlBlockPKcmPK14xMEMORY_REGIONt
 4354              	 .section .text._ZL22prvInitialiseTaskListsv,"ax",%progbits
 4355              	 .align 1
 4356              	 .syntax unified
 4357              	 .thumb
 4358              	 .thumb_func
 4359              	 .type _ZL22prvInitialiseTaskListsv,%function
 4360              	_ZL22prvInitialiseTaskListsv:
 4361              	 .fnstart
 4362              	.LFB41:
2941:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2942:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2943:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2944:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2945:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
2946:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2947:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
2948:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2949:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2950:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2951:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
2952:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
2953:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2954:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2955:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2956:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2957:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2958:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2959:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2960:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2961:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
2962:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2963:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void *pvReturn = NULL;
2964:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
2965:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2966:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2967:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2968:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2969:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
2970:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2971:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
2972:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
2973:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pvReturn = NULL;
2974:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
2975:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2976:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return pvReturn;
2977:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2978:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2979:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
ARM GAS   			page 136


2980:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2981:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2982:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2983:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2984:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2985:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
2986:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
2987:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2988:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
2989:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the calling task. */
2990:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2991:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2992:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2993:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
2994:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2995:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2996:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
2997:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
2998:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvInitialiseTaskLists( void )
2999:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 4363              	 .loc 1 2999 1
 4364              	 .cfi_startproc
 4365              	 
 4366              	 
 4367 0000 80B5     	 push {r7,lr}
 4368              	 .save {r7,lr}
 4369              	 .cfi_def_cfa_offset 8
 4370              	 .cfi_offset 7,-8
 4371              	 .cfi_offset 14,-4
 4372              	 .pad #8
 4373 0002 82B0     	 sub sp,sp,#8
 4374              	 .cfi_def_cfa_offset 16
 4375              	 .setfp r7,sp,#0
 4376 0004 00AF     	 add r7,sp,#0
 4377              	 .cfi_def_cfa_register 7
3000:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** UBaseType_t uxPriority;
3001:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3002:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4378              	 .loc 1 3002 18
 4379 0006 0023     	 movs r3,#0
 4380 0008 7B60     	 str r3,[r7,#4]
 4381              	.L249:
 4382              	 .loc 1 3002 51 discriminator 3
 4383 000a 7B68     	 ldr r3,[r7,#4]
 4384 000c 062B     	 cmp r3,#6
 4385 000e 0DD8     	 bhi .L248
3003:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3004:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4386              	 .loc 1 3004 18 discriminator 2
 4387 0010 7A68     	 ldr r2,[r7,#4]
 4388 0012 1346     	 mov r3,r2
 4389 0014 9B00     	 lsls r3,r3,#2
 4390 0016 1344     	 add r3,r3,r2
 4391 0018 9B00     	 lsls r3,r3,#2
 4392 001a 0F4A     	 ldr r2,.L250
 4393 001c 1344     	 add r3,r3,r2
 4394 001e 1846     	 mov r0,r3
ARM GAS   			page 137


 4395 0020 FFF7FEFF 	 bl vListInitialise
3002:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 4396              	 .loc 1 3002 2 discriminator 2
 4397 0024 7B68     	 ldr r3,[r7,#4]
 4398 0026 0133     	 adds r3,r3,#1
 4399 0028 7B60     	 str r3,[r7,#4]
 4400 002a EEE7     	 b .L249
 4401              	.L248:
3005:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3006:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3007:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4402              	 .loc 1 3007 17
 4403 002c 0B48     	 ldr r0,.L250+4
 4404 002e FFF7FEFF 	 bl vListInitialise
3008:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4405              	 .loc 1 3008 17
 4406 0032 0B48     	 ldr r0,.L250+8
 4407 0034 FFF7FEFF 	 bl vListInitialise
3009:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	vListInitialise( &xPendingReadyList );
 4408              	 .loc 1 3009 17
 4409 0038 0A48     	 ldr r0,.L250+12
 4410 003a FFF7FEFF 	 bl vListInitialise
3010:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3011:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3012:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3013:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3014:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3015:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3016:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3017:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3018:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3019:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4411              	 .loc 1 3019 18
 4412 003e 0A48     	 ldr r0,.L250+16
 4413 0040 FFF7FEFF 	 bl vListInitialise
3020:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3021:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3022:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3023:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3024:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	using list2. */
3025:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4414              	 .loc 1 3025 20
 4415 0044 094B     	 ldr r3,.L250+20
 4416 0046 054A     	 ldr r2,.L250+4
 4417 0048 1A60     	 str r2,[r3]
3026:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4418              	 .loc 1 3026 28
 4419 004a 094B     	 ldr r3,.L250+24
 4420 004c 044A     	 ldr r2,.L250+8
 4421 004e 1A60     	 str r2,[r3]
3027:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 4422              	 .loc 1 3027 1
 4423 0050 00BF     	 nop
 4424 0052 0837     	 adds r7,r7,#8
 4425              	 .cfi_def_cfa_offset 8
 4426 0054 BD46     	 mov sp,r7
 4427              	 .cfi_def_cfa_register 13
ARM GAS   			page 138


 4428              	 
 4429 0056 80BD     	 pop {r7,pc}
 4430              	.L251:
 4431              	 .align 2
 4432              	.L250:
 4433 0058 00000000 	 .word _ZL17pxReadyTasksLists
 4434 005c 00000000 	 .word _ZL17xDelayedTaskList1
 4435 0060 00000000 	 .word _ZL17xDelayedTaskList2
 4436 0064 00000000 	 .word _ZL17xPendingReadyList
 4437 0068 00000000 	 .word _ZL18xSuspendedTaskList
 4438 006c 00000000 	 .word _ZL17pxDelayedTaskList
 4439 0070 00000000 	 .word _ZL25pxOverflowDelayedTaskList
 4440              	 .cfi_endproc
 4441              	.LFE41:
 4442              	 .fnend
 4443              	 .size _ZL22prvInitialiseTaskListsv,.-_ZL22prvInitialiseTaskListsv
 4444              	 .section .text._ZL31prvCheckTasksWaitingTerminationv,"ax",%progbits
 4445              	 .align 1
 4446              	 .syntax unified
 4447              	 .thumb
 4448              	 .thumb_func
 4449              	 .type _ZL31prvCheckTasksWaitingTerminationv,%function
 4450              	_ZL31prvCheckTasksWaitingTerminationv:
 4451              	 .fnstart
 4452              	.LFB42:
3028:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3029:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3030:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvCheckTasksWaitingTermination( void )
3031:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 4453              	 .loc 1 3031 1
 4454              	 .cfi_startproc
 4455              	 
 4456              	 
 4457              	 
 4458 0000 80B4     	 push {r7}
 4459              	 .cfi_def_cfa_offset 4
 4460              	 .cfi_offset 7,-4
 4461 0002 00AF     	 add r7,sp,#0
 4462              	 .cfi_def_cfa_register 7
3032:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3033:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3034:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		BaseType_t xListIsEmpty;
3035:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3036:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3037:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		too often in the idle task. */
3038:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
3039:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3040:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vTaskSuspendAll();
3041:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3042:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3043:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3044:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			( void ) xTaskResumeAll();
3045:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3046:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( xListIsEmpty == pdFALSE )
3047:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3048:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				TCB_t *pxTCB;
3049:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 139


3050:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskENTER_CRITICAL();
3051:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3052:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3053:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
3054:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					--uxCurrentNumberOfTasks;
3055:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					--uxTasksDeleted;
3056:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3057:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				taskEXIT_CRITICAL();
3058:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3059:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				prvDeleteTCB( pxTCB );
3060:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3061:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3062:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3063:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3064:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3065:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3066:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3067:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* vTaskDelete */
3068:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 4463              	 .loc 1 3068 1
 4464 0004 00BF     	 nop
 4465 0006 BD46     	 mov sp,r7
 4466              	 .cfi_def_cfa_register 13
 4467              	 
 4468 0008 5DF8047B 	 ldr r7,[sp],#4
 4469              	 .cfi_restore 7
 4470              	 .cfi_def_cfa_offset 0
 4471 000c 7047     	 bx lr
 4472              	 .cfi_endproc
 4473              	.LFE42:
 4474              	 .cantunwind
 4475              	 .fnend
 4476              	 .size _ZL31prvCheckTasksWaitingTerminationv,.-_ZL31prvCheckTasksWaitingTerminationv
 4477              	 .section .text._ZL30prvAddCurrentTaskToDelayedListm,"ax",%progbits
 4478              	 .align 1
 4479              	 .syntax unified
 4480              	 .thumb
 4481              	 .thumb_func
 4482              	 .type _ZL30prvAddCurrentTaskToDelayedListm,%function
 4483              	_ZL30prvAddCurrentTaskToDelayedListm:
 4484              	 .fnstart
 4485              	.LFB43:
3069:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3070:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3071:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
3072:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 4486              	 .loc 1 3072 1
 4487              	 .cfi_startproc
 4488              	 
 4489              	 
 4490 0000 80B5     	 push {r7,lr}
 4491              	 .save {r7,lr}
 4492              	 .cfi_def_cfa_offset 8
 4493              	 .cfi_offset 7,-8
 4494              	 .cfi_offset 14,-4
 4495              	 .pad #8
 4496 0002 82B0     	 sub sp,sp,#8
ARM GAS   			page 140


 4497              	 .cfi_def_cfa_offset 16
 4498              	 .setfp r7,sp,#0
 4499 0004 00AF     	 add r7,sp,#0
 4500              	 .cfi_def_cfa_register 7
 4501 0006 7860     	 str r0,[r7,#4]
3073:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* The list item will be inserted in wake time order. */
3074:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 4502              	 .loc 1 3074 2
 4503 0008 184B     	 ldr r3,.L257
 4504 000a 1B68     	 ldr r3,[r3]
 4505 000c 7A68     	 ldr r2,[r7,#4]
 4506 000e 5A60     	 str r2,[r3,#4]
3075:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3076:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( xTimeToWake < xTickCount )
 4507              	 .loc 1 3076 20
 4508 0010 174B     	 ldr r3,.L257+4
 4509 0012 1B68     	 ldr r3,[r3]
 4510              	 .loc 1 3076 18
 4511 0014 7A68     	 ldr r2,[r7,#4]
 4512 0016 9A42     	 cmp r2,r3
 4513 0018 34BF     	 ite cc
 4514 001a 0123     	 movcc r3,#1
 4515 001c 0023     	 movcs r3,#0
 4516 001e DBB2     	 uxtb r3,r3
 4517              	 .loc 1 3076 2
 4518 0020 002B     	 cmp r3,#0
 4519 0022 09D0     	 beq .L254
3077:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3078:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
3079:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4520              	 .loc 1 3079 14
 4521 0024 134B     	 ldr r3,.L257+8
 4522 0026 1A68     	 ldr r2,[r3]
 4523              	 .loc 1 3079 46
 4524 0028 104B     	 ldr r3,.L257
 4525 002a 1B68     	 ldr r3,[r3]
 4526              	 .loc 1 3079 14
 4527 002c 0433     	 adds r3,r3,#4
 4528 002e 1946     	 mov r1,r3
 4529 0030 1046     	 mov r0,r2
 4530 0032 FFF7FEFF 	 bl vListInsert
3080:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3081:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
3082:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3083:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
3084:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3085:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3086:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
3087:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
3088:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		too. */
3089:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
3090:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3091:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
3092:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3093:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3094:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3095:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS   			page 141


3096:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3097:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3098:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 4531              	 .loc 1 3098 1
 4532 0036 15E0     	 b .L256
 4533              	.L254:
3084:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 4534              	 .loc 1 3084 14
 4535 0038 0F4B     	 ldr r3,.L257+12
 4536 003a 1A68     	 ldr r2,[r3]
3084:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 4537              	 .loc 1 3084 38
 4538 003c 0B4B     	 ldr r3,.L257
 4539 003e 1B68     	 ldr r3,[r3]
3084:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
 4540              	 .loc 1 3084 14
 4541 0040 0433     	 adds r3,r3,#4
 4542 0042 1946     	 mov r1,r3
 4543 0044 1046     	 mov r0,r2
 4544 0046 FFF7FEFF 	 bl vListInsert
3089:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 4545              	 .loc 1 3089 21
 4546 004a 0C4B     	 ldr r3,.L257+16
 4547 004c 1B68     	 ldr r3,[r3]
3089:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 4548              	 .loc 1 3089 19
 4549 004e 7A68     	 ldr r2,[r7,#4]
 4550 0050 9A42     	 cmp r2,r3
 4551 0052 34BF     	 ite cc
 4552 0054 0123     	 movcc r3,#1
 4553 0056 0023     	 movcs r3,#0
 4554 0058 DBB2     	 uxtb r3,r3
3089:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 4555              	 .loc 1 3089 3
 4556 005a 002B     	 cmp r3,#0
 4557 005c 02D0     	 beq .L256
3091:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
 4558              	 .loc 1 3091 25
 4559 005e 074A     	 ldr r2,.L257+16
 4560 0060 7B68     	 ldr r3,[r7,#4]
 4561 0062 1360     	 str r3,[r2]
 4562              	.L256:
 4563              	 .loc 1 3098 1
 4564 0064 00BF     	 nop
 4565 0066 0837     	 adds r7,r7,#8
 4566              	 .cfi_def_cfa_offset 8
 4567 0068 BD46     	 mov sp,r7
 4568              	 .cfi_def_cfa_register 13
 4569              	 
 4570 006a 80BD     	 pop {r7,pc}
 4571              	.L258:
 4572              	 .align 2
 4573              	.L257:
 4574 006c 00000000 	 .word pxCurrentTCB
 4575 0070 00000000 	 .word _ZL10xTickCount
 4576 0074 00000000 	 .word _ZL25pxOverflowDelayedTaskList
 4577 0078 00000000 	 .word _ZL17pxDelayedTaskList
ARM GAS   			page 142


 4578 007c 00000000 	 .word _ZL20xNextTaskUnblockTime
 4579              	 .cfi_endproc
 4580              	.LFE43:
 4581              	 .fnend
 4582              	 .size _ZL30prvAddCurrentTaskToDelayedListm,.-_ZL30prvAddCurrentTaskToDelayedListm
 4583              	 .section .text._ZL22prvAllocateTCBAndStacktPm,"ax",%progbits
 4584              	 .align 1
 4585              	 .syntax unified
 4586              	 .thumb
 4587              	 .thumb_func
 4588              	 .type _ZL22prvAllocateTCBAndStacktPm,%function
 4589              	_ZL22prvAllocateTCBAndStacktPm:
 4590              	 .fnstart
 4591              	.LFB44:
3099:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3100:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3101:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
3102:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 4592              	 .loc 1 3102 1
 4593              	 .cfi_startproc
 4594              	 
 4595              	 
 4596 0000 80B5     	 push {r7,lr}
 4597              	 .save {r7,lr}
 4598              	 .cfi_def_cfa_offset 8
 4599              	 .cfi_offset 7,-8
 4600              	 .cfi_offset 14,-4
 4601              	 .pad #16
 4602 0002 84B0     	 sub sp,sp,#16
 4603              	 .cfi_def_cfa_offset 24
 4604              	 .setfp r7,sp,#0
 4605 0004 00AF     	 add r7,sp,#0
 4606              	 .cfi_def_cfa_register 7
 4607 0006 0346     	 mov r3,r0
 4608 0008 3960     	 str r1,[r7]
 4609 000a FB80     	 strh r3,[r7,#6]
 4610              	.LBB165:
3103:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TCB_t *pxNewTCB;
3104:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3105:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* If the stack grows down then allocate the stack then the TCB so the stack
3106:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	does not grow into the TCB.  Likewise if the stack grows up then allocate
3107:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	the TCB then the stack. */
3108:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#if( portSTACK_GROWTH > 0 )
3109:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3110:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Allocate space for the TCB.  Where the memory comes from depends on
3111:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the implementation of the port malloc function. */
3112:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3113:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3114:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxNewTCB != NULL )
3115:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3116:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Allocate space for the stack used by the task being created.
3117:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			The base of the stack memory stored in the TCB so the task can
3118:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			be deleted later if required. */
3119:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeo
3120:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3121:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxNewTCB->pxStack == NULL )
3122:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
ARM GAS   			page 143


3123:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Could not allocate the stack.  Delete the allocated TCB. */
3124:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				vPortFree( pxNewTCB );
3125:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxNewTCB = NULL;
3126:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3127:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3128:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3129:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#else /* portSTACK_GROWTH */
3130:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3131:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	StackType_t *pxStack;
3132:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3133:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Allocate space for the stack used by the task being created. */
3134:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackTyp
 4611              	 .loc 1 3134 13
 4612 000c 3B68     	 ldr r3,[r7]
 4613 000e 002B     	 cmp r3,#0
 4614 0010 06D1     	 bne .L260
 4615              	 .loc 1 3134 31 discriminator 1
 4616 0012 FB88     	 ldrh r3,[r7,#6]
 4617 0014 9B00     	 lsls r3,r3,#2
 4618 0016 1846     	 mov r0,r3
 4619 0018 FFF7FEFF 	 bl pvPortMalloc
 4620 001c 0346     	 mov r3,r0
 4621 001e 00E0     	 b .L261
 4622              	.L260:
 4623              	 .loc 1 3134 13 discriminator 2
 4624 0020 3B68     	 ldr r3,[r7]
 4625              	.L261:
 4626              	 .loc 1 3134 11 discriminator 4
 4627 0022 BB60     	 str r3,[r7,#8]
3135:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3136:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxStack != NULL )
 4628              	 .loc 1 3136 3 discriminator 4
 4629 0024 BB68     	 ldr r3,[r7,#8]
 4630 0026 002B     	 cmp r3,#0
 4631 0028 0FD0     	 beq .L262
3137:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3138:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
3139:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			on the implementation of the port malloc function. */
3140:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 4632              	 .loc 1 3140 39
 4633 002a 5C20     	 movs r0,#92
 4634 002c FFF7FEFF 	 bl pvPortMalloc
 4635 0030 0346     	 mov r3,r0
 4636 0032 FB60     	 str r3,[r7,#12]
3141:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3142:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxNewTCB != NULL )
 4637              	 .loc 1 3142 4
 4638 0034 FB68     	 ldr r3,[r7,#12]
 4639 0036 002B     	 cmp r3,#0
 4640 0038 03D0     	 beq .L263
3143:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3144:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Store the stack location in the TCB. */
3145:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxNewTCB->pxStack = pxStack;
 4641              	 .loc 1 3145 23
 4642 003a FB68     	 ldr r3,[r7,#12]
 4643 003c BA68     	 ldr r2,[r7,#8]
 4644 003e 1A63     	 str r2,[r3,#48]
ARM GAS   			page 144


 4645 0040 05E0     	 b .L264
 4646              	.L263:
3146:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3147:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3148:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3149:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The stack cannot be used as the TCB was not created.  Free it
3150:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				again. */
3151:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				vPortFree( pxStack );
 4647              	 .loc 1 3151 14
 4648 0042 B868     	 ldr r0,[r7,#8]
 4649 0044 FFF7FEFF 	 bl vPortFree
 4650 0048 01E0     	 b .L264
 4651              	.L262:
3152:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3153:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3154:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3155:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3156:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxNewTCB = NULL;
 4652              	 .loc 1 3156 13
 4653 004a 0023     	 movs r3,#0
 4654 004c FB60     	 str r3,[r7,#12]
 4655              	.L264:
 4656              	.LBE165:
3157:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3158:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3159:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	#endif /* portSTACK_GROWTH */
3160:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3161:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( pxNewTCB != NULL )
 4657              	 .loc 1 3161 2
 4658 004e FB68     	 ldr r3,[r7,#12]
 4659 0050 002B     	 cmp r3,#0
 4660 0052 07D0     	 beq .L265
3162:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3163:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Avoid dependency on memset() if it is not required. */
3164:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxT
3165:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3166:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Just to help debugging. */
3167:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
 4661              	 .loc 1 3167 31
 4662 0054 FB68     	 ldr r3,[r7,#12]
 4663 0056 186B     	 ldr r0,[r3,#48]
 4664              	 .loc 1 3167 68
 4665 0058 FB88     	 ldrh r3,[r7,#6]
 4666              	 .loc 1 3167 19
 4667 005a 9B00     	 lsls r3,r3,#2
 4668 005c 1A46     	 mov r2,r3
 4669 005e A521     	 movs r1,#165
 4670 0060 FFF7FEFF 	 bl memset
 4671              	.L265:
3168:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3169:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( IN
3170:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3171:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3172:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return pxNewTCB;
 4672              	 .loc 1 3172 9
 4673 0064 FB68     	 ldr r3,[r7,#12]
3173:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
ARM GAS   			page 145


 4674              	 .loc 1 3173 1
 4675 0066 1846     	 mov r0,r3
 4676 0068 1037     	 adds r7,r7,#16
 4677              	 .cfi_def_cfa_offset 8
 4678 006a BD46     	 mov sp,r7
 4679              	 .cfi_def_cfa_register 13
 4680              	 
 4681 006c 80BD     	 pop {r7,pc}
 4682              	 .cfi_endproc
 4683              	.LFE44:
 4684              	 .fnend
 4685              	 .size _ZL22prvAllocateTCBAndStacktPm,.-_ZL22prvAllocateTCBAndStacktPm
 4686              	 .section .text._ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState,"ax",%progbits
 4687              	 .align 1
 4688              	 .syntax unified
 4689              	 .thumb
 4690              	 .thumb_func
 4691              	 .type _ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState,%function
 4692              	_ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState:
 4693              	 .fnstart
 4694              	.LFB45:
3174:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3175:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3176:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3177:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3178:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
3179:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 4695              	 .loc 1 3179 2
 4696              	 .cfi_startproc
 4697              	 
 4698              	 
 4699 0000 90B5     	 push {r4,r7,lr}
 4700              	 .cfi_def_cfa_offset 12
 4701              	 .cfi_offset 4,-12
 4702              	 .cfi_offset 7,-8
 4703              	 .cfi_offset 14,-4
 4704 0002 8BB0     	 sub sp,sp,#44
 4705              	 .cfi_def_cfa_offset 56
 4706 0004 00AF     	 add r7,sp,#0
 4707              	 .cfi_def_cfa_register 7
 4708 0006 F860     	 str r0,[r7,#12]
 4709 0008 B960     	 str r1,[r7,#8]
 4710 000a 1346     	 mov r3,r2
 4711 000c FB71     	 strb r3,[r7,#7]
3180:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3181:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTask = 0;
 4712              	 .loc 1 3181 14
 4713 000e 0023     	 movs r3,#0
 4714 0010 7B62     	 str r3,[r7,#36]
 4715              	.LBB166:
3182:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3183:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 4716              	 .loc 1 3183 7
 4717 0012 BB68     	 ldr r3,[r7,#8]
 4718 0014 1B68     	 ldr r3,[r3]
 4719              	 .loc 1 3183 3
 4720 0016 002B     	 cmp r3,#0
ARM GAS   			page 146


 4721 0018 7ED0     	 beq .L268
 4722              	.LBB167:
 4723              	.LBB168:
3184:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3185:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4724              	 .loc 1 3185 4
 4725 001a BB68     	 ldr r3,[r7,#8]
 4726 001c 3B62     	 str r3,[r7,#32]
 4727 001e 3B6A     	 ldr r3,[r7,#32]
 4728 0020 5B68     	 ldr r3,[r3,#4]
 4729 0022 5A68     	 ldr r2,[r3,#4]
 4730 0024 3B6A     	 ldr r3,[r7,#32]
 4731 0026 5A60     	 str r2,[r3,#4]
 4732 0028 3B6A     	 ldr r3,[r7,#32]
 4733 002a 5A68     	 ldr r2,[r3,#4]
 4734 002c 3B6A     	 ldr r3,[r7,#32]
 4735 002e 0833     	 adds r3,r3,#8
 4736 0030 9A42     	 cmp r2,r3
 4737 0032 04D1     	 bne .L269
 4738              	 .loc 1 3185 4 is_stmt 0 discriminator 1
 4739 0034 3B6A     	 ldr r3,[r7,#32]
 4740 0036 5B68     	 ldr r3,[r3,#4]
 4741 0038 5A68     	 ldr r2,[r3,#4]
 4742 003a 3B6A     	 ldr r3,[r7,#32]
 4743 003c 5A60     	 str r2,[r3,#4]
 4744              	.L269:
 4745              	 .loc 1 3185 4 discriminator 3
 4746 003e 3B6A     	 ldr r3,[r7,#32]
 4747 0040 5B68     	 ldr r3,[r3,#4]
 4748 0042 DB68     	 ldr r3,[r3,#12]
 4749 0044 FB61     	 str r3,[r7,#28]
 4750              	.L272:
 4751              	.LBE168:
 4752              	.LBB169:
 4753              	.LBB170:
3186:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3187:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Populate an TaskStatus_t structure within the
3188:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3189:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3190:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			meaning of each TaskStatus_t structure member. */
3191:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			do
3192:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3193:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4754              	 .loc 1 3193 5 is_stmt 1
 4755 0046 BB68     	 ldr r3,[r7,#8]
 4756 0048 BB61     	 str r3,[r7,#24]
 4757 004a BB69     	 ldr r3,[r7,#24]
 4758 004c 5B68     	 ldr r3,[r3,#4]
 4759 004e 5A68     	 ldr r2,[r3,#4]
 4760 0050 BB69     	 ldr r3,[r7,#24]
 4761 0052 5A60     	 str r2,[r3,#4]
 4762 0054 BB69     	 ldr r3,[r7,#24]
 4763 0056 5A68     	 ldr r2,[r3,#4]
 4764 0058 BB69     	 ldr r3,[r7,#24]
 4765 005a 0833     	 adds r3,r3,#8
 4766 005c 9A42     	 cmp r2,r3
 4767 005e 04D1     	 bne .L270
ARM GAS   			page 147


 4768              	 .loc 1 3193 5 is_stmt 0 discriminator 1
 4769 0060 BB69     	 ldr r3,[r7,#24]
 4770 0062 5B68     	 ldr r3,[r3,#4]
 4771 0064 5A68     	 ldr r2,[r3,#4]
 4772 0066 BB69     	 ldr r3,[r7,#24]
 4773 0068 5A60     	 str r2,[r3,#4]
 4774              	.L270:
 4775              	 .loc 1 3193 5 discriminator 3
 4776 006a BB69     	 ldr r3,[r7,#24]
 4777 006c 5B68     	 ldr r3,[r3,#4]
 4778 006e DB68     	 ldr r3,[r3,#12]
 4779 0070 7B61     	 str r3,[r7,#20]
 4780              	.LBE170:
3194:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3195:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 4781              	 .loc 1 3195 31 is_stmt 1 discriminator 3
 4782 0072 7B6A     	 ldr r3,[r7,#36]
 4783 0074 5B01     	 lsls r3,r3,#5
 4784 0076 FA68     	 ldr r2,[r7,#12]
 4785 0078 1344     	 add r3,r3,r2
 4786              	 .loc 1 3195 41 discriminator 3
 4787 007a 7A69     	 ldr r2,[r7,#20]
 4788 007c 1A60     	 str r2,[r3]
3196:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 4789              	 .loc 1 3196 31 discriminator 3
 4790 007e 7B6A     	 ldr r3,[r7,#36]
 4791 0080 5B01     	 lsls r3,r3,#5
 4792 0082 FA68     	 ldr r2,[r7,#12]
 4793 0084 1344     	 add r3,r3,r2
 4794              	 .loc 1 3196 63 discriminator 3
 4795 0086 7A69     	 ldr r2,[r7,#20]
 4796 0088 3432     	 adds r2,r2,#52
 4797              	 .loc 1 3196 44 discriminator 3
 4798 008a 5A60     	 str r2,[r3,#4]
3197:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 4799              	 .loc 1 3197 31 discriminator 3
 4800 008c 7B6A     	 ldr r3,[r7,#36]
 4801 008e 5B01     	 lsls r3,r3,#5
 4802 0090 FA68     	 ldr r2,[r7,#12]
 4803 0092 1344     	 add r3,r3,r2
 4804              	 .loc 1 3197 58 discriminator 3
 4805 0094 7A69     	 ldr r2,[r7,#20]
 4806 0096 526C     	 ldr r2,[r2,#68]
 4807              	 .loc 1 3197 45 discriminator 3
 4808 0098 9A60     	 str r2,[r3,#8]
3198:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 4809              	 .loc 1 3198 31 discriminator 3
 4810 009a 7B6A     	 ldr r3,[r7,#36]
 4811 009c 5B01     	 lsls r3,r3,#5
 4812 009e FA68     	 ldr r2,[r7,#12]
 4813 00a0 1344     	 add r3,r3,r2
 4814              	 .loc 1 3198 47 discriminator 3
 4815 00a2 FA79     	 ldrb r2,[r7,#7]
 4816 00a4 1A73     	 strb r2,[r3,#12]
3199:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 4817              	 .loc 1 3199 31 discriminator 3
 4818 00a6 7B6A     	 ldr r3,[r7,#36]
ARM GAS   			page 148


 4819 00a8 5B01     	 lsls r3,r3,#5
 4820 00aa FA68     	 ldr r2,[r7,#12]
 4821 00ac 1344     	 add r3,r3,r2
 4822              	 .loc 1 3199 64 discriminator 3
 4823 00ae 7A69     	 ldr r2,[r7,#20]
 4824 00b0 D26A     	 ldr r2,[r2,#44]
 4825              	 .loc 1 3199 51 discriminator 3
 4826 00b2 1A61     	 str r2,[r3,#16]
3200:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3201:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3202:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3203:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* If the task is in the suspended list then there is a chance
3204:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					it is actually just blocked indefinitely - so really it should
3205:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					be reported as being in the Blocked state. */
3206:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( eState == eSuspended )
 4827              	 .loc 1 3206 6 discriminator 3
 4828 00b4 FB79     	 ldrb r3,[r7,#7]
 4829 00b6 032B     	 cmp r3,#3
 4830 00b8 0ED1     	 bne .L271
3207:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3208:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 4831              	 .loc 1 3208 11
 4832 00ba 7B69     	 ldr r3,[r7,#20]
 4833 00bc 9B6A     	 ldr r3,[r3,#40]
 4834              	 .loc 1 3208 69
 4835 00be 002B     	 cmp r3,#0
 4836 00c0 14BF     	 ite ne
 4837 00c2 0123     	 movne r3,#1
 4838 00c4 0023     	 moveq r3,#0
 4839 00c6 DBB2     	 uxtb r3,r3
 4840              	 .loc 1 3208 7
 4841 00c8 002B     	 cmp r3,#0
 4842 00ca 05D0     	 beq .L271
3209:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
3210:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 4843              	 .loc 1 3210 34
 4844 00cc 7B6A     	 ldr r3,[r7,#36]
 4845 00ce 5B01     	 lsls r3,r3,#5
 4846 00d0 FA68     	 ldr r2,[r7,#12]
 4847 00d2 1344     	 add r3,r3,r2
 4848              	 .loc 1 3210 50
 4849 00d4 0222     	 movs r2,#2
 4850 00d6 1A73     	 strb r2,[r3,#12]
 4851              	.L271:
3211:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
3212:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3213:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3214:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3215:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3216:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
3217:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3218:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 4852              	 .loc 1 3218 32
 4853 00d8 7B6A     	 ldr r3,[r7,#36]
 4854 00da 5B01     	 lsls r3,r3,#5
 4855 00dc FA68     	 ldr r2,[r7,#12]
 4856 00de 1344     	 add r3,r3,r2
ARM GAS   			page 149


 4857              	 .loc 1 3218 62
 4858 00e0 7A69     	 ldr r2,[r7,#20]
 4859 00e2 D26C     	 ldr r2,[r2,#76]
 4860              	 .loc 1 3218 49
 4861 00e4 5A61     	 str r2,[r3,#20]
3219:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3220:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#else
3221:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3222:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
3223:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3224:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
3225:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3226:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3227:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3228:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3229:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3230:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#else
3231:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3232:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 4862              	 .loc 1 3232 32
 4863 00e6 7B6A     	 ldr r3,[r7,#36]
 4864 00e8 5B01     	 lsls r3,r3,#5
 4865 00ea FA68     	 ldr r2,[r7,#12]
 4866 00ec 1344     	 add r3,r3,r2
 4867              	 .loc 1 3232 51
 4868 00ee 0022     	 movs r2,#0
 4869 00f0 9A61     	 str r2,[r3,#24]
3233:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3234:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
3235:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3236:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3237:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3238:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3239:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3240:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#else
3241:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3242:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 4870              	 .loc 1 3242 110
 4871 00f2 7B69     	 ldr r3,[r7,#20]
 4872 00f4 196B     	 ldr r1,[r3,#48]
 4873              	 .loc 1 3242 32
 4874 00f6 7B6A     	 ldr r3,[r7,#36]
 4875 00f8 5B01     	 lsls r3,r3,#5
 4876 00fa FA68     	 ldr r2,[r7,#12]
 4877 00fc D418     	 adds r4,r2,r3
 4878              	 .loc 1 3242 83
 4879 00fe 0846     	 mov r0,r1
 4880 0100 FFF7FEFF 	 bl _ZL26prvTaskCheckFreeStackSpacePKh
 4881 0104 0346     	 mov r3,r0
 4882              	 .loc 1 3242 55
 4883 0106 A383     	 strh r3,[r4,#28]
3243:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3244:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
3245:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3246:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				uxTask++;
 4884              	 .loc 1 3246 11
 4885 0108 7B6A     	 ldr r3,[r7,#36]
ARM GAS   			page 150


 4886 010a 0133     	 adds r3,r3,#1
 4887 010c 7B62     	 str r3,[r7,#36]
 4888              	.LBE169:
3247:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4889              	 .loc 1 3248 23
 4890 010e 7A69     	 ldr r2,[r7,#20]
 4891 0110 FB69     	 ldr r3,[r7,#28]
 4892 0112 9A42     	 cmp r2,r3
 4893 0114 00D0     	 beq .L268
3191:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
 4894              	 .loc 1 3191 4
 4895 0116 96E7     	 b .L272
 4896              	.L268:
 4897              	.LBE167:
 4898              	.LBE166:
3249:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3250:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3251:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3252:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3253:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3254:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3255:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return uxTask;
 4899              	 .loc 1 3255 10
 4900 0118 7B6A     	 ldr r3,[r7,#36]
3256:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 4901              	 .loc 1 3256 2
 4902 011a 1846     	 mov r0,r3
 4903 011c 2C37     	 adds r7,r7,#44
 4904              	 .cfi_def_cfa_offset 12
 4905 011e BD46     	 mov sp,r7
 4906              	 .cfi_def_cfa_register 13
 4907              	 
 4908 0120 90BD     	 pop {r4,r7,pc}
 4909              	 .cfi_endproc
 4910              	.LFE45:
 4911              	 .cantunwind
 4912              	 .fnend
 4913              	 .size _ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState,.-_ZL27prvListTaskWithinSingleListP12xTASK_STATUSP5xLIST10eTaskState
 4914              	 .section .text._ZL26prvTaskCheckFreeStackSpacePKh,"ax",%progbits
 4915              	 .align 1
 4916              	 .syntax unified
 4917              	 .thumb
 4918              	 .thumb_func
 4919              	 .type _ZL26prvTaskCheckFreeStackSpacePKh,%function
 4920              	_ZL26prvTaskCheckFreeStackSpacePKh:
 4921              	 .fnstart
 4922              	.LFB46:
3257:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3258:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3260:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3261:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3262:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3263:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3264:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 4923              	 .loc 1 3264 2
ARM GAS   			page 151


 4924              	 .cfi_startproc
 4925              	 
 4926              	 
 4927              	 
 4928 0000 80B4     	 push {r7}
 4929              	 .cfi_def_cfa_offset 4
 4930              	 .cfi_offset 7,-4
 4931 0002 85B0     	 sub sp,sp,#20
 4932              	 .cfi_def_cfa_offset 24
 4933 0004 00AF     	 add r7,sp,#0
 4934              	 .cfi_def_cfa_register 7
 4935 0006 7860     	 str r0,[r7,#4]
3265:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uint32_t ulCount = 0U;
 4936              	 .loc 1 3265 11
 4937 0008 0023     	 movs r3,#0
 4938 000a FB60     	 str r3,[r7,#12]
 4939              	.L276:
3266:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3267:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4940              	 .loc 1 3267 10
 4941 000c 7B68     	 ldr r3,[r7,#4]
 4942 000e 1B78     	 ldrb r3,[r3]
 4943              	 .loc 1 3267 24
 4944 0010 A52B     	 cmp r3,#165
 4945 0012 06D1     	 bne .L275
3268:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3269:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4946              	 .loc 1 3269 17
 4947 0014 7B68     	 ldr r3,[r7,#4]
 4948 0016 0133     	 adds r3,r3,#1
 4949 0018 7B60     	 str r3,[r7,#4]
3270:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			ulCount++;
 4950              	 .loc 1 3270 11
 4951 001a FB68     	 ldr r3,[r7,#12]
 4952 001c 0133     	 adds r3,r3,#1
 4953 001e FB60     	 str r3,[r7,#12]
3267:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
 4954              	 .loc 1 3267 3
 4955 0020 F4E7     	 b .L276
 4956              	.L275:
3271:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3272:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3273:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 4957              	 .loc 1 3273 11
 4958 0022 FB68     	 ldr r3,[r7,#12]
 4959 0024 9B08     	 lsrs r3,r3,#2
 4960 0026 FB60     	 str r3,[r7,#12]
3274:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3275:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return ( uint16_t ) ulCount;
 4961              	 .loc 1 3275 23
 4962 0028 FB68     	 ldr r3,[r7,#12]
 4963 002a 9BB2     	 uxth r3,r3
3276:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 4964              	 .loc 1 3276 2
 4965 002c 1846     	 mov r0,r3
 4966 002e 1437     	 adds r7,r7,#20
 4967              	 .cfi_def_cfa_offset 4
ARM GAS   			page 152


 4968 0030 BD46     	 mov sp,r7
 4969              	 .cfi_def_cfa_register 13
 4970              	 
 4971 0032 5DF8047B 	 ldr r7,[sp],#4
 4972              	 .cfi_restore 7
 4973              	 .cfi_def_cfa_offset 0
 4974 0036 7047     	 bx lr
 4975              	 .cfi_endproc
 4976              	.LFE46:
 4977              	 .cantunwind
 4978              	 .fnend
 4979              	 .size _ZL26prvTaskCheckFreeStackSpacePKh,.-_ZL26prvTaskCheckFreeStackSpacePKh
 4980              	 .section .text._ZL27prvResetNextTaskUnblockTimev,"ax",%progbits
 4981              	 .align 1
 4982              	 .syntax unified
 4983              	 .thumb
 4984              	 .thumb_func
 4985              	 .type _ZL27prvResetNextTaskUnblockTimev,%function
 4986              	_ZL27prvResetNextTaskUnblockTimev:
 4987              	 .fnstart
 4988              	.LFB47:
3277:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3278:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3279:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3280:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3281:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3282:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3283:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3284:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3285:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
3286:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uint8_t *pucEndOfStack;
3287:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxReturn;
3288:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3289:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3290:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3291:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if portSTACK_GROWTH < 0
3292:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3293:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3294:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3295:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#else
3296:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3297:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3298:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3299:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif
3300:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3301:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3302:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3303:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return uxReturn;
3304:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3305:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3306:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3307:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3308:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3309:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3310:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3311:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3312:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
ARM GAS   			page 153


3313:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3314:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3315:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		want to allocate and clean RAM statically. */
3316:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3317:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3318:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3319:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		to the task to free any memory allocated at the application level. */
3320:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3321:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3322:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3323:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3324:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3325:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3326:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
3327:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3328:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Only free the stack if it was allocated dynamically in the first
3329:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			place. */
3330:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
3331:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3332:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				vPortFreeAligned( pxTCB->pxStack );
3333:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3335:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#else
3336:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3337:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vPortFreeAligned( pxTCB->pxStack );
3338:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3339:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif
3340:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3341:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		vPortFree( pxTCB );
3342:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3343:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3344:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* INCLUDE_vTaskDelete */
3345:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3346:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3347:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** static void prvResetNextTaskUnblockTime( void )
3348:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 4989              	 .loc 1 3348 1
 4990              	 .cfi_startproc
 4991              	 
 4992              	 
 4993              	 
 4994 0000 80B4     	 push {r7}
 4995              	 .cfi_def_cfa_offset 4
 4996              	 .cfi_offset 7,-4
 4997 0002 83B0     	 sub sp,sp,#12
 4998              	 .cfi_def_cfa_offset 16
 4999 0004 00AF     	 add r7,sp,#0
 5000              	 .cfi_def_cfa_register 7
3349:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TCB_t *pxTCB;
3350:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3351:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5001              	 .loc 1 3351 6
 5002 0006 114B     	 ldr r3,.L282
 5003 0008 1B68     	 ldr r3,[r3]
 5004 000a 1B68     	 ldr r3,[r3]
 5005 000c 002B     	 cmp r3,#0
 5006 000e 0CBF     	 ite eq
ARM GAS   			page 154


 5007 0010 0123     	 moveq r3,#1
 5008 0012 0023     	 movne r3,#0
 5009 0014 DBB2     	 uxtb r3,r3
 5010              	 .loc 1 3351 45
 5011 0016 002B     	 cmp r3,#0
 5012 0018 14BF     	 ite ne
 5013 001a 0123     	 movne r3,#1
 5014 001c 0023     	 moveq r3,#0
 5015 001e DBB2     	 uxtb r3,r3
 5016              	 .loc 1 3351 2
 5017 0020 002B     	 cmp r3,#0
 5018 0022 04D0     	 beq .L279
3352:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3353:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3354:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3355:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3356:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		there is an item in the delayed list. */
3357:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5019              	 .loc 1 3357 24
 5020 0024 0A4B     	 ldr r3,.L282+4
 5021 0026 4FF0FF32 	 mov r2,#-1
 5022 002a 1A60     	 str r2,[r3]
3358:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3359:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	else
3360:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3361:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* The new current delayed list is not empty, get the value of
3362:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		the item at the head of the delayed list.  This is the time at
3363:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		which the task at the head of the delayed list should be removed
3364:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		from the Blocked state. */
3365:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3366:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
3367:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3368:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 5023              	 .loc 1 3368 1
 5024 002c 08E0     	 b .L281
 5025              	.L279:
3365:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 5026              	 .loc 1 3365 27
 5027 002e 074B     	 ldr r3,.L282
 5028 0030 1B68     	 ldr r3,[r3]
 5029 0032 DB68     	 ldr r3,[r3,#12]
3365:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 5030              	 .loc 1 3365 13
 5031 0034 DB68     	 ldr r3,[r3,#12]
 5032 0036 7B60     	 str r3,[r7,#4]
3366:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5033              	 .loc 1 3366 26
 5034 0038 7B68     	 ldr r3,[r7,#4]
 5035 003a 5B68     	 ldr r3,[r3,#4]
3366:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5036              	 .loc 1 3366 24
 5037 003c 044A     	 ldr r2,.L282+4
 5038 003e 1360     	 str r3,[r2]
 5039              	.L281:
 5040              	 .loc 1 3368 1
 5041 0040 00BF     	 nop
 5042 0042 0C37     	 adds r7,r7,#12
ARM GAS   			page 155


 5043              	 .cfi_def_cfa_offset 4
 5044 0044 BD46     	 mov sp,r7
 5045              	 .cfi_def_cfa_register 13
 5046              	 
 5047 0046 5DF8047B 	 ldr r7,[sp],#4
 5048              	 .cfi_restore 7
 5049              	 .cfi_def_cfa_offset 0
 5050 004a 7047     	 bx lr
 5051              	.L283:
 5052              	 .align 2
 5053              	.L282:
 5054 004c 00000000 	 .word _ZL17pxDelayedTaskList
 5055 0050 00000000 	 .word _ZL20xNextTaskUnblockTime
 5056              	 .cfi_endproc
 5057              	.LFE47:
 5058              	 .cantunwind
 5059              	 .fnend
 5060              	 .size _ZL27prvResetNextTaskUnblockTimev,.-_ZL27prvResetNextTaskUnblockTimev
 5061              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5062              	 .align 1
 5063              	 .global xTaskGetCurrentTaskHandle
 5064              	 .syntax unified
 5065              	 .thumb
 5066              	 .thumb_func
 5067              	 .type xTaskGetCurrentTaskHandle,%function
 5068              	xTaskGetCurrentTaskHandle:
 5069              	 .fnstart
 5070              	.LFB48:
3369:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3370:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3371:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3372:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3373:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3374:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 5071              	 .loc 1 3374 2
 5072              	 .cfi_startproc
 5073              	 
 5074              	 
 5075              	 
 5076 0000 80B4     	 push {r7}
 5077              	 .cfi_def_cfa_offset 4
 5078              	 .cfi_offset 7,-4
 5079 0002 83B0     	 sub sp,sp,#12
 5080              	 .cfi_def_cfa_offset 16
 5081 0004 00AF     	 add r7,sp,#0
 5082              	 .cfi_def_cfa_register 7
3375:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TaskHandle_t xReturn;
3376:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3377:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* A critical section is not required as this is not called from
3378:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		an interrupt and the current TCB will always be the same for any
3379:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		individual execution thread. */
3380:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		xReturn = pxCurrentTCB;
 5083              	 .loc 1 3380 11
 5084 0006 054B     	 ldr r3,.L286
 5085 0008 1B68     	 ldr r3,[r3]
 5086 000a 7B60     	 str r3,[r7,#4]
3381:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 156


3382:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 5087              	 .loc 1 3382 10
 5088 000c 7B68     	 ldr r3,[r7,#4]
3383:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5089              	 .loc 1 3383 2
 5090 000e 1846     	 mov r0,r3
 5091 0010 0C37     	 adds r7,r7,#12
 5092              	 .cfi_def_cfa_offset 4
 5093 0012 BD46     	 mov sp,r7
 5094              	 .cfi_def_cfa_register 13
 5095              	 
 5096 0014 5DF8047B 	 ldr r7,[sp],#4
 5097              	 .cfi_restore 7
 5098              	 .cfi_def_cfa_offset 0
 5099 0018 7047     	 bx lr
 5100              	.L287:
 5101 001a 00BF     	 .align 2
 5102              	.L286:
 5103 001c 00000000 	 .word pxCurrentTCB
 5104              	 .cfi_endproc
 5105              	.LFE48:
 5106              	 .cantunwind
 5107              	 .fnend
 5108              	 .size xTaskGetCurrentTaskHandle,.-xTaskGetCurrentTaskHandle
 5109              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 5110              	 .align 1
 5111              	 .global xTaskGetSchedulerState
 5112              	 .syntax unified
 5113              	 .thumb
 5114              	 .thumb_func
 5115              	 .type xTaskGetSchedulerState,%function
 5116              	xTaskGetSchedulerState:
 5117              	 .fnstart
 5118              	.LFB49:
3384:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3385:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3386:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3387:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3388:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3389:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3390:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3391:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 5119              	 .loc 1 3391 2
 5120              	 .cfi_startproc
 5121              	 
 5122              	 
 5123              	 
 5124 0000 80B4     	 push {r7}
 5125              	 .cfi_def_cfa_offset 4
 5126              	 .cfi_offset 7,-4
 5127 0002 83B0     	 sub sp,sp,#12
 5128              	 .cfi_def_cfa_offset 16
 5129 0004 00AF     	 add r7,sp,#0
 5130              	 .cfi_def_cfa_register 7
3392:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn;
3393:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3394:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xSchedulerRunning == pdFALSE )
ARM GAS   			page 157


 5131              	 .loc 1 3394 25
 5132 0006 104B     	 ldr r3,.L293
 5133 0008 1B68     	 ldr r3,[r3]
 5134 000a 002B     	 cmp r3,#0
 5135 000c 0CBF     	 ite eq
 5136 000e 0123     	 moveq r3,#1
 5137 0010 0023     	 movne r3,#0
 5138 0012 DBB2     	 uxtb r3,r3
 5139              	 .loc 1 3394 3
 5140 0014 002B     	 cmp r3,#0
 5141 0016 02D0     	 beq .L289
3395:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3396:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5142              	 .loc 1 3396 12
 5143 0018 0123     	 movs r3,#1
 5144 001a 7B60     	 str r3,[r7,#4]
 5145 001c 0DE0     	 b .L290
 5146              	.L289:
3397:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3398:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3399:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3400:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5147              	 .loc 1 3400 29
 5148 001e 0B4B     	 ldr r3,.L293+4
 5149 0020 1B68     	 ldr r3,[r3]
 5150 0022 002B     	 cmp r3,#0
 5151 0024 0CBF     	 ite eq
 5152 0026 0123     	 moveq r3,#1
 5153 0028 0023     	 movne r3,#0
 5154 002a DBB2     	 uxtb r3,r3
 5155              	 .loc 1 3400 4
 5156 002c 002B     	 cmp r3,#0
 5157 002e 02D0     	 beq .L291
3401:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3402:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5158              	 .loc 1 3402 13
 5159 0030 0223     	 movs r3,#2
 5160 0032 7B60     	 str r3,[r7,#4]
 5161 0034 01E0     	 b .L290
 5162              	.L291:
3403:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3404:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3405:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3406:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 5163              	 .loc 1 3406 13
 5164 0036 0023     	 movs r3,#0
 5165 0038 7B60     	 str r3,[r7,#4]
 5166              	.L290:
3407:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3408:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3409:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3410:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 5167              	 .loc 1 3410 10
 5168 003a 7B68     	 ldr r3,[r7,#4]
3411:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5169              	 .loc 1 3411 2
 5170 003c 1846     	 mov r0,r3
ARM GAS   			page 158


 5171 003e 0C37     	 adds r7,r7,#12
 5172              	 .cfi_def_cfa_offset 4
 5173 0040 BD46     	 mov sp,r7
 5174              	 .cfi_def_cfa_register 13
 5175              	 
 5176 0042 5DF8047B 	 ldr r7,[sp],#4
 5177              	 .cfi_restore 7
 5178              	 .cfi_def_cfa_offset 0
 5179 0046 7047     	 bx lr
 5180              	.L294:
 5181              	 .align 2
 5182              	.L293:
 5183 0048 00000000 	 .word _ZL17xSchedulerRunning
 5184 004c 00000000 	 .word _ZL20uxSchedulerSuspended
 5185              	 .cfi_endproc
 5186              	.LFE49:
 5187              	 .cantunwind
 5188              	 .fnend
 5189              	 .size xTaskGetSchedulerState,.-xTaskGetSchedulerState
 5190              	 .section .text.vTaskPriorityInherit,"ax",%progbits
 5191              	 .align 1
 5192              	 .global vTaskPriorityInherit
 5193              	 .syntax unified
 5194              	 .thumb
 5195              	 .thumb_func
 5196              	 .type vTaskPriorityInherit,%function
 5197              	vTaskPriorityInherit:
 5198              	 .fnstart
 5199              	.LFB50:
3412:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3413:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3414:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3415:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3416:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_MUTEXES == 1 )
3417:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3418:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3419:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 5200              	 .loc 1 3419 2
 5201              	 .cfi_startproc
 5202              	 
 5203              	 
 5204 0000 80B5     	 push {r7,lr}
 5205              	 .save {r7,lr}
 5206              	 .cfi_def_cfa_offset 8
 5207              	 .cfi_offset 7,-8
 5208              	 .cfi_offset 14,-4
 5209              	 .pad #16
 5210 0002 84B0     	 sub sp,sp,#16
 5211              	 .cfi_def_cfa_offset 24
 5212              	 .setfp r7,sp,#0
 5213 0004 00AF     	 add r7,sp,#0
 5214              	 .cfi_def_cfa_register 7
 5215 0006 7860     	 str r0,[r7,#4]
3420:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5216              	 .loc 1 3420 16
 5217 0008 7B68     	 ldr r3,[r7,#4]
 5218 000a FB60     	 str r3,[r7,#12]
ARM GAS   			page 159


3421:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3422:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3423:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		locked then the mutex holder might now be NULL. */
3424:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxMutexHolder != NULL )
 5219              	 .loc 1 3424 3
 5220 000c 7B68     	 ldr r3,[r7,#4]
 5221 000e 002B     	 cmp r3,#0
 5222 0010 6DD0     	 beq .L300
3425:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3426:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3427:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3428:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3429:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 5223              	 .loc 1 3429 15
 5224 0012 FB68     	 ldr r3,[r7,#12]
 5225 0014 DA6A     	 ldr r2,[r3,#44]
 5226              	 .loc 1 3429 28
 5227 0016 384B     	 ldr r3,.L301
 5228 0018 1B68     	 ldr r3,[r3]
 5229              	 .loc 1 3429 42
 5230 001a DB6A     	 ldr r3,[r3,#44]
 5231              	 .loc 1 3429 26
 5232 001c 9A42     	 cmp r2,r3
 5233 001e 34BF     	 ite cc
 5234 0020 0123     	 movcc r3,#1
 5235 0022 0023     	 movcs r3,#0
 5236 0024 DBB2     	 uxtb r3,r3
 5237              	 .loc 1 3429 4
 5238 0026 002B     	 cmp r3,#0
 5239 0028 61D0     	 beq .L300
3430:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3431:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Adjust the mutex holder state to account for its new
3432:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				priority.  Only reset the event list item value if the value is
3433:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				not	being used for anything else. */
3434:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 5240              	 .loc 1 3434 11
 5241 002a FB68     	 ldr r3,[r7,#12]
 5242 002c 9B69     	 ldr r3,[r3,#24]
 5243              	 .loc 1 3434 5
 5244 002e 002B     	 cmp r3,#0
 5245 0030 06DB     	 blt .L297
3435:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3436:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5246              	 .loc 1 3436 6
 5247 0032 314B     	 ldr r3,.L301
 5248 0034 1B68     	 ldr r3,[r3]
 5249 0036 DB6A     	 ldr r3,[r3,#44]
 5250 0038 C3F10702 	 rsb r2,r3,#7
 5251 003c FB68     	 ldr r3,[r7,#12]
 5252 003e 9A61     	 str r2,[r3,#24]
 5253              	.L297:
3437:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3438:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
3439:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3440:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3441:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3442:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 160


3443:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* If the task being modified is in the ready state it will need
3444:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				to be moved into a new list. */
3445:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 5254              	 .loc 1 3445 9
 5255 0040 FB68     	 ldr r3,[r7,#12]
 5256 0042 5969     	 ldr r1,[r3,#20]
 5257 0044 FB68     	 ldr r3,[r7,#12]
 5258 0046 DA6A     	 ldr r2,[r3,#44]
 5259 0048 1346     	 mov r3,r2
 5260 004a 9B00     	 lsls r3,r3,#2
 5261 004c 1344     	 add r3,r3,r2
 5262 004e 9B00     	 lsls r3,r3,#2
 5263 0050 2A4A     	 ldr r2,.L301+4
 5264 0052 1344     	 add r3,r3,r2
 5265 0054 9942     	 cmp r1,r3
 5266 0056 0CBF     	 ite eq
 5267 0058 0123     	 moveq r3,#1
 5268 005a 0023     	 movne r3,#0
 5269 005c DBB2     	 uxtb r3,r3
 5270              	 .loc 1 3445 5
 5271 005e 002B     	 cmp r3,#0
 5272 0060 40D0     	 beq .L298
3446:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3447:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 5273              	 .loc 1 3447 22
 5274 0062 FB68     	 ldr r3,[r7,#12]
 5275 0064 0433     	 adds r3,r3,#4
 5276 0066 1846     	 mov r0,r3
 5277 0068 FFF7FEFF 	 bl uxListRemove
 5278 006c 0346     	 mov r3,r0
 5279              	 .loc 1 3447 55
 5280 006e 002B     	 cmp r3,#0
 5281 0070 0CBF     	 ite eq
 5282 0072 0123     	 moveq r3,#1
 5283 0074 0023     	 movne r3,#0
 5284 0076 DBB2     	 uxtb r3,r3
 5285              	 .loc 1 3447 6
 5286 0078 002B     	 cmp r3,#0
 5287 007a 15D0     	 beq .L299
3448:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3449:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5288              	 .loc 1 3449 7
 5289 007c FB68     	 ldr r3,[r7,#12]
 5290 007e DA6A     	 ldr r2,[r3,#44]
 5291 0080 1E49     	 ldr r1,.L301+4
 5292 0082 1346     	 mov r3,r2
 5293 0084 9B00     	 lsls r3,r3,#2
 5294 0086 1344     	 add r3,r3,r2
 5295 0088 9B00     	 lsls r3,r3,#2
 5296 008a 0B44     	 add r3,r3,r1
 5297 008c 1B68     	 ldr r3,[r3]
 5298 008e 002B     	 cmp r3,#0
 5299 0090 0AD1     	 bne .L299
 5300              	 .loc 1 3449 7 is_stmt 0 discriminator 1
 5301 0092 1B4B     	 ldr r3,.L301+8
 5302 0094 1A68     	 ldr r2,[r3]
 5303 0096 FB68     	 ldr r3,[r7,#12]
ARM GAS   			page 161


 5304 0098 DB6A     	 ldr r3,[r3,#44]
 5305 009a 0121     	 movs r1,#1
 5306 009c 01FA03F3 	 lsl r3,r1,r3
 5307 00a0 DB43     	 mvns r3,r3
 5308 00a2 1340     	 ands r3,r3,r2
 5309 00a4 164A     	 ldr r2,.L301+8
 5310 00a6 1360     	 str r3,[r2]
 5311              	.L299:
3450:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3451:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
3452:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3453:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3454:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3455:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3456:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3457:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5312              	 .loc 1 3457 26 is_stmt 1
 5313 00a8 134B     	 ldr r3,.L301
 5314 00aa 1B68     	 ldr r3,[r3]
 5315              	 .loc 1 3457 40
 5316 00ac DA6A     	 ldr r2,[r3,#44]
 5317              	 .loc 1 3457 24
 5318 00ae FB68     	 ldr r3,[r7,#12]
 5319 00b0 DA62     	 str r2,[r3,#44]
3458:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5320              	 .loc 1 3458 6
 5321 00b2 134B     	 ldr r3,.L301+8
 5322 00b4 1A68     	 ldr r2,[r3]
 5323 00b6 FB68     	 ldr r3,[r7,#12]
 5324 00b8 DB6A     	 ldr r3,[r3,#44]
 5325 00ba 0121     	 movs r1,#1
 5326 00bc 01FA03F3 	 lsl r3,r1,r3
 5327 00c0 1343     	 orrs r3,r3,r2
 5328 00c2 0F4A     	 ldr r2,.L301+8
 5329 00c4 1360     	 str r3,[r2]
 5330 00c6 FB68     	 ldr r3,[r7,#12]
 5331 00c8 DA6A     	 ldr r2,[r3,#44]
 5332 00ca 1346     	 mov r3,r2
 5333 00cc 9B00     	 lsls r3,r3,#2
 5334 00ce 1344     	 add r3,r3,r2
 5335 00d0 9B00     	 lsls r3,r3,#2
 5336 00d2 0A4A     	 ldr r2,.L301+4
 5337 00d4 1A44     	 add r2,r2,r3
 5338 00d6 FB68     	 ldr r3,[r7,#12]
 5339 00d8 0433     	 adds r3,r3,#4
 5340 00da 1946     	 mov r1,r3
 5341 00dc 1046     	 mov r0,r2
 5342 00de FFF7FEFF 	 bl vListInsertEnd
3459:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3460:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
3461:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3462:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Just inherit the priority. */
3463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3464:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3465:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3466:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3467:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
ARM GAS   			page 162


3468:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3469:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3470:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3471:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3472:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3473:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3474:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3475:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3476:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3477:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5343              	 .loc 1 3477 2
 5344 00e2 04E0     	 b .L300
 5345              	.L298:
3463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 5346              	 .loc 1 3463 26
 5347 00e4 044B     	 ldr r3,.L301
 5348 00e6 1B68     	 ldr r3,[r3]
3463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 5349              	 .loc 1 3463 40
 5350 00e8 DA6A     	 ldr r2,[r3,#44]
3463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
 5351              	 .loc 1 3463 24
 5352 00ea FB68     	 ldr r3,[r7,#12]
 5353 00ec DA62     	 str r2,[r3,#44]
 5354              	.L300:
 5355              	 .loc 1 3477 2
 5356 00ee 00BF     	 nop
 5357 00f0 1037     	 adds r7,r7,#16
 5358              	 .cfi_def_cfa_offset 8
 5359 00f2 BD46     	 mov sp,r7
 5360              	 .cfi_def_cfa_register 13
 5361              	 
 5362 00f4 80BD     	 pop {r7,pc}
 5363              	.L302:
 5364 00f6 00BF     	 .align 2
 5365              	.L301:
 5366 00f8 00000000 	 .word pxCurrentTCB
 5367 00fc 00000000 	 .word _ZL17pxReadyTasksLists
 5368 0100 00000000 	 .word _ZL18uxTopReadyPriority
 5369              	 .cfi_endproc
 5370              	.LFE50:
 5371              	 .fnend
 5372              	 .size vTaskPriorityInherit,.-vTaskPriorityInherit
 5373              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 5374              	 .align 1
 5375              	 .global xTaskPriorityDisinherit
 5376              	 .syntax unified
 5377              	 .thumb
 5378              	 .thumb_func
 5379              	 .type xTaskPriorityDisinherit,%function
 5380              	xTaskPriorityDisinherit:
 5381              	 .fnstart
 5382              	.LFB51:
3478:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3479:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_MUTEXES */
3480:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3481:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 163


3482:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_MUTEXES == 1 )
3483:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3484:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3485:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 5383              	 .loc 1 3485 2
 5384              	 .cfi_startproc
 5385              	 
 5386              	 
 5387 0000 80B5     	 push {r7,lr}
 5388              	 .save {r7,lr}
 5389              	 .cfi_def_cfa_offset 8
 5390              	 .cfi_offset 7,-8
 5391              	 .cfi_offset 14,-4
 5392              	 .pad #24
 5393 0002 86B0     	 sub sp,sp,#24
 5394              	 .cfi_def_cfa_offset 32
 5395              	 .setfp r7,sp,#0
 5396 0004 00AF     	 add r7,sp,#0
 5397              	 .cfi_def_cfa_register 7
 5398 0006 7860     	 str r0,[r7,#4]
3486:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5399              	 .loc 1 3486 16
 5400 0008 7B68     	 ldr r3,[r7,#4]
 5401 000a 3B61     	 str r3,[r7,#16]
3487:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn = pdFALSE;
 5402              	 .loc 1 3487 13
 5403 000c 0023     	 movs r3,#0
 5404 000e 7B61     	 str r3,[r7,#20]
3488:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3489:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxMutexHolder != NULL )
 5405              	 .loc 1 3489 3
 5406 0010 7B68     	 ldr r3,[r7,#4]
 5407 0012 002B     	 cmp r3,#0
 5408 0014 79D0     	 beq .L304
3490:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3491:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3492:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3493:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3494:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			be the running state task. */
3495:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 5409              	 .loc 1 3495 4
 5410 0016 3F4B     	 ldr r3,.L311
 5411 0018 1B68     	 ldr r3,[r3]
 5412 001a 3A69     	 ldr r2,[r7,#16]
 5413 001c 9A42     	 cmp r2,r3
 5414 001e 14BF     	 ite ne
 5415 0020 0123     	 movne r3,#1
 5416 0022 0023     	 moveq r3,#0
 5417 0024 DBB2     	 uxtb r3,r3
 5418 0026 002B     	 cmp r3,#0
 5419 0028 0AD0     	 beq .L305
 5420              	.LBB171:
 5421              	.LBB172:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 5422              	 .loc 2 215 2
 5423              	 .syntax unified
 5424              	
ARM GAS   			page 164


 5425 002a 4FF01003 	 mov r3,#16
 5426 002e 83F31188 	 msr basepri,r3
 5427 0032 BFF36F8F 	 isb 
 5428 0036 BFF34F8F 	 dsb 
 5429              	
 5430              	
 5431              	 .thumb
 5432              	 .syntax unified
 5433 003a FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 5434              	 .loc 2 223 1
 5435 003c 00BF     	 nop
 5436              	.L306:
 5437              	.LBE172:
 5438              	.LBE171:
 5439              	 .loc 1 3495 4 discriminator 1
 5440 003e FEE7     	 b .L306
 5441              	.L305:
3496:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3497:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5442              	 .loc 1 3497 4
 5443 0040 3B69     	 ldr r3,[r7,#16]
 5444 0042 1B6D     	 ldr r3,[r3,#80]
 5445 0044 002B     	 cmp r3,#0
 5446 0046 0AD1     	 bne .L307
 5447              	.LBB173:
 5448              	.LBB174:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 5449              	 .loc 2 215 2
 5450              	 .syntax unified
 5451              	
 5452 0048 4FF01003 	 mov r3,#16
 5453 004c 83F31188 	 msr basepri,r3
 5454 0050 BFF36F8F 	 isb 
 5455 0054 BFF34F8F 	 dsb 
 5456              	
 5457              	
 5458              	 .thumb
 5459              	 .syntax unified
 5460 0058 BB60     	 str r3,[r7,#8]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 5461              	 .loc 2 223 1
 5462 005a 00BF     	 nop
 5463              	.L308:
 5464              	.LBE174:
 5465              	.LBE173:
 5466              	 .loc 1 3497 4 discriminator 2
 5467 005c FEE7     	 b .L308
 5468              	.L307:
3498:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5469              	 .loc 1 3498 13
 5470 005e 3B69     	 ldr r3,[r7,#16]
 5471 0060 1B6D     	 ldr r3,[r3,#80]
 5472              	 .loc 1 3498 28
 5473 0062 5A1E     	 subs r2,r3,#1
 5474 0064 3B69     	 ldr r3,[r7,#16]
 5475 0066 1A65     	 str r2,[r3,#80]
ARM GAS   			page 165


3499:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3500:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3501:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			task? */
3502:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5476              	 .loc 1 3502 15
 5477 0068 3B69     	 ldr r3,[r7,#16]
 5478 006a DA6A     	 ldr r2,[r3,#44]
 5479              	 .loc 1 3502 36
 5480 006c 3B69     	 ldr r3,[r7,#16]
 5481 006e DB6C     	 ldr r3,[r3,#76]
 5482              	 .loc 1 3502 4
 5483 0070 9A42     	 cmp r2,r3
 5484 0072 4AD0     	 beq .L304
3503:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3504:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3505:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5485              	 .loc 1 3505 16
 5486 0074 3B69     	 ldr r3,[r7,#16]
 5487 0076 1B6D     	 ldr r3,[r3,#80]
 5488              	 .loc 1 3505 5
 5489 0078 002B     	 cmp r3,#0
 5490 007a 46D1     	 bne .L304
3506:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3507:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* A task can only have an inherited priority if it holds
3508:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3509:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					given from an interrupt, and if a mutex is given by the
3510:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					holding	task then it must be the running state task.  Remove
3511:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					the	holding task from the ready	list. */
3512:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 5491              	 .loc 1 3512 22
 5492 007c 3B69     	 ldr r3,[r7,#16]
 5493 007e 0433     	 adds r3,r3,#4
 5494 0080 1846     	 mov r0,r3
 5495 0082 FFF7FEFF 	 bl uxListRemove
 5496 0086 0346     	 mov r3,r0
 5497              	 .loc 1 3512 55
 5498 0088 002B     	 cmp r3,#0
 5499 008a 0CBF     	 ite eq
 5500 008c 0123     	 moveq r3,#1
 5501 008e 0023     	 movne r3,#0
 5502 0090 DBB2     	 uxtb r3,r3
 5503              	 .loc 1 3512 6
 5504 0092 002B     	 cmp r3,#0
 5505 0094 15D0     	 beq .L309
3513:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3514:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5506              	 .loc 1 3514 7
 5507 0096 3B69     	 ldr r3,[r7,#16]
 5508 0098 DA6A     	 ldr r2,[r3,#44]
 5509 009a 1F49     	 ldr r1,.L311+4
 5510 009c 1346     	 mov r3,r2
 5511 009e 9B00     	 lsls r3,r3,#2
 5512 00a0 1344     	 add r3,r3,r2
 5513 00a2 9B00     	 lsls r3,r3,#2
 5514 00a4 0B44     	 add r3,r3,r1
 5515 00a6 1B68     	 ldr r3,[r3]
 5516 00a8 002B     	 cmp r3,#0
ARM GAS   			page 166


 5517 00aa 0AD1     	 bne .L309
 5518              	 .loc 1 3514 7 is_stmt 0 discriminator 1
 5519 00ac 1B4B     	 ldr r3,.L311+8
 5520 00ae 1A68     	 ldr r2,[r3]
 5521 00b0 3B69     	 ldr r3,[r7,#16]
 5522 00b2 DB6A     	 ldr r3,[r3,#44]
 5523 00b4 0121     	 movs r1,#1
 5524 00b6 01FA03F3 	 lsl r3,r1,r3
 5525 00ba DB43     	 mvns r3,r3
 5526 00bc 1340     	 ands r3,r3,r2
 5527 00be 174A     	 ldr r2,.L311+8
 5528 00c0 1360     	 str r3,[r2]
 5529              	.L309:
3515:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3516:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
3517:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3518:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3519:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3520:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3521:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Disinherit the priority before adding the task into the
3522:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					new	ready list. */
3523:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3524:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5530              	 .loc 1 3524 33 is_stmt 1
 5531 00c2 3B69     	 ldr r3,[r7,#16]
 5532 00c4 DA6C     	 ldr r2,[r3,#76]
 5533              	 .loc 1 3524 24
 5534 00c6 3B69     	 ldr r3,[r7,#16]
 5535 00c8 DA62     	 str r2,[r3,#44]
3525:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3526:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3527:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					any other purpose if this task is running, and it must be
3528:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					running to give back the mutex. */
3529:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 5536              	 .loc 1 3529 6
 5537 00ca 3B69     	 ldr r3,[r7,#16]
 5538 00cc DB6A     	 ldr r3,[r3,#44]
 5539 00ce C3F10702 	 rsb r2,r3,#7
 5540 00d2 3B69     	 ldr r3,[r7,#16]
 5541 00d4 9A61     	 str r2,[r3,#24]
3530:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5542              	 .loc 1 3530 6
 5543 00d6 114B     	 ldr r3,.L311+8
 5544 00d8 1A68     	 ldr r2,[r3]
 5545 00da 3B69     	 ldr r3,[r7,#16]
 5546 00dc DB6A     	 ldr r3,[r3,#44]
 5547 00de 0121     	 movs r1,#1
 5548 00e0 01FA03F3 	 lsl r3,r1,r3
 5549 00e4 1343     	 orrs r3,r3,r2
 5550 00e6 0D4A     	 ldr r2,.L311+8
 5551 00e8 1360     	 str r3,[r2]
 5552 00ea 3B69     	 ldr r3,[r7,#16]
 5553 00ec DA6A     	 ldr r2,[r3,#44]
 5554 00ee 1346     	 mov r3,r2
 5555 00f0 9B00     	 lsls r3,r3,#2
 5556 00f2 1344     	 add r3,r3,r2
 5557 00f4 9B00     	 lsls r3,r3,#2
ARM GAS   			page 167


 5558 00f6 084A     	 ldr r2,.L311+4
 5559 00f8 1A44     	 add r2,r2,r3
 5560 00fa 3B69     	 ldr r3,[r7,#16]
 5561 00fc 0433     	 adds r3,r3,#4
 5562 00fe 1946     	 mov r1,r3
 5563 0100 1046     	 mov r0,r2
 5564 0102 FFF7FEFF 	 bl vListInsertEnd
3531:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3532:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Return true to indicate that a context switch is required.
3533:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					This is only actually required in the corner case whereby
3534:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					multiple mutexes were held and the mutexes were given back
3535:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					in an order different to that in which they were taken.
3536:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					If a context switch did not occur when the first mutex was
3537:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					returned, even if a task was waiting on it, then a context
3538:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					switch should occur when the last mutex is returned whether
3539:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					a task is waiting on it or not. */
3540:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xReturn = pdTRUE;
 5565              	 .loc 1 3540 14
 5566 0106 0123     	 movs r3,#1
 5567 0108 7B61     	 str r3,[r7,#20]
 5568              	.L304:
3541:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3542:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
3543:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3544:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3545:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3546:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3547:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3548:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3549:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3550:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3551:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3552:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3553:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3554:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3555:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3556:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3557:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 5569              	 .loc 1 3557 10
 5570 010a 7B69     	 ldr r3,[r7,#20]
3558:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5571              	 .loc 1 3558 2
 5572 010c 1846     	 mov r0,r3
 5573 010e 1837     	 adds r7,r7,#24
 5574              	 .cfi_def_cfa_offset 8
 5575 0110 BD46     	 mov sp,r7
 5576              	 .cfi_def_cfa_register 13
 5577              	 
 5578 0112 80BD     	 pop {r7,pc}
 5579              	.L312:
 5580              	 .align 2
 5581              	.L311:
 5582 0114 00000000 	 .word pxCurrentTCB
 5583 0118 00000000 	 .word _ZL17pxReadyTasksLists
 5584 011c 00000000 	 .word _ZL18uxTopReadyPriority
 5585              	 .cfi_endproc
 5586              	.LFE51:
ARM GAS   			page 168


 5587              	 .fnend
 5588              	 .size xTaskPriorityDisinherit,.-xTaskPriorityDisinherit
 5589              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 5590              	 .align 1
 5591              	 .global uxTaskResetEventItemValue
 5592              	 .syntax unified
 5593              	 .thumb
 5594              	 .thumb_func
 5595              	 .type uxTaskResetEventItemValue,%function
 5596              	uxTaskResetEventItemValue:
 5597              	 .fnstart
 5598              	.LFB52:
3559:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3560:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_MUTEXES */
3561:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3562:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3563:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3564:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3565:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskEnterCritical( void )
3566:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3567:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portDISABLE_INTERRUPTS();
3568:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3569:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3570:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3571:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3572:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3573:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3574:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			function so	assert() if it is being called from an interrupt
3575:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3576:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3577:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			protect against recursive calls if the assert function also uses a
3578:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			critical section. */
3579:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3580:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3581:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				portASSERT_IF_IN_ISR();
3582:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3583:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3584:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3585:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3586:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3587:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3588:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3589:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3590:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3591:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3592:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3593:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3594:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3595:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskExitCritical( void )
3596:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3597:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3598:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3599:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3600:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3601:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3602:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3603:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
ARM GAS   			page 169


3604:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3605:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					portENABLE_INTERRUPTS();
3606:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3607:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
3608:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3609:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3610:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3611:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3612:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3613:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3614:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3615:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3616:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3617:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3618:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3619:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3620:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3621:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3622:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3623:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3624:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3625:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3626:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3627:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3628:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3629:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3630:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	size_t x;
3631:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3632:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Start by copying the entire string. */
3633:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3634:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3635:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3636:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		printed out. */
3637:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3638:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3639:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pcBuffer[ x ] = ' ';
3640:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3641:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3642:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Terminate. */
3643:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pcBuffer[ x ] = 0x00;
3644:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3645:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Return the new end of string. */
3646:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return &( pcBuffer[ x ] );
3647:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3648:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3649:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3650:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3651:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3652:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3653:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3654:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3655:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3656:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3657:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3658:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	char cStatus;
3659:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3660:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/*
ARM GAS   			page 170


3661:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * PLEASE NOTE:
3662:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3663:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * This function is provided for convenience only, and is used by many
3664:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3665:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * scheduler.
3666:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3667:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3668:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3669:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * displays task names, states and stack usage.
3670:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3671:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3672:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3673:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3674:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3675:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3676:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3677:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * snprintf() implementation!).
3678:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3679:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3680:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3681:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * through a call to vTaskList().
3682:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 */
3683:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3684:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3685:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3686:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		*pcWriteBuffer = 0x00;
3687:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3688:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3689:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		function is executing. */
3690:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3691:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3692:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Allocate an array index for each task. */
3693:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3694:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3695:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxTaskStatusArray != NULL )
3696:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3697:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Generate the (binary) data. */
3698:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3699:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3700:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Create a human readable table from the binary data. */
3701:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3702:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3703:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3704:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3705:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3706:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 										break;
3707:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3708:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3709:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 										break;
3710:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3711:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3712:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 										break;
3713:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3714:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
3715:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 										break;
3716:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3717:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					default:			/* Should not get here, but it is included
ARM GAS   			page 171


3718:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 										to prevent static checking errors. */
3719:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 										cStatus = 0x00;
3720:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 										break;
3721:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3722:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3723:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Write the task name to the string, padding with spaces so it
3724:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				can be printed in tabular form more easily. */
3725:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3726:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3727:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Write the rest of the string. */
3728:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
3729:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3730:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3731:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3732:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Free the array again. */
3733:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vPortFree( pxTaskStatusArray );
3734:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3735:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3736:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3737:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3738:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3739:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3740:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3741:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
3742:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*----------------------------------------------------------*/
3743:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3744:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3745:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3746:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3747:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
3748:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3749:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3750:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3751:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3752:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3753:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3754:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3755:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3756:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		#endif
3757:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3758:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/*
3759:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * PLEASE NOTE:
3760:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3761:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * This function is provided for convenience only, and is used by many
3762:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3763:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * scheduler.
3764:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3765:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3766:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3767:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3768:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * in both absolute and percentage terms.
3769:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3770:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3771:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3772:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * provide different results on different platforms.  An alternative,
3773:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3774:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
ARM GAS   			page 172


3775:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3776:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * a full snprintf() implementation!).
3777:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 *
3778:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3779:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3780:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3781:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		 */
3782:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3783:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3784:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		*pcWriteBuffer = 0x00;
3785:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3786:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3787:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		function is executing. */
3788:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3789:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3790:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* Allocate an array index for each task. */
3791:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3792:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3793:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxTaskStatusArray != NULL )
3794:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3795:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Generate the (binary) data. */
3796:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3797:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3798:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* For percentage calculations. */
3799:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			ulTotalTime /= 100UL;
3800:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3801:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Avoid divide by zero errors. */
3802:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( ulTotalTime > 0 )
3803:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3804:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Create a human readable table from the binary data. */
3805:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3806:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3807:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* What percentage of the total run time has the task used?
3808:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					This will always be rounded down to the nearest integer.
3809:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3810:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3811:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3812:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* Write the task name to the string, padding with
3813:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					spaces so it can be printed in tabular form more
3814:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					easily. */
3815:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3816:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3817:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3818:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3819:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3820:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
3821:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
3822:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
3823:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#else
3824:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
3825:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3826:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							printf() library can be used. */
3827:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3828:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
3829:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#endif
3830:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3831:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
ARM GAS   			page 173


3832:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3833:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* If the percentage is zero here then the task has
3834:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						consumed less than 1% of the total run time. */
3835:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3836:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
3837:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
3838:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
3839:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#else
3840:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
3841:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3842:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							printf() library can be used. */
3843:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3844:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
3845:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						#endif
3846:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3847:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3848:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3849:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3850:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3851:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3852:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3853:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3854:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3855:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3856:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Free the array again. */
3857:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			vPortFree( pxTaskStatusArray );
3858:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3859:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		else
3860:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3861:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3862:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3863:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
3864:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3865:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
3866:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3867:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3868:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t uxTaskResetEventItemValue( void )
3869:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** {
 5599              	 .loc 1 3869 1
 5600              	 .cfi_startproc
 5601              	 
 5602              	 
 5603              	 
 5604 0000 80B4     	 push {r7}
 5605              	 .cfi_def_cfa_offset 4
 5606              	 .cfi_offset 7,-4
 5607 0002 83B0     	 sub sp,sp,#12
 5608              	 .cfi_def_cfa_offset 16
 5609 0004 00AF     	 add r7,sp,#0
 5610              	 .cfi_def_cfa_register 7
3870:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** TickType_t uxReturn;
3871:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3872:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5611              	 .loc 1 3872 13
 5612 0006 094B     	 ldr r3,.L315
 5613 0008 1B68     	 ldr r3,[r3]
 5614              	 .loc 1 3872 11
ARM GAS   			page 174


 5615 000a 9B69     	 ldr r3,[r3,#24]
 5616 000c 7B60     	 str r3,[r7,#4]
3873:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3874:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3875:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	queues and semaphores. */
3876:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5617              	 .loc 1 3876 2
 5618 000e 074B     	 ldr r3,.L315
 5619 0010 1B68     	 ldr r3,[r3]
 5620 0012 DA6A     	 ldr r2,[r3,#44]
 5621 0014 054B     	 ldr r3,.L315
 5622 0016 1B68     	 ldr r3,[r3]
 5623 0018 C2F10702 	 rsb r2,r2,#7
 5624 001c 9A61     	 str r2,[r3,#24]
3877:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3878:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	return uxReturn;
 5625              	 .loc 1 3878 9
 5626 001e 7B68     	 ldr r3,[r7,#4]
3879:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** }
 5627              	 .loc 1 3879 1
 5628 0020 1846     	 mov r0,r3
 5629 0022 0C37     	 adds r7,r7,#12
 5630              	 .cfi_def_cfa_offset 4
 5631 0024 BD46     	 mov sp,r7
 5632              	 .cfi_def_cfa_register 13
 5633              	 
 5634 0026 5DF8047B 	 ldr r7,[sp],#4
 5635              	 .cfi_restore 7
 5636              	 .cfi_def_cfa_offset 0
 5637 002a 7047     	 bx lr
 5638              	.L316:
 5639              	 .align 2
 5640              	.L315:
 5641 002c 00000000 	 .word pxCurrentTCB
 5642              	 .cfi_endproc
 5643              	.LFE52:
 5644              	 .cantunwind
 5645              	 .fnend
 5646              	 .size uxTaskResetEventItemValue,.-uxTaskResetEventItemValue
 5647              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5648              	 .align 1
 5649              	 .global pvTaskIncrementMutexHeldCount
 5650              	 .syntax unified
 5651              	 .thumb
 5652              	 .thumb_func
 5653              	 .type pvTaskIncrementMutexHeldCount,%function
 5654              	pvTaskIncrementMutexHeldCount:
 5655              	 .fnstart
 5656              	.LFB53:
3880:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3881:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3882:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if ( configUSE_MUTEXES == 1 )
3883:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3884:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3885:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 5657              	 .loc 1 3885 2
 5658              	 .cfi_startproc
ARM GAS   			page 175


 5659              	 
 5660              	 
 5661              	 
 5662 0000 80B4     	 push {r7}
 5663              	 .cfi_def_cfa_offset 4
 5664              	 .cfi_offset 7,-4
 5665 0002 00AF     	 add r7,sp,#0
 5666              	 .cfi_def_cfa_register 7
3886:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3887:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		then pxCurrentTCB will be NULL. */
3888:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		if( pxCurrentTCB != NULL )
 5667              	 .loc 1 3888 7
 5668 0004 0A4B     	 ldr r3,.L320
 5669 0006 1B68     	 ldr r3,[r3]
 5670              	 .loc 1 3888 20
 5671 0008 002B     	 cmp r3,#0
 5672 000a 14BF     	 ite ne
 5673 000c 0123     	 movne r3,#1
 5674 000e 0023     	 moveq r3,#0
 5675 0010 DBB2     	 uxtb r3,r3
 5676              	 .loc 1 3888 3
 5677 0012 002B     	 cmp r3,#0
 5678 0014 04D0     	 beq .L318
3889:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3890:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5679              	 .loc 1 3890 6
 5680 0016 064B     	 ldr r3,.L320
 5681 0018 1B68     	 ldr r3,[r3]
 5682              	 .loc 1 3890 20
 5683 001a 1A6D     	 ldr r2,[r3,#80]
 5684              	 .loc 1 3890 35
 5685 001c 0132     	 adds r2,r2,#1
 5686 001e 1A65     	 str r2,[r3,#80]
 5687              	.L318:
3891:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3892:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3893:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return pxCurrentTCB;
 5688              	 .loc 1 3893 10
 5689 0020 034B     	 ldr r3,.L320
 5690 0022 1B68     	 ldr r3,[r3]
3894:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5691              	 .loc 1 3894 2
 5692 0024 1846     	 mov r0,r3
 5693 0026 BD46     	 mov sp,r7
 5694              	 .cfi_def_cfa_register 13
 5695              	 
 5696 0028 5DF8047B 	 ldr r7,[sp],#4
 5697              	 .cfi_restore 7
 5698              	 .cfi_def_cfa_offset 0
 5699 002c 7047     	 bx lr
 5700              	.L321:
 5701 002e 00BF     	 .align 2
 5702              	.L320:
 5703 0030 00000000 	 .word pxCurrentTCB
 5704              	 .cfi_endproc
 5705              	.LFE53:
 5706              	 .cantunwind
ARM GAS   			page 176


 5707              	 .fnend
 5708              	 .size pvTaskIncrementMutexHeldCount,.-pvTaskIncrementMutexHeldCount
 5709              	 .section .text.ulTaskNotifyTake,"ax",%progbits
 5710              	 .align 1
 5711              	 .global ulTaskNotifyTake
 5712              	 .syntax unified
 5713              	 .thumb
 5714              	 .thumb_func
 5715              	 .type ulTaskNotifyTake,%function
 5716              	ulTaskNotifyTake:
 5717              	 .fnstart
 5718              	.LFB54:
3895:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3896:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_MUTEXES */
3897:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
3898:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3899:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
3900:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3901:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
3902:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 5719              	 .loc 1 3902 2
 5720              	 .cfi_startproc
 5721              	 
 5722              	 
 5723 0000 80B5     	 push {r7,lr}
 5724              	 .save {r7,lr}
 5725              	 .cfi_def_cfa_offset 8
 5726              	 .cfi_offset 7,-8
 5727              	 .cfi_offset 14,-4
 5728              	 .pad #16
 5729 0002 84B0     	 sub sp,sp,#16
 5730              	 .cfi_def_cfa_offset 24
 5731              	 .setfp r7,sp,#0
 5732 0004 00AF     	 add r7,sp,#0
 5733              	 .cfi_def_cfa_register 7
 5734 0006 7860     	 str r0,[r7,#4]
 5735 0008 3960     	 str r1,[r7]
3903:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TickType_t xTimeToWake;
3904:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	uint32_t ulReturn;
3905:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3906:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 5736              	 .loc 1 3906 3
 5737 000a FFF7FEFF 	 bl vPortEnterCritical
3907:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3908:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Only block if the notification count is not already non-zero. */
3909:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5738              	 .loc 1 3909 8
 5739 000e 364B     	 ldr r3,.L330
 5740 0010 1B68     	 ldr r3,[r3]
 5741              	 .loc 1 3909 22
 5742 0012 5B6D     	 ldr r3,[r3,#84]
 5743              	 .loc 1 3909 38
 5744 0014 002B     	 cmp r3,#0
 5745 0016 0CBF     	 ite eq
 5746 0018 0123     	 moveq r3,#1
 5747 001a 0023     	 movne r3,#0
 5748 001c DBB2     	 uxtb r3,r3
ARM GAS   			page 177


 5749              	 .loc 1 3909 4
 5750 001e 002B     	 cmp r3,#0
 5751 0020 3DD0     	 beq .L323
3910:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3911:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Mark this task as waiting for a notification. */
3912:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 5752              	 .loc 1 3912 5
 5753 0022 314B     	 ldr r3,.L330
 5754 0024 1B68     	 ldr r3,[r3]
 5755              	 .loc 1 3912 32
 5756 0026 0122     	 movs r2,#1
 5757 0028 83F85820 	 strb r2,[r3,#88]
3913:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3914:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5758              	 .loc 1 3914 5
 5759 002c 3B68     	 ldr r3,[r7]
 5760 002e 002B     	 cmp r3,#0
 5761 0030 35D0     	 beq .L323
3915:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3916:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The task is going to block.  First it must be removed
3917:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					from the ready list. */
3918:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 5762              	 .loc 1 3918 27
 5763 0032 2D4B     	 ldr r3,.L330
 5764 0034 1B68     	 ldr r3,[r3]
 5765              	 .loc 1 3918 22
 5766 0036 0433     	 adds r3,r3,#4
 5767 0038 1846     	 mov r0,r3
 5768 003a FFF7FEFF 	 bl uxListRemove
 5769 003e 0346     	 mov r3,r0
 5770              	 .loc 1 3918 62
 5771 0040 002B     	 cmp r3,#0
 5772 0042 0CBF     	 ite eq
 5773 0044 0123     	 moveq r3,#1
 5774 0046 0023     	 movne r3,#0
 5775 0048 DBB2     	 uxtb r3,r3
 5776              	 .loc 1 3918 6
 5777 004a 002B     	 cmp r3,#0
 5778 004c 0BD0     	 beq .L324
3919:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3920:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The current task must be in a ready list, so there is
3921:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						no need to check, and the port reset macro can be called
3922:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						directly. */
3923:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 5779              	 .loc 1 3923 7
 5780 004e 264B     	 ldr r3,.L330
 5781 0050 1B68     	 ldr r3,[r3]
 5782 0052 DB6A     	 ldr r3,[r3,#44]
 5783 0054 0122     	 movs r2,#1
 5784 0056 02FA03F3 	 lsl r3,r2,r3
 5785 005a DA43     	 mvns r2,r3
 5786 005c 234B     	 ldr r3,.L330+4
 5787 005e 1B68     	 ldr r3,[r3]
 5788 0060 1340     	 ands r3,r3,r2
 5789 0062 224A     	 ldr r2,.L330+4
 5790 0064 1360     	 str r3,[r2]
 5791              	.L324:
ARM GAS   			page 178


3924:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3925:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
3926:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3927:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3928:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3929:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3930:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
3931:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3932:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 5792              	 .loc 1 3932 7
 5793 0066 3B68     	 ldr r3,[r7]
 5794 0068 B3F1FF3F 	 cmp r3,#-1
 5795 006c 07D1     	 bne .L325
3933:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
3934:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* Add the task to the suspended task list instead
3935:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							of a delayed task list to ensure the task is not
3936:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							woken by a timing event.  It will block
3937:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							indefinitely. */
3938:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 5796              	 .loc 1 3938 48
 5797 006e 1E4B     	 ldr r3,.L330
 5798 0070 1B68     	 ldr r3,[r3]
 5799              	 .loc 1 3938 22
 5800 0072 0433     	 adds r3,r3,#4
 5801 0074 1946     	 mov r1,r3
 5802 0076 1E48     	 ldr r0,.L330+8
 5803 0078 FFF7FEFF 	 bl vListInsertEnd
 5804 007c 07E0     	 b .L326
 5805              	.L325:
3939:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
3940:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						else
3941:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
3942:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* Calculate the time at which the task should be
3943:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							woken if no notification events occur.  This may
3944:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							overflow but this doesn't matter, the scheduler will
3945:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							handle it. */
3946:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 5806              	 .loc 1 3946 22
 5807 007e 1D4B     	 ldr r3,.L330+12
 5808 0080 1B68     	 ldr r3,[r3]
 5809              	 .loc 1 3946 20
 5810 0082 3A68     	 ldr r2,[r7]
 5811 0084 1344     	 add r3,r3,r2
 5812 0086 FB60     	 str r3,[r7,#12]
3947:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 5813              	 .loc 1 3947 38
 5814 0088 F868     	 ldr r0,[r7,#12]
 5815 008a FFF7FEFF 	 bl _ZL30prvAddCurrentTaskToDelayedListm
 5816              	.L326:
3948:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
3949:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3950:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
3951:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
3952:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* Calculate the time at which the task should be
3953:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							woken if the event does not occur.  This may
3954:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							overflow but this doesn't matter, the scheduler will
3955:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							handle it. */
ARM GAS   			page 179


3956:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3957:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
3958:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
3959:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
3960:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3961:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
3962:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3963:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* All ports are written to allow a yield in a critical
3964:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					section (some will yield immediately, others wait until the
3965:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					critical section exits) - but it is not something that
3966:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					application code should ever do. */
3967:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					portYIELD_WITHIN_API();
 5817              	 .loc 1 3967 6
 5818 008e 1A4B     	 ldr r3,.L330+16
 5819 0090 4FF08052 	 mov r2,#268435456
 5820 0094 1A60     	 str r2,[r3]
 5821              	 .syntax unified
 5822              	
 5823 0096 BFF34F8F 	 dsb
 5824              	
 5825              	
 5826 009a BFF36F8F 	 isb
 5827              	
 5828              	 .thumb
 5829              	 .syntax unified
 5830              	.L323:
3968:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3969:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
3970:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3971:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3972:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3973:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3974:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3975:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3976:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3977:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3978:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
3979:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 5831              	 .loc 1 3979 3
 5832 009e FFF7FEFF 	 bl vPortExitCritical
3980:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3981:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 5833              	 .loc 1 3981 3
 5834 00a2 FFF7FEFF 	 bl vPortEnterCritical
3982:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
3983:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_NOTIFY_TAKE();
3984:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5835              	 .loc 1 3984 15
 5836 00a6 104B     	 ldr r3,.L330
 5837 00a8 1B68     	 ldr r3,[r3]
 5838              	 .loc 1 3984 13
 5839 00aa 5B6D     	 ldr r3,[r3,#84]
 5840 00ac BB60     	 str r3,[r7,#8]
3985:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
3986:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( ulReturn != 0UL )
 5841              	 .loc 1 3986 4
 5842 00ae BB68     	 ldr r3,[r7,#8]
ARM GAS   			page 180


 5843 00b0 002B     	 cmp r3,#0
 5844 00b2 0CD0     	 beq .L327
3987:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3988:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5845              	 .loc 1 3988 5
 5846 00b4 7B68     	 ldr r3,[r7,#4]
 5847 00b6 002B     	 cmp r3,#0
 5848 00b8 04D0     	 beq .L328
3989:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3990:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5849              	 .loc 1 3990 6
 5850 00ba 0B4B     	 ldr r3,.L330
 5851 00bc 1B68     	 ldr r3,[r3]
 5852              	 .loc 1 3990 36
 5853 00be 0022     	 movs r2,#0
 5854 00c0 5A65     	 str r2,[r3,#84]
 5855 00c2 04E0     	 b .L327
 5856              	.L328:
3991:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3992:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
3993:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
3994:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( pxCurrentTCB->ulNotifiedValue )--;
 5857              	 .loc 1 3994 8
 5858 00c4 084B     	 ldr r3,.L330
 5859 00c6 1B68     	 ldr r3,[r3]
 5860              	 .loc 1 3994 22
 5861 00c8 5A6D     	 ldr r2,[r3,#84]
 5862              	 .loc 1 3994 39
 5863 00ca 013A     	 subs r2,r2,#1
 5864 00cc 5A65     	 str r2,[r3,#84]
 5865              	.L327:
3995:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
3996:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
3997:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
3998:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
3999:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4000:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4001:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4002:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 5866              	 .loc 1 4002 4
 5867 00ce 064B     	 ldr r3,.L330
 5868 00d0 1B68     	 ldr r3,[r3]
 5869              	 .loc 1 4002 31
 5870 00d2 0022     	 movs r2,#0
 5871 00d4 83F85820 	 strb r2,[r3,#88]
4003:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
4004:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 5872              	 .loc 1 4004 3
 5873 00d8 FFF7FEFF 	 bl vPortExitCritical
4005:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4006:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return ulReturn;
 5874              	 .loc 1 4006 10
 5875 00dc BB68     	 ldr r3,[r7,#8]
4007:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 5876              	 .loc 1 4007 2
 5877 00de 1846     	 mov r0,r3
 5878 00e0 1037     	 adds r7,r7,#16
ARM GAS   			page 181


 5879              	 .cfi_def_cfa_offset 8
 5880 00e2 BD46     	 mov sp,r7
 5881              	 .cfi_def_cfa_register 13
 5882              	 
 5883 00e4 80BD     	 pop {r7,pc}
 5884              	.L331:
 5885 00e6 00BF     	 .align 2
 5886              	.L330:
 5887 00e8 00000000 	 .word pxCurrentTCB
 5888 00ec 00000000 	 .word _ZL18uxTopReadyPriority
 5889 00f0 00000000 	 .word _ZL18xSuspendedTaskList
 5890 00f4 00000000 	 .word _ZL10xTickCount
 5891 00f8 04ED00E0 	 .word -536810236
 5892              	 .cfi_endproc
 5893              	.LFE54:
 5894              	 .fnend
 5895              	 .size ulTaskNotifyTake,.-ulTaskNotifyTake
 5896              	 .section .text.xTaskNotifyWait,"ax",%progbits
 5897              	 .align 1
 5898              	 .global xTaskNotifyWait
 5899              	 .syntax unified
 5900              	 .thumb
 5901              	 .thumb_func
 5902              	 .type xTaskNotifyWait,%function
 5903              	xTaskNotifyWait:
 5904              	 .fnstart
 5905              	.LFB55:
4008:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4009:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4010:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
4011:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4012:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4013:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4014:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4015:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 5906              	 .loc 1 4015 2
 5907              	 .cfi_startproc
 5908              	 
 5909              	 
 5910 0000 80B5     	 push {r7,lr}
 5911              	 .save {r7,lr}
 5912              	 .cfi_def_cfa_offset 8
 5913              	 .cfi_offset 7,-8
 5914              	 .cfi_offset 14,-4
 5915              	 .pad #24
 5916 0002 86B0     	 sub sp,sp,#24
 5917              	 .cfi_def_cfa_offset 32
 5918              	 .setfp r7,sp,#0
 5919 0004 00AF     	 add r7,sp,#0
 5920              	 .cfi_def_cfa_register 7
 5921 0006 F860     	 str r0,[r7,#12]
 5922 0008 B960     	 str r1,[r7,#8]
 5923 000a 7A60     	 str r2,[r7,#4]
 5924 000c 3B60     	 str r3,[r7]
4016:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TickType_t xTimeToWake;
4017:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn;
4018:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 182


4019:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 5925              	 .loc 1 4019 3
 5926 000e FFF7FEFF 	 bl vPortEnterCritical
4020:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
4021:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* Only block if a notification is not already pending. */
4022:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxCurrentTCB->eNotifyState != eNotified )
 5927              	 .loc 1 4022 8
 5928 0012 404B     	 ldr r3,.L341
 5929 0014 1B68     	 ldr r3,[r3]
 5930              	 .loc 1 4022 22
 5931 0016 93F85830 	 ldrb r3,[r3,#88]
 5932 001a DBB2     	 uxtb r3,r3
 5933              	 .loc 1 4022 35
 5934 001c 022B     	 cmp r3,#2
 5935 001e 14BF     	 ite ne
 5936 0020 0123     	 movne r3,#1
 5937 0022 0023     	 moveq r3,#0
 5938 0024 DBB2     	 uxtb r3,r3
 5939              	 .loc 1 4022 4
 5940 0026 002B     	 cmp r3,#0
 5941 0028 44D0     	 beq .L333
4023:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4024:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4025:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4026:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				clear the value to zero. */
4027:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5942              	 .loc 1 4027 35
 5943 002a 3A4B     	 ldr r3,.L341
 5944 002c 1B68     	 ldr r3,[r3]
 5945 002e 596D     	 ldr r1,[r3,#84]
 5946              	 .loc 1 4027 38
 5947 0030 FA68     	 ldr r2,[r7,#12]
 5948 0032 D243     	 mvns r2,r2
 5949              	 .loc 1 4027 35
 5950 0034 0A40     	 ands r2,r2,r1
 5951 0036 5A65     	 str r2,[r3,#84]
4028:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4029:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Mark this task as waiting for a notification. */
4030:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 5952              	 .loc 1 4030 5
 5953 0038 364B     	 ldr r3,.L341
 5954 003a 1B68     	 ldr r3,[r3]
 5955              	 .loc 1 4030 32
 5956 003c 0122     	 movs r2,#1
 5957 003e 83F85820 	 strb r2,[r3,#88]
4031:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4032:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5958              	 .loc 1 4032 5
 5959 0042 3B68     	 ldr r3,[r7]
 5960 0044 002B     	 cmp r3,#0
 5961 0046 35D0     	 beq .L333
4033:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4034:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The task is going to block.  First it must be removed
4035:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					from the	ready list. */
4036:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 5962              	 .loc 1 4036 27
 5963 0048 324B     	 ldr r3,.L341
ARM GAS   			page 183


 5964 004a 1B68     	 ldr r3,[r3]
 5965              	 .loc 1 4036 22
 5966 004c 0433     	 adds r3,r3,#4
 5967 004e 1846     	 mov r0,r3
 5968 0050 FFF7FEFF 	 bl uxListRemove
 5969 0054 0346     	 mov r3,r0
 5970              	 .loc 1 4036 62
 5971 0056 002B     	 cmp r3,#0
 5972 0058 0CBF     	 ite eq
 5973 005a 0123     	 moveq r3,#1
 5974 005c 0023     	 movne r3,#0
 5975 005e DBB2     	 uxtb r3,r3
 5976              	 .loc 1 4036 6
 5977 0060 002B     	 cmp r3,#0
 5978 0062 0BD0     	 beq .L334
4037:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4038:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The current task must be in a ready list, so there is
4039:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						no need to check, and the port reset macro can be called
4040:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						directly. */
4041:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 5979              	 .loc 1 4041 7
 5980 0064 2B4B     	 ldr r3,.L341
 5981 0066 1B68     	 ldr r3,[r3]
 5982 0068 DB6A     	 ldr r3,[r3,#44]
 5983 006a 0122     	 movs r2,#1
 5984 006c 02FA03F3 	 lsl r3,r2,r3
 5985 0070 DA43     	 mvns r2,r3
 5986 0072 294B     	 ldr r3,.L341+4
 5987 0074 1B68     	 ldr r3,[r3]
 5988 0076 1340     	 ands r3,r3,r2
 5989 0078 274A     	 ldr r2,.L341+4
 5990 007a 1360     	 str r3,[r2]
 5991              	.L334:
4042:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4043:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
4044:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4045:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4046:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4047:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4048:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
4049:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4050:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 5992              	 .loc 1 4050 7
 5993 007c 3B68     	 ldr r3,[r7]
 5994 007e B3F1FF3F 	 cmp r3,#-1
 5995 0082 07D1     	 bne .L335
4051:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
4052:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* Add the task to the suspended task list instead
4053:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							of a delayed task list to ensure the task is not
4054:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							woken by a timing event.  It will block
4055:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							indefinitely. */
4056:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 5996              	 .loc 1 4056 48
 5997 0084 234B     	 ldr r3,.L341
 5998 0086 1B68     	 ldr r3,[r3]
 5999              	 .loc 1 4056 22
 6000 0088 0433     	 adds r3,r3,#4
ARM GAS   			page 184


 6001 008a 1946     	 mov r1,r3
 6002 008c 2348     	 ldr r0,.L341+8
 6003 008e FFF7FEFF 	 bl vListInsertEnd
 6004 0092 07E0     	 b .L336
 6005              	.L335:
4057:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
4058:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						else
4059:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						{
4060:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* Calculate the time at which the task should be
4061:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							woken if no notification events occur.  This may
4062:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							overflow but this doesn't matter, the scheduler will
4063:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							handle it. */
4064:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 6006              	 .loc 1 4064 22
 6007 0094 224B     	 ldr r3,.L341+12
 6008 0096 1B68     	 ldr r3,[r3]
 6009              	 .loc 1 4064 20
 6010 0098 3A68     	 ldr r2,[r7]
 6011 009a 1344     	 add r3,r3,r2
 6012 009c 3B61     	 str r3,[r7,#16]
4065:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 6013              	 .loc 1 4065 38
 6014 009e 3869     	 ldr r0,[r7,#16]
 6015 00a0 FFF7FEFF 	 bl _ZL30prvAddCurrentTaskToDelayedListm
 6016              	.L336:
4066:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						}
4067:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4068:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
4069:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4070:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							/* Calculate the time at which the task should be
4071:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							woken if the event does not occur.  This may
4072:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							overflow but this doesn't matter, the scheduler will
4073:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							handle it. */
4074:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4075:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4076:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4077:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
4078:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4079:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4080:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4081:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* All ports are written to allow a yield in a critical
4082:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					section (some will yield immediately, others wait until the
4083:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					critical section exits) - but it is not something that
4084:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					application code should ever do. */
4085:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					portYIELD_WITHIN_API();
 6017              	 .loc 1 4085 6
 6018 00a4 1F4B     	 ldr r3,.L341+16
 6019 00a6 4FF08052 	 mov r2,#268435456
 6020 00aa 1A60     	 str r2,[r3]
 6021              	 .syntax unified
 6022              	
 6023 00ac BFF34F8F 	 dsb
 6024              	
 6025              	
 6026 00b0 BFF36F8F 	 isb
 6027              	
 6028              	 .thumb
ARM GAS   			page 185


 6029              	 .syntax unified
 6030              	.L333:
4086:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4087:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
4088:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4089:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4090:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4091:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4092:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
4093:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4094:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4095:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4096:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
4097:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 6031              	 .loc 1 4097 3
 6032 00b4 FFF7FEFF 	 bl vPortExitCritical
4098:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4099:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 6033              	 .loc 1 4099 3
 6034 00b8 FFF7FEFF 	 bl vPortEnterCritical
4100:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
4101:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_NOTIFY_WAIT();
4102:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4103:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pulNotificationValue != NULL )
 6035              	 .loc 1 4103 4
 6036 00bc 7B68     	 ldr r3,[r7,#4]
 6037 00be 002B     	 cmp r3,#0
 6038 00c0 04D0     	 beq .L337
4104:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4105:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* Output the current notification value, which may or may not
4106:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				have changed. */
4107:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6039              	 .loc 1 4107 29
 6040 00c2 144B     	 ldr r3,.L341
 6041 00c4 1B68     	 ldr r3,[r3]
 6042              	 .loc 1 4107 43
 6043 00c6 5A6D     	 ldr r2,[r3,#84]
 6044              	 .loc 1 4107 27
 6045 00c8 7B68     	 ldr r3,[r7,#4]
 6046 00ca 1A60     	 str r2,[r3]
 6047              	.L337:
4108:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4109:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4110:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If eNotifyValue is set then either the task never entered the
4111:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			blocked state (because a notification was already pending) or the
4112:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4113:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			unblocked because of a timeout. */
4114:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 6048              	 .loc 1 4114 8
 6049 00cc 114B     	 ldr r3,.L341
 6050 00ce 1B68     	 ldr r3,[r3]
 6051              	 .loc 1 4114 22
 6052 00d0 93F85830 	 ldrb r3,[r3,#88]
 6053 00d4 DBB2     	 uxtb r3,r3
 6054              	 .loc 1 4114 35
 6055 00d6 012B     	 cmp r3,#1
 6056 00d8 0CBF     	 ite eq
ARM GAS   			page 186


 6057 00da 0123     	 moveq r3,#1
 6058 00dc 0023     	 movne r3,#0
 6059 00de DBB2     	 uxtb r3,r3
 6060              	 .loc 1 4114 4
 6061 00e0 002B     	 cmp r3,#0
 6062 00e2 02D0     	 beq .L338
4115:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4116:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* A notification was not received. */
4117:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xReturn = pdFALSE;
 6063              	 .loc 1 4117 13
 6064 00e4 0023     	 movs r3,#0
 6065 00e6 7B61     	 str r3,[r7,#20]
 6066 00e8 08E0     	 b .L339
 6067              	.L338:
4118:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4119:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
4120:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4121:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* A notification was already pending or a notification was
4122:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				received while the task was waiting. */
4123:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6068              	 .loc 1 4123 35
 6069 00ea 0A4B     	 ldr r3,.L341
 6070 00ec 1B68     	 ldr r3,[r3]
 6071 00ee 596D     	 ldr r1,[r3,#84]
 6072              	 .loc 1 4123 38
 6073 00f0 BA68     	 ldr r2,[r7,#8]
 6074 00f2 D243     	 mvns r2,r2
 6075              	 .loc 1 4123 35
 6076 00f4 0A40     	 ands r2,r2,r1
 6077 00f6 5A65     	 str r2,[r3,#84]
4124:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xReturn = pdTRUE;
 6078              	 .loc 1 4124 13
 6079 00f8 0123     	 movs r3,#1
 6080 00fa 7B61     	 str r3,[r7,#20]
 6081              	.L339:
4125:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4126:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4127:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 6082              	 .loc 1 4127 4
 6083 00fc 054B     	 ldr r3,.L341
 6084 00fe 1B68     	 ldr r3,[r3]
 6085              	 .loc 1 4127 31
 6086 0100 0022     	 movs r2,#0
 6087 0102 83F85820 	 strb r2,[r3,#88]
4128:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
4129:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 6088              	 .loc 1 4129 3
 6089 0106 FFF7FEFF 	 bl vPortExitCritical
4130:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4131:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 6090              	 .loc 1 4131 10
 6091 010a 7B69     	 ldr r3,[r7,#20]
4132:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 6092              	 .loc 1 4132 2
 6093 010c 1846     	 mov r0,r3
 6094 010e 1837     	 adds r7,r7,#24
 6095              	 .cfi_def_cfa_offset 8
ARM GAS   			page 187


 6096 0110 BD46     	 mov sp,r7
 6097              	 .cfi_def_cfa_register 13
 6098              	 
 6099 0112 80BD     	 pop {r7,pc}
 6100              	.L342:
 6101              	 .align 2
 6102              	.L341:
 6103 0114 00000000 	 .word pxCurrentTCB
 6104 0118 00000000 	 .word _ZL18uxTopReadyPriority
 6105 011c 00000000 	 .word _ZL18xSuspendedTaskList
 6106 0120 00000000 	 .word _ZL10xTickCount
 6107 0124 04ED00E0 	 .word -536810236
 6108              	 .cfi_endproc
 6109              	.LFE55:
 6110              	 .fnend
 6111              	 .size xTaskNotifyWait,.-xTaskNotifyWait
 6112              	 .section .text.xTaskGenericNotify,"ax",%progbits
 6113              	 .align 1
 6114              	 .global xTaskGenericNotify
 6115              	 .syntax unified
 6116              	 .thumb
 6117              	 .thumb_func
 6118              	 .type xTaskGenericNotify,%function
 6119              	xTaskGenericNotify:
 6120              	 .fnstart
 6121              	.LFB56:
4133:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4134:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4135:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
4136:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4137:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4138:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4139:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4140:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 6122              	 .loc 1 4140 2
 6123              	 .cfi_startproc
 6124              	 
 6125              	 
 6126 0000 80B5     	 push {r7,lr}
 6127              	 .save {r7,lr}
 6128              	 .cfi_def_cfa_offset 8
 6129              	 .cfi_offset 7,-8
 6130              	 .cfi_offset 14,-4
 6131              	 .pad #40
 6132 0002 8AB0     	 sub sp,sp,#40
 6133              	 .cfi_def_cfa_offset 48
 6134              	 .setfp r7,sp,#0
 6135 0004 00AF     	 add r7,sp,#0
 6136              	 .cfi_def_cfa_register 7
 6137 0006 F860     	 str r0,[r7,#12]
 6138 0008 B960     	 str r1,[r7,#8]
 6139 000a 3B60     	 str r3,[r7]
 6140 000c 1346     	 mov r3,r2
 6141 000e FB71     	 strb r3,[r7,#7]
4141:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t * pxTCB;
4142:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eNotifyValue eOriginalNotifyState;
4143:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn = pdPASS;
ARM GAS   			page 188


 6142              	 .loc 1 4143 13
 6143 0010 0123     	 movs r3,#1
 6144 0012 7B62     	 str r3,[r7,#36]
4144:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4145:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( xTaskToNotify );
 6145              	 .loc 1 4145 3
 6146 0014 FB68     	 ldr r3,[r7,#12]
 6147 0016 002B     	 cmp r3,#0
 6148 0018 0AD1     	 bne .L344
 6149              	.LBB175:
 6150              	.LBB176:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6151              	 .loc 2 215 2
 6152              	 .syntax unified
 6153              	
 6154 001a 4FF01003 	 mov r3,#16
 6155 001e 83F31188 	 msr basepri,r3
 6156 0022 BFF36F8F 	 isb 
 6157 0026 BFF34F8F 	 dsb 
 6158              	
 6159              	
 6160              	 .thumb
 6161              	 .syntax unified
 6162 002a BB61     	 str r3,[r7,#24]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 6163              	 .loc 2 223 1
 6164 002c 00BF     	 nop
 6165              	.L345:
 6166              	.LBE176:
 6167              	.LBE175:
 6168              	 .loc 1 4145 3 discriminator 1
 6169 002e FEE7     	 b .L345
 6170              	.L344:
4146:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6171              	 .loc 1 4146 9
 6172 0030 FB68     	 ldr r3,[r7,#12]
 6173 0032 3B62     	 str r3,[r7,#32]
4147:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4148:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 6174              	 .loc 1 4148 3
 6175 0034 FFF7FEFF 	 bl vPortEnterCritical
4149:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
4150:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6176              	 .loc 1 4150 4
 6177 0038 3B68     	 ldr r3,[r7]
 6178 003a 002B     	 cmp r3,#0
 6179 003c 03D0     	 beq .L346
4151:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4152:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6180              	 .loc 1 4152 44
 6181 003e 3B6A     	 ldr r3,[r7,#32]
 6182 0040 5A6D     	 ldr r2,[r3,#84]
 6183              	 .loc 1 4152 35
 6184 0042 3B68     	 ldr r3,[r7]
 6185 0044 1A60     	 str r2,[r3]
 6186              	.L346:
4153:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
ARM GAS   			page 189


4154:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4155:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 6187              	 .loc 1 4155 25
 6188 0046 3B6A     	 ldr r3,[r7,#32]
 6189 0048 93F85830 	 ldrb r3,[r3,#88]
 6190 004c FB77     	 strb r3,[r7,#31]
4156:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4157:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB->eNotifyState = eNotified;
 6191              	 .loc 1 4157 24
 6192 004e 3B6A     	 ldr r3,[r7,#32]
 6193 0050 0222     	 movs r2,#2
 6194 0052 83F85820 	 strb r2,[r3,#88]
4158:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4159:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			switch( eAction )
 6195              	 .loc 1 4159 12
 6196 0056 FB79     	 ldrb r3,[r7,#7]
 6197              	 .loc 1 4159 4
 6198 0058 042B     	 cmp r3,#4
 6199 005a 28D8     	 bhi .L347
 6200 005c 01A2     	 adr r2,.L349
 6201 005e 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6202 0062 00BF     	 .p2align 2
 6203              	.L349:
 6204 0064 AF000000 	 .word .L347+1
 6205 0068 79000000 	 .word .L352+1
 6206 006c 87000000 	 .word .L351+1
 6207 0070 93000000 	 .word .L350+1
 6208 0074 9B000000 	 .word .L348+1
 6209              	 .p2align 1
 6210              	.L352:
4160:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4161:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eSetBits	:
4162:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6211              	 .loc 1 4162 29
 6212 0078 3B6A     	 ldr r3,[r7,#32]
 6213 007a 5A6D     	 ldr r2,[r3,#84]
 6214 007c BB68     	 ldr r3,[r7,#8]
 6215 007e 1A43     	 orrs r2,r2,r3
 6216 0080 3B6A     	 ldr r3,[r7,#32]
 6217 0082 5A65     	 str r2,[r3,#84]
4163:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6218              	 .loc 1 4163 6
 6219 0084 13E0     	 b .L347
 6220              	.L351:
4164:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4165:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eIncrement	:
4166:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6221              	 .loc 1 4166 15
 6222 0086 3B6A     	 ldr r3,[r7,#32]
 6223 0088 5B6D     	 ldr r3,[r3,#84]
 6224              	 .loc 1 4166 32
 6225 008a 5A1C     	 adds r2,r3,#1
 6226 008c 3B6A     	 ldr r3,[r7,#32]
 6227 008e 5A65     	 str r2,[r3,#84]
4167:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6228              	 .loc 1 4167 6
 6229 0090 0DE0     	 b .L347
ARM GAS   			page 190


 6230              	.L350:
4168:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4169:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eSetValueWithOverwrite	:
4170:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6231              	 .loc 1 4170 29
 6232 0092 3B6A     	 ldr r3,[r7,#32]
 6233 0094 BA68     	 ldr r2,[r7,#8]
 6234 0096 5A65     	 str r2,[r3,#84]
4171:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6235              	 .loc 1 4171 6
 6236 0098 09E0     	 b .L347
 6237              	.L348:
4172:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4173:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eSetValueWithoutOverwrite :
4174:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( eOriginalNotifyState != eNotified )
 6238              	 .loc 1 4174 6
 6239 009a FB7F     	 ldrb r3,[r7,#31]
 6240 009c 022B     	 cmp r3,#2
 6241 009e 03D0     	 beq .L354
4175:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4176:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6242              	 .loc 1 4176 30
 6243 00a0 3B6A     	 ldr r3,[r7,#32]
 6244 00a2 BA68     	 ldr r2,[r7,#8]
 6245 00a4 5A65     	 str r2,[r3,#84]
4177:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4178:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
4179:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4180:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The value could not be written to the task. */
4181:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						xReturn = pdFAIL;
4182:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4183:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6246              	 .loc 1 4183 6
 6247 00a6 01E0     	 b .L360
 6248              	.L354:
4181:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
 6249              	 .loc 1 4181 15
 6250 00a8 0023     	 movs r3,#0
 6251 00aa 7B62     	 str r3,[r7,#36]
 6252              	.L360:
 6253              	 .loc 1 4183 6
 6254 00ac 00BF     	 nop
 6255              	.L347:
4184:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4185:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eNoAction:
4186:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The task is being notified without its notify value being
4187:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					updated. */
4188:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
4189:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4190:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4191:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_NOTIFY();
4192:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4193:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4194:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			notification then unblock it now. */
4195:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 6256              	 .loc 1 4195 4
 6257 00ae FB7F     	 ldrb r3,[r7,#31]
ARM GAS   			page 191


 6258 00b0 012B     	 cmp r3,#1
 6259 00b2 3FD1     	 bne .L356
4196:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4197:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 6260              	 .loc 1 4197 26
 6261 00b4 3B6A     	 ldr r3,[r7,#32]
 6262 00b6 0433     	 adds r3,r3,#4
 6263 00b8 1846     	 mov r0,r3
 6264 00ba FFF7FEFF 	 bl uxListRemove
4198:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6265              	 .loc 1 4198 5
 6266 00be 214B     	 ldr r3,.L361
 6267 00c0 1A68     	 ldr r2,[r3]
 6268 00c2 3B6A     	 ldr r3,[r7,#32]
 6269 00c4 DB6A     	 ldr r3,[r3,#44]
 6270 00c6 0121     	 movs r1,#1
 6271 00c8 01FA03F3 	 lsl r3,r1,r3
 6272 00cc 1343     	 orrs r3,r3,r2
 6273 00ce 1D4A     	 ldr r2,.L361
 6274 00d0 1360     	 str r3,[r2]
 6275 00d2 3B6A     	 ldr r3,[r7,#32]
 6276 00d4 DA6A     	 ldr r2,[r3,#44]
 6277 00d6 1346     	 mov r3,r2
 6278 00d8 9B00     	 lsls r3,r3,#2
 6279 00da 1344     	 add r3,r3,r2
 6280 00dc 9B00     	 lsls r3,r3,#2
 6281 00de 1A4A     	 ldr r2,.L361+4
 6282 00e0 1A44     	 add r2,r2,r3
 6283 00e2 3B6A     	 ldr r3,[r7,#32]
 6284 00e4 0433     	 adds r3,r3,#4
 6285 00e6 1946     	 mov r1,r3
 6286 00e8 1046     	 mov r0,r2
 6287 00ea FFF7FEFF 	 bl vListInsertEnd
4199:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4200:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The task should not have been on an event list. */
4201:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6288              	 .loc 1 4201 5
 6289 00ee 3B6A     	 ldr r3,[r7,#32]
 6290 00f0 9B6A     	 ldr r3,[r3,#40]
 6291 00f2 002B     	 cmp r3,#0
 6292 00f4 0AD0     	 beq .L357
 6293              	.LBB177:
 6294              	.LBB178:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6295              	 .loc 2 215 2
 6296              	 .syntax unified
 6297              	
 6298 00f6 4FF01003 	 mov r3,#16
 6299 00fa 83F31188 	 msr basepri,r3
 6300 00fe BFF36F8F 	 isb 
 6301 0102 BFF34F8F 	 dsb 
 6302              	
 6303              	
 6304              	 .thumb
 6305              	 .syntax unified
 6306 0106 7B61     	 str r3,[r7,#20]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
ARM GAS   			page 192


 6307              	 .loc 2 223 1
 6308 0108 00BF     	 nop
 6309              	.L358:
 6310              	.LBE178:
 6311              	.LBE177:
 6312              	 .loc 1 4201 5 discriminator 2
 6313 010a FEE7     	 b .L358
 6314              	.L357:
4202:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4203:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4204:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4205:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* If a task is blocked waiting for a notification then
4206:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4207:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					out time.  If the task is unblocked for a reason other than
4208:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4209:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					because it will automatically get reset to a new value when
4210:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4211:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					tickless idling is used it might be more important to enter
4212:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					sleep mode at the earliest possible time - so reset
4213:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4214:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					earliest possible time. */
4215:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvResetNextTaskUnblockTime();
4216:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4217:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				#endif
4218:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4219:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6315              	 .loc 1 4219 16
 6316 010c 3B6A     	 ldr r3,[r7,#32]
 6317 010e DA6A     	 ldr r2,[r3,#44]
 6318              	 .loc 1 4219 29
 6319 0110 0E4B     	 ldr r3,.L361+8
 6320 0112 1B68     	 ldr r3,[r3]
 6321              	 .loc 1 4219 43
 6322 0114 DB6A     	 ldr r3,[r3,#44]
 6323              	 .loc 1 4219 27
 6324 0116 9A42     	 cmp r2,r3
 6325 0118 8CBF     	 ite hi
 6326 011a 0123     	 movhi r3,#1
 6327 011c 0023     	 movls r3,#0
 6328 011e DBB2     	 uxtb r3,r3
 6329              	 .loc 1 4219 5
 6330 0120 002B     	 cmp r3,#0
 6331 0122 07D0     	 beq .L356
4220:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4221:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The notified task has a priority above the currently
4222:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					executing task so a yield is required. */
4223:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 6332              	 .loc 1 4223 6
 6333 0124 0A4B     	 ldr r3,.L361+12
 6334 0126 4FF08052 	 mov r2,#268435456
 6335 012a 1A60     	 str r2,[r3]
 6336              	 .syntax unified
 6337              	
 6338 012c BFF34F8F 	 dsb
 6339              	
 6340              	
 6341 0130 BFF36F8F 	 isb
ARM GAS   			page 193


 6342              	
 6343              	 .thumb
 6344              	 .syntax unified
 6345              	.L356:
4224:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4225:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
4226:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4227:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4228:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4229:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4230:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
4231:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4232:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4233:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4234:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
4235:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 6346              	 .loc 1 4235 3
 6347 0134 FFF7FEFF 	 bl vPortExitCritical
4236:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4237:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 6348              	 .loc 1 4237 10
 6349 0138 7B6A     	 ldr r3,[r7,#36]
4238:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 6350              	 .loc 1 4238 2
 6351 013a 1846     	 mov r0,r3
 6352 013c 2837     	 adds r7,r7,#40
 6353              	 .cfi_def_cfa_offset 8
 6354 013e BD46     	 mov sp,r7
 6355              	 .cfi_def_cfa_register 13
 6356              	 
 6357 0140 80BD     	 pop {r7,pc}
 6358              	.L362:
 6359 0142 00BF     	 .align 2
 6360              	.L361:
 6361 0144 00000000 	 .word _ZL18uxTopReadyPriority
 6362 0148 00000000 	 .word _ZL17pxReadyTasksLists
 6363 014c 00000000 	 .word pxCurrentTCB
 6364 0150 04ED00E0 	 .word -536810236
 6365              	 .cfi_endproc
 6366              	.LFE56:
 6367              	 .fnend
 6368              	 .size xTaskGenericNotify,.-xTaskGenericNotify
 6369              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 6370              	 .align 1
 6371              	 .global xTaskGenericNotifyFromISR
 6372              	 .syntax unified
 6373              	 .thumb
 6374              	 .thumb_func
 6375              	 .type xTaskGenericNotifyFromISR,%function
 6376              	xTaskGenericNotifyFromISR:
 6377              	 .fnstart
 6378              	.LFB57:
4239:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4240:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4241:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
4242:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4243:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS   			page 194


4244:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4245:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4246:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 6379              	 .loc 1 4246 2
 6380              	 .cfi_startproc
 6381              	 
 6382              	 
 6383 0000 80B5     	 push {r7,lr}
 6384              	 .save {r7,lr}
 6385              	 .cfi_def_cfa_offset 8
 6386              	 .cfi_offset 7,-8
 6387              	 .cfi_offset 14,-4
 6388              	 .pad #56
 6389 0002 8EB0     	 sub sp,sp,#56
 6390              	 .cfi_def_cfa_offset 64
 6391              	 .setfp r7,sp,#0
 6392 0004 00AF     	 add r7,sp,#0
 6393              	 .cfi_def_cfa_register 7
 6394 0006 F860     	 str r0,[r7,#12]
 6395 0008 B960     	 str r1,[r7,#8]
 6396 000a 3B60     	 str r3,[r7]
 6397 000c 1346     	 mov r3,r2
 6398 000e FB71     	 strb r3,[r7,#7]
4247:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t * pxTCB;
4248:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eNotifyValue eOriginalNotifyState;
4249:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn = pdPASS;
 6399              	 .loc 1 4249 13
 6400 0010 0123     	 movs r3,#1
 6401 0012 7B63     	 str r3,[r7,#52]
4250:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4251:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4252:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( xTaskToNotify );
 6402              	 .loc 1 4252 3
 6403 0014 FB68     	 ldr r3,[r7,#12]
 6404 0016 002B     	 cmp r3,#0
 6405 0018 0AD1     	 bne .L364
 6406              	.LBB179:
 6407              	.LBB180:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6408              	 .loc 2 215 2
 6409              	 .syntax unified
 6410              	
 6411 001a 4FF01003 	 mov r3,#16
 6412 001e 83F31188 	 msr basepri,r3
 6413 0022 BFF36F8F 	 isb 
 6414 0026 BFF34F8F 	 dsb 
 6415              	
 6416              	
 6417              	 .thumb
 6418              	 .syntax unified
 6419 002a 7B62     	 str r3,[r7,#36]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 6420              	 .loc 2 223 1
 6421 002c 00BF     	 nop
 6422              	.L365:
 6423              	.LBE180:
 6424              	.LBE179:
ARM GAS   			page 195


 6425              	 .loc 1 4252 3 discriminator 1
 6426 002e FEE7     	 b .L365
 6427              	.L364:
4253:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4254:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4255:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4256:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4257:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4258:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4259:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		is defined in FreeRTOSConfig.h then
4260:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4261:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4262:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		been assigned a priority above the configured maximum system call
4263:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4264:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4265:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4266:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4267:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4268:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		provided on the following link:
4269:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4270:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6428              	 .loc 1 4270 3
 6429 0030 FFF7FEFF 	 bl vPortValidateInterruptPriority
4271:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4272:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6430              	 .loc 1 4272 9
 6431 0034 FB68     	 ldr r3,[r7,#12]
 6432 0036 3B63     	 str r3,[r7,#48]
 6433              	.LBB181:
 6434              	.LBB182:
 231:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6435              	 .loc 2 231 2
 6436              	 .syntax unified
 6437              	
 6438 0038 EFF31182 	 mrs r2,basepri
 6439 003c 4FF01003 	 mov r3,#16
 6440 0040 83F31188 	 msr basepri,r3
 6441 0044 BFF36F8F 	 isb 
 6442 0048 BFF34F8F 	 dsb 
 6443              	
 6444              	
 6445              	 .thumb
 6446              	 .syntax unified
 6447 004c 3A62     	 str r2,[r7,#32]
 6448 004e FB61     	 str r3,[r7,#28]
 243:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 6449              	 .loc 2 243 9
 6450 0050 3B6A     	 ldr r3,[r7,#32]
 6451              	.LBE182:
 6452              	.LBE181:
4273:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4274:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6453              	 .loc 1 4274 28
 6454 0052 FB62     	 str r3,[r7,#44]
4275:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
4276:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 6455              	 .loc 1 4276 4
ARM GAS   			page 196


 6456 0054 3B68     	 ldr r3,[r7]
 6457 0056 002B     	 cmp r3,#0
 6458 0058 03D0     	 beq .L367
4277:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4278:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 6459              	 .loc 1 4278 44
 6460 005a 3B6B     	 ldr r3,[r7,#48]
 6461 005c 5A6D     	 ldr r2,[r3,#84]
 6462              	 .loc 1 4278 35
 6463 005e 3B68     	 ldr r3,[r7]
 6464 0060 1A60     	 str r2,[r3]
 6465              	.L367:
4279:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4280:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4281:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 6466              	 .loc 1 4281 25
 6467 0062 3B6B     	 ldr r3,[r7,#48]
 6468 0064 93F85830 	 ldrb r3,[r3,#88]
 6469 0068 87F82B30 	 strb r3,[r7,#43]
4282:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB->eNotifyState = eNotified;
 6470              	 .loc 1 4282 24
 6471 006c 3B6B     	 ldr r3,[r7,#48]
 6472 006e 0222     	 movs r2,#2
 6473 0070 83F85820 	 strb r2,[r3,#88]
4283:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4284:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			switch( eAction )
 6474              	 .loc 1 4284 12
 6475 0074 FB79     	 ldrb r3,[r7,#7]
 6476              	 .loc 1 4284 4
 6477 0076 042B     	 cmp r3,#4
 6478 0078 28D8     	 bhi .L368
 6479 007a 01A2     	 adr r2,.L370
 6480 007c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6481              	 .p2align 2
 6482              	.L370:
 6483 0080 CD000000 	 .word .L368+1
 6484 0084 95000000 	 .word .L373+1
 6485 0088 A3000000 	 .word .L372+1
 6486 008c AF000000 	 .word .L371+1
 6487 0090 B7000000 	 .word .L369+1
 6488              	 .p2align 1
 6489              	.L373:
4285:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4286:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eSetBits	:
4287:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6490              	 .loc 1 4287 29
 6491 0094 3B6B     	 ldr r3,[r7,#48]
 6492 0096 5A6D     	 ldr r2,[r3,#84]
 6493 0098 BB68     	 ldr r3,[r7,#8]
 6494 009a 1A43     	 orrs r2,r2,r3
 6495 009c 3B6B     	 ldr r3,[r7,#48]
 6496 009e 5A65     	 str r2,[r3,#84]
4288:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6497              	 .loc 1 4288 6
 6498 00a0 14E0     	 b .L368
 6499              	.L372:
4289:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
ARM GAS   			page 197


4290:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eIncrement	:
4291:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6500              	 .loc 1 4291 15
 6501 00a2 3B6B     	 ldr r3,[r7,#48]
 6502 00a4 5B6D     	 ldr r3,[r3,#84]
 6503              	 .loc 1 4291 32
 6504 00a6 5A1C     	 adds r2,r3,#1
 6505 00a8 3B6B     	 ldr r3,[r7,#48]
 6506 00aa 5A65     	 str r2,[r3,#84]
4292:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6507              	 .loc 1 4292 6
 6508 00ac 0EE0     	 b .L368
 6509              	.L371:
4293:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4294:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eSetValueWithOverwrite	:
4295:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6510              	 .loc 1 4295 29
 6511 00ae 3B6B     	 ldr r3,[r7,#48]
 6512 00b0 BA68     	 ldr r2,[r7,#8]
 6513 00b2 5A65     	 str r2,[r3,#84]
4296:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6514              	 .loc 1 4296 6
 6515 00b4 0AE0     	 b .L368
 6516              	.L369:
4297:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4298:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eSetValueWithoutOverwrite :
4299:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( eOriginalNotifyState != eNotified )
 6517              	 .loc 1 4299 6
 6518 00b6 97F82B30 	 ldrb r3,[r7,#43]
 6519 00ba 022B     	 cmp r3,#2
 6520 00bc 03D0     	 beq .L375
4300:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4301:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6521              	 .loc 1 4301 30
 6522 00be 3B6B     	 ldr r3,[r7,#48]
 6523 00c0 BA68     	 ldr r2,[r7,#8]
 6524 00c2 5A65     	 str r2,[r3,#84]
4302:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4303:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					else
4304:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4305:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						/* The value could not be written to the task. */
4306:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						xReturn = pdFAIL;
4307:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4308:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
 6525              	 .loc 1 4308 6
 6526 00c4 01E0     	 b .L383
 6527              	.L375:
4306:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
 6528              	 .loc 1 4306 15
 6529 00c6 0023     	 movs r3,#0
 6530 00c8 7B63     	 str r3,[r7,#52]
 6531              	.L383:
 6532              	 .loc 1 4308 6
 6533 00ca 00BF     	 nop
 6534              	.L368:
4309:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4310:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				case eNoAction :
ARM GAS   			page 198


4311:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The task is being notified without its notify value being
4312:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					updated. */
4313:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					break;
4314:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4315:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4316:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4317:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4318:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4319:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			notification then unblock it now. */
4320:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 6535              	 .loc 1 4320 4
 6536 00cc 97F82B30 	 ldrb r3,[r7,#43]
 6537 00d0 012B     	 cmp r3,#1
 6538 00d2 4DD1     	 bne .L377
4321:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4322:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The task should not have been on an event list. */
4323:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6539              	 .loc 1 4323 5
 6540 00d4 3B6B     	 ldr r3,[r7,#48]
 6541 00d6 9B6A     	 ldr r3,[r3,#40]
 6542 00d8 002B     	 cmp r3,#0
 6543 00da 0AD0     	 beq .L378
 6544              	.LBB183:
 6545              	.LBB184:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6546              	 .loc 2 215 2
 6547              	 .syntax unified
 6548              	
 6549 00dc 4FF01003 	 mov r3,#16
 6550 00e0 83F31188 	 msr basepri,r3
 6551 00e4 BFF36F8F 	 isb 
 6552 00e8 BFF34F8F 	 dsb 
 6553              	
 6554              	
 6555              	 .thumb
 6556              	 .syntax unified
 6557 00ec BB61     	 str r3,[r7,#24]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 6558              	 .loc 2 223 1
 6559 00ee 00BF     	 nop
 6560              	.L379:
 6561              	.LBE184:
 6562              	.LBE183:
 6563              	 .loc 1 4323 5 discriminator 2
 6564 00f0 FEE7     	 b .L379
 6565              	.L378:
4324:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4325:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6566              	 .loc 1 4325 30
 6567 00f2 254B     	 ldr r3,.L384
 6568 00f4 1B68     	 ldr r3,[r3]
 6569 00f6 002B     	 cmp r3,#0
 6570 00f8 0CBF     	 ite eq
 6571 00fa 0123     	 moveq r3,#1
 6572 00fc 0023     	 movne r3,#0
 6573 00fe DBB2     	 uxtb r3,r3
 6574              	 .loc 1 4325 5
ARM GAS   			page 199


 6575 0100 002B     	 cmp r3,#0
 6576 0102 1DD0     	 beq .L380
4326:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4327:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 6577              	 .loc 1 4327 27
 6578 0104 3B6B     	 ldr r3,[r7,#48]
 6579 0106 0433     	 adds r3,r3,#4
 6580 0108 1846     	 mov r0,r3
 6581 010a FFF7FEFF 	 bl uxListRemove
4328:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6582              	 .loc 1 4328 6
 6583 010e 1F4B     	 ldr r3,.L384+4
 6584 0110 1A68     	 ldr r2,[r3]
 6585 0112 3B6B     	 ldr r3,[r7,#48]
 6586 0114 DB6A     	 ldr r3,[r3,#44]
 6587 0116 0121     	 movs r1,#1
 6588 0118 01FA03F3 	 lsl r3,r1,r3
 6589 011c 1343     	 orrs r3,r3,r2
 6590 011e 1B4A     	 ldr r2,.L384+4
 6591 0120 1360     	 str r3,[r2]
 6592 0122 3B6B     	 ldr r3,[r7,#48]
 6593 0124 DA6A     	 ldr r2,[r3,#44]
 6594 0126 1346     	 mov r3,r2
 6595 0128 9B00     	 lsls r3,r3,#2
 6596 012a 1344     	 add r3,r3,r2
 6597 012c 9B00     	 lsls r3,r3,#2
 6598 012e 184A     	 ldr r2,.L384+8
 6599 0130 1A44     	 add r2,r2,r3
 6600 0132 3B6B     	 ldr r3,[r7,#48]
 6601 0134 0433     	 adds r3,r3,#4
 6602 0136 1946     	 mov r1,r3
 6603 0138 1046     	 mov r0,r2
 6604 013a FFF7FEFF 	 bl vListInsertEnd
 6605 013e 05E0     	 b .L381
 6606              	.L380:
4329:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4330:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
4331:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4332:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4333:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					this task pending until the scheduler is resumed. */
4334:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6607              	 .loc 1 4334 20
 6608 0140 3B6B     	 ldr r3,[r7,#48]
 6609 0142 1833     	 adds r3,r3,#24
 6610 0144 1946     	 mov r1,r3
 6611 0146 1348     	 ldr r0,.L384+12
 6612 0148 FFF7FEFF 	 bl vListInsertEnd
 6613              	.L381:
4335:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4336:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4337:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6614              	 .loc 1 4337 16
 6615 014c 3B6B     	 ldr r3,[r7,#48]
 6616 014e DA6A     	 ldr r2,[r3,#44]
 6617              	 .loc 1 4337 29
 6618 0150 114B     	 ldr r3,.L384+16
 6619 0152 1B68     	 ldr r3,[r3]
ARM GAS   			page 200


 6620              	 .loc 1 4337 43
 6621 0154 DB6A     	 ldr r3,[r3,#44]
 6622              	 .loc 1 4337 27
 6623 0156 9A42     	 cmp r2,r3
 6624 0158 8CBF     	 ite hi
 6625 015a 0123     	 movhi r3,#1
 6626 015c 0023     	 movls r3,#0
 6627 015e DBB2     	 uxtb r3,r3
 6628              	 .loc 1 4337 5
 6629 0160 002B     	 cmp r3,#0
 6630 0162 05D0     	 beq .L377
4338:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4339:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The notified task has a priority above the currently
4340:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					executing task so a yield is required. */
4341:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6631              	 .loc 1 4341 6
 6632 0164 3B6C     	 ldr r3,[r7,#64]
 6633 0166 002B     	 cmp r3,#0
 6634 0168 02D0     	 beq .L377
4342:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4343:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6635              	 .loc 1 4343 34
 6636 016a 3B6C     	 ldr r3,[r7,#64]
 6637 016c 0122     	 movs r2,#1
 6638 016e 1A60     	 str r2,[r3]
 6639              	.L377:
 6640 0170 FB6A     	 ldr r3,[r7,#44]
 6641 0172 7B61     	 str r3,[r7,#20]
 6642              	.LBB185:
 6643              	.LBB186:
 249:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6644              	 .loc 2 249 2
 6645 0174 7B69     	 ldr r3,[r7,#20]
 6646              	 .syntax unified
 6647              	
 6648 0176 83F31188 	 msr basepri,r3
 6649              	
 6650              	 .loc 2 253 1
 6651              	 .thumb
 6652              	 .syntax unified
 6653 017a 00BF     	 nop
 6654              	.LBE186:
 6655              	.LBE185:
4344:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4345:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4346:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
4347:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4348:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4349:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4350:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4351:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
4352:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4353:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4354:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 6656              	 .loc 1 4354 10
 6657 017c 7B6B     	 ldr r3,[r7,#52]
4355:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
ARM GAS   			page 201


 6658              	 .loc 1 4355 2
 6659 017e 1846     	 mov r0,r3
 6660 0180 3837     	 adds r7,r7,#56
 6661              	 .cfi_def_cfa_offset 8
 6662 0182 BD46     	 mov sp,r7
 6663              	 .cfi_def_cfa_register 13
 6664              	 
 6665 0184 80BD     	 pop {r7,pc}
 6666              	.L385:
 6667 0186 00BF     	 .align 2
 6668              	.L384:
 6669 0188 00000000 	 .word _ZL20uxSchedulerSuspended
 6670 018c 00000000 	 .word _ZL18uxTopReadyPriority
 6671 0190 00000000 	 .word _ZL17pxReadyTasksLists
 6672 0194 00000000 	 .word _ZL17xPendingReadyList
 6673 0198 00000000 	 .word pxCurrentTCB
 6674              	 .cfi_endproc
 6675              	.LFE57:
 6676              	 .fnend
 6677              	 .size xTaskGenericNotifyFromISR,.-xTaskGenericNotifyFromISR
 6678              	 .section .text.vTaskNotifyGiveFromISR,"ax",%progbits
 6679              	 .align 1
 6680              	 .global vTaskNotifyGiveFromISR
 6681              	 .syntax unified
 6682              	 .thumb
 6683              	 .thumb_func
 6684              	 .type vTaskNotifyGiveFromISR,%function
 6685              	vTaskNotifyGiveFromISR:
 6686              	 .fnstart
 6687              	.LFB58:
4356:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4357:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4358:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
4359:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4360:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4361:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4362:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4363:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 6688              	 .loc 1 4363 2
 6689              	 .cfi_startproc
 6690              	 
 6691              	 
 6692 0000 80B5     	 push {r7,lr}
 6693              	 .save {r7,lr}
 6694              	 .cfi_def_cfa_offset 8
 6695              	 .cfi_offset 7,-8
 6696              	 .cfi_offset 14,-4
 6697              	 .pad #40
 6698 0002 8AB0     	 sub sp,sp,#40
 6699              	 .cfi_def_cfa_offset 48
 6700              	 .setfp r7,sp,#0
 6701 0004 00AF     	 add r7,sp,#0
 6702              	 .cfi_def_cfa_register 7
 6703 0006 7860     	 str r0,[r7,#4]
 6704 0008 3960     	 str r1,[r7]
4364:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t * pxTCB;
4365:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	eNotifyValue eOriginalNotifyState;
ARM GAS   			page 202


4366:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4367:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4368:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		configASSERT( xTaskToNotify );
 6705              	 .loc 1 4368 3
 6706 000a 7B68     	 ldr r3,[r7,#4]
 6707 000c 002B     	 cmp r3,#0
 6708 000e 0AD1     	 bne .L387
 6709              	.LBB187:
 6710              	.LBB188:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6711              	 .loc 2 215 2
 6712              	 .syntax unified
 6713              	
 6714 0010 4FF01003 	 mov r3,#16
 6715 0014 83F31188 	 msr basepri,r3
 6716 0018 BFF36F8F 	 isb 
 6717 001c BFF34F8F 	 dsb 
 6718              	
 6719              	
 6720              	 .thumb
 6721              	 .syntax unified
 6722 0020 BB61     	 str r3,[r7,#24]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 6723              	 .loc 2 223 1
 6724 0022 00BF     	 nop
 6725              	.L388:
 6726              	.LBE188:
 6727              	.LBE187:
 6728              	 .loc 1 4368 3 discriminator 1
 6729 0024 FEE7     	 b .L388
 6730              	.L387:
4369:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4370:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4371:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4372:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4373:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4374:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4375:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		is defined in FreeRTOSConfig.h then
4376:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4377:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4378:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		been assigned a priority above the configured maximum system call
4379:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4380:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4381:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4382:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4383:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4384:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		provided on the following link:
4385:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4386:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6731              	 .loc 1 4386 3
 6732 0026 FFF7FEFF 	 bl vPortValidateInterruptPriority
4387:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4388:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 6733              	 .loc 1 4388 9
 6734 002a 7B68     	 ldr r3,[r7,#4]
 6735 002c 7B62     	 str r3,[r7,#36]
 6736              	.LBB189:
ARM GAS   			page 203


 6737              	.LBB190:
 231:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6738              	 .loc 2 231 2
 6739              	 .syntax unified
 6740              	
 6741 002e EFF31182 	 mrs r2,basepri
 6742 0032 4FF01003 	 mov r3,#16
 6743 0036 83F31188 	 msr basepri,r3
 6744 003a BFF36F8F 	 isb 
 6745 003e BFF34F8F 	 dsb 
 6746              	
 6747              	
 6748              	 .thumb
 6749              	 .syntax unified
 6750 0042 7A61     	 str r2,[r7,#20]
 6751 0044 3B61     	 str r3,[r7,#16]
 243:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 6752              	 .loc 2 243 9
 6753 0046 7B69     	 ldr r3,[r7,#20]
 6754              	.LBE190:
 6755              	.LBE189:
4389:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4390:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6756              	 .loc 1 4390 28
 6757 0048 3B62     	 str r3,[r7,#32]
4391:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
4392:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 6758              	 .loc 1 4392 25
 6759 004a 7B6A     	 ldr r3,[r7,#36]
 6760 004c 93F85830 	 ldrb r3,[r3,#88]
 6761 0050 FB77     	 strb r3,[r7,#31]
4393:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			pxTCB->eNotifyState = eNotified;
 6762              	 .loc 1 4393 24
 6763 0052 7B6A     	 ldr r3,[r7,#36]
 6764 0054 0222     	 movs r2,#2
 6765 0056 83F85820 	 strb r2,[r3,#88]
4394:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4395:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4396:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			semaphore. */
4397:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6766              	 .loc 1 4397 13
 6767 005a 7B6A     	 ldr r3,[r7,#36]
 6768 005c 5B6D     	 ldr r3,[r3,#84]
 6769              	 .loc 1 4397 30
 6770 005e 5A1C     	 adds r2,r3,#1
 6771 0060 7B6A     	 ldr r3,[r7,#36]
 6772 0062 5A65     	 str r2,[r3,#84]
4398:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4399:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4400:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4401:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4402:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			notification then unblock it now. */
4403:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 6773              	 .loc 1 4403 4
 6774 0064 FB7F     	 ldrb r3,[r7,#31]
 6775 0066 012B     	 cmp r3,#1
 6776 0068 4DD1     	 bne .L390
ARM GAS   			page 204


4404:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4405:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				/* The task should not have been on an event list. */
4406:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6777              	 .loc 1 4406 5
 6778 006a 7B6A     	 ldr r3,[r7,#36]
 6779 006c 9B6A     	 ldr r3,[r3,#40]
 6780 006e 002B     	 cmp r3,#0
 6781 0070 0AD0     	 beq .L391
 6782              	.LBB191:
 6783              	.LBB192:
 215:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6784              	 .loc 2 215 2
 6785              	 .syntax unified
 6786              	
 6787 0072 4FF01003 	 mov r3,#16
 6788 0076 83F31188 	 msr basepri,r3
 6789 007a BFF36F8F 	 isb 
 6790 007e BFF34F8F 	 dsb 
 6791              	
 6792              	
 6793              	 .thumb
 6794              	 .syntax unified
 6795 0082 FB60     	 str r3,[r7,#12]
 223:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 6796              	 .loc 2 223 1
 6797 0084 00BF     	 nop
 6798              	.L392:
 6799              	.LBE192:
 6800              	.LBE191:
 6801              	 .loc 1 4406 5 discriminator 2
 6802 0086 FEE7     	 b .L392
 6803              	.L391:
4407:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4408:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6804              	 .loc 1 4408 30
 6805 0088 244B     	 ldr r3,.L395
 6806 008a 1B68     	 ldr r3,[r3]
 6807 008c 002B     	 cmp r3,#0
 6808 008e 0CBF     	 ite eq
 6809 0090 0123     	 moveq r3,#1
 6810 0092 0023     	 movne r3,#0
 6811 0094 DBB2     	 uxtb r3,r3
 6812              	 .loc 1 4408 5
 6813 0096 002B     	 cmp r3,#0
 6814 0098 1DD0     	 beq .L393
4409:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4410:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 6815              	 .loc 1 4410 27
 6816 009a 7B6A     	 ldr r3,[r7,#36]
 6817 009c 0433     	 adds r3,r3,#4
 6818 009e 1846     	 mov r0,r3
 6819 00a0 FFF7FEFF 	 bl uxListRemove
4411:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6820              	 .loc 1 4411 6
 6821 00a4 1E4B     	 ldr r3,.L395+4
 6822 00a6 1A68     	 ldr r2,[r3]
 6823 00a8 7B6A     	 ldr r3,[r7,#36]
ARM GAS   			page 205


 6824 00aa DB6A     	 ldr r3,[r3,#44]
 6825 00ac 0121     	 movs r1,#1
 6826 00ae 01FA03F3 	 lsl r3,r1,r3
 6827 00b2 1343     	 orrs r3,r3,r2
 6828 00b4 1A4A     	 ldr r2,.L395+4
 6829 00b6 1360     	 str r3,[r2]
 6830 00b8 7B6A     	 ldr r3,[r7,#36]
 6831 00ba DA6A     	 ldr r2,[r3,#44]
 6832 00bc 1346     	 mov r3,r2
 6833 00be 9B00     	 lsls r3,r3,#2
 6834 00c0 1344     	 add r3,r3,r2
 6835 00c2 9B00     	 lsls r3,r3,#2
 6836 00c4 174A     	 ldr r2,.L395+8
 6837 00c6 1A44     	 add r2,r2,r3
 6838 00c8 7B6A     	 ldr r3,[r7,#36]
 6839 00ca 0433     	 adds r3,r3,#4
 6840 00cc 1946     	 mov r1,r3
 6841 00ce 1046     	 mov r0,r2
 6842 00d0 FFF7FEFF 	 bl vListInsertEnd
 6843 00d4 05E0     	 b .L394
 6844              	.L393:
4412:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4413:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
4414:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4415:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4416:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					this task pending until the scheduler is resumed. */
4417:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6845              	 .loc 1 4417 20
 6846 00d6 7B6A     	 ldr r3,[r7,#36]
 6847 00d8 1833     	 adds r3,r3,#24
 6848 00da 1946     	 mov r1,r3
 6849 00dc 1248     	 ldr r0,.L395+12
 6850 00de FFF7FEFF 	 bl vListInsertEnd
 6851              	.L394:
4418:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4419:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4420:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6852              	 .loc 1 4420 16
 6853 00e2 7B6A     	 ldr r3,[r7,#36]
 6854 00e4 DA6A     	 ldr r2,[r3,#44]
 6855              	 .loc 1 4420 29
 6856 00e6 114B     	 ldr r3,.L395+16
 6857 00e8 1B68     	 ldr r3,[r3]
 6858              	 .loc 1 4420 43
 6859 00ea DB6A     	 ldr r3,[r3,#44]
 6860              	 .loc 1 4420 27
 6861 00ec 9A42     	 cmp r2,r3
 6862 00ee 8CBF     	 ite hi
 6863 00f0 0123     	 movhi r3,#1
 6864 00f2 0023     	 movls r3,#0
 6865 00f4 DBB2     	 uxtb r3,r3
 6866              	 .loc 1 4420 5
 6867 00f6 002B     	 cmp r3,#0
 6868 00f8 05D0     	 beq .L390
4421:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4422:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					/* The notified task has a priority above the currently
4423:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					executing task so a yield is required. */
ARM GAS   			page 206


4424:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6869              	 .loc 1 4424 6
 6870 00fa 3B68     	 ldr r3,[r7]
 6871 00fc 002B     	 cmp r3,#0
 6872 00fe 02D0     	 beq .L390
4425:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					{
4426:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6873              	 .loc 1 4426 34
 6874 0100 3B68     	 ldr r3,[r7]
 6875 0102 0122     	 movs r2,#1
 6876 0104 1A60     	 str r2,[r3]
 6877              	.L390:
 6878 0106 3B6A     	 ldr r3,[r7,#32]
 6879 0108 BB60     	 str r3,[r7,#8]
 6880              	.LBB193:
 6881              	.LBB194:
 249:C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 6882              	 .loc 2 249 2
 6883 010a BB68     	 ldr r3,[r7,#8]
 6884              	 .syntax unified
 6885              	
 6886 010c 83F31188 	 msr basepri,r3
 6887              	
 6888              	 .loc 2 253 1
 6889              	 .thumb
 6890              	 .syntax unified
 6891 0110 00BF     	 nop
 6892              	.LBE194:
 6893              	.LBE193:
4427:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					}
4428:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4429:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				else
4430:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				{
4431:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				}
4433:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4434:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
4435:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4436:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 6894              	 .loc 1 4436 2
 6895 0112 00BF     	 nop
 6896 0114 2837     	 adds r7,r7,#40
 6897              	 .cfi_def_cfa_offset 8
 6898 0116 BD46     	 mov sp,r7
 6899              	 .cfi_def_cfa_register 13
 6900              	 
 6901 0118 80BD     	 pop {r7,pc}
 6902              	.L396:
 6903 011a 00BF     	 .align 2
 6904              	.L395:
 6905 011c 00000000 	 .word _ZL20uxSchedulerSuspended
 6906 0120 00000000 	 .word _ZL18uxTopReadyPriority
 6907 0124 00000000 	 .word _ZL17pxReadyTasksLists
 6908 0128 00000000 	 .word _ZL17xPendingReadyList
 6909 012c 00000000 	 .word pxCurrentTCB
 6910              	 .cfi_endproc
 6911              	.LFE58:
ARM GAS   			page 207


 6912              	 .fnend
 6913              	 .size vTaskNotifyGiveFromISR,.-vTaskNotifyGiveFromISR
 6914              	 .section .text.xTaskNotifyStateClear,"ax",%progbits
 6915              	 .align 1
 6916              	 .global xTaskNotifyStateClear
 6917              	 .syntax unified
 6918              	 .thumb
 6919              	 .thumb_func
 6920              	 .type xTaskNotifyStateClear,%function
 6921              	xTaskNotifyStateClear:
 6922              	 .fnstart
 6923              	.LFB59:
4437:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4438:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4439:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4440:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** /*-----------------------------------------------------------*/
4441:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4442:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4443:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4444:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4445:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	{
 6924              	 .loc 1 4445 2
 6925              	 .cfi_startproc
 6926              	 
 6927              	 
 6928 0000 80B5     	 push {r7,lr}
 6929              	 .save {r7,lr}
 6930              	 .cfi_def_cfa_offset 8
 6931              	 .cfi_offset 7,-8
 6932              	 .cfi_offset 14,-4
 6933              	 .pad #16
 6934 0002 84B0     	 sub sp,sp,#16
 6935              	 .cfi_def_cfa_offset 24
 6936              	 .setfp r7,sp,#0
 6937 0004 00AF     	 add r7,sp,#0
 6938              	 .cfi_def_cfa_register 7
 6939 0006 7860     	 str r0,[r7,#4]
4446:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	TCB_t *pxTCB;
4447:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	BaseType_t xReturn;
4448:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4449:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = ( TCB_t * ) xTask;
 6940              	 .loc 1 4449 9
 6941 0008 7B68     	 ldr r3,[r7,#4]
 6942 000a BB60     	 str r3,[r7,#8]
4450:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4451:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4452:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		its notification state cleared. */
4453:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		pxTCB = prvGetTCBFromHandle( pxTCB );
 6943              	 .loc 1 4453 11
 6944 000c BB68     	 ldr r3,[r7,#8]
 6945 000e 002B     	 cmp r3,#0
 6946 0010 02D1     	 bne .L398
 6947              	 .loc 1 4453 11 is_stmt 0 discriminator 1
 6948 0012 114B     	 ldr r3,.L403
 6949 0014 1B68     	 ldr r3,[r3]
 6950 0016 00E0     	 b .L399
 6951              	.L398:
ARM GAS   			page 208


 6952              	 .loc 1 4453 11 discriminator 2
 6953 0018 BB68     	 ldr r3,[r7,#8]
 6954              	.L399:
 6955              	 .loc 1 4453 9 is_stmt 1 discriminator 4
 6956 001a BB60     	 str r3,[r7,#8]
4454:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4455:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskENTER_CRITICAL();
 6957              	 .loc 1 4455 3 discriminator 4
 6958 001c FFF7FEFF 	 bl vPortEnterCritical
4456:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		{
4457:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			if( pxTCB->eNotifyState == eNotified )
 6959              	 .loc 1 4457 15 discriminator 4
 6960 0020 BB68     	 ldr r3,[r7,#8]
 6961 0022 93F85830 	 ldrb r3,[r3,#88]
 6962 0026 DBB2     	 uxtb r3,r3
 6963              	 .loc 1 4457 28 discriminator 4
 6964 0028 022B     	 cmp r3,#2
 6965 002a 0CBF     	 ite eq
 6966 002c 0123     	 moveq r3,#1
 6967 002e 0023     	 movne r3,#0
 6968 0030 DBB2     	 uxtb r3,r3
 6969              	 .loc 1 4457 4 discriminator 4
 6970 0032 002B     	 cmp r3,#0
 6971 0034 06D0     	 beq .L400
4458:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4459:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				pxTCB->eNotifyState = eNotWaitingNotification;
 6972              	 .loc 1 4459 25
 6973 0036 BB68     	 ldr r3,[r7,#8]
 6974 0038 0022     	 movs r2,#0
 6975 003a 83F85820 	 strb r2,[r3,#88]
4460:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xReturn = pdPASS;
 6976              	 .loc 1 4460 13
 6977 003e 0123     	 movs r3,#1
 6978 0040 FB60     	 str r3,[r7,#12]
 6979 0042 01E0     	 b .L401
 6980              	.L400:
4461:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4462:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			else
4463:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			{
4464:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 				xReturn = pdFAIL;
 6981              	 .loc 1 4464 13
 6982 0044 0023     	 movs r3,#0
 6983 0046 FB60     	 str r3,[r7,#12]
 6984              	.L401:
4465:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 			}
4466:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		}
4467:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		taskEXIT_CRITICAL();
 6985              	 .loc 1 4467 3
 6986 0048 FFF7FEFF 	 bl vPortExitCritical
4468:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 
4469:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 		return xReturn;
 6987              	 .loc 1 4469 10
 6988 004c FB68     	 ldr r3,[r7,#12]
4470:C:\Users\niels\Documents\Elektrotechniek\Jaar 2\ECS\ECSL\software\STM32\STM32Basis\HAL\gemeenschappelijk\Third_Party\FreeRTOS\Source\tasks.c **** 	}
 6989              	 .loc 1 4470 2
 6990 004e 1846     	 mov r0,r3
 6991 0050 1037     	 adds r7,r7,#16
ARM GAS   			page 209


 6992              	 .cfi_def_cfa_offset 8
 6993 0052 BD46     	 mov sp,r7
 6994              	 .cfi_def_cfa_register 13
 6995              	 
 6996 0054 80BD     	 pop {r7,pc}
 6997              	.L404:
 6998 0056 00BF     	 .align 2
 6999              	.L403:
 7000 0058 00000000 	 .word pxCurrentTCB
 7001              	 .cfi_endproc
 7002              	.LFE59:
 7003              	 .fnend
 7004              	 .size xTaskNotifyStateClear,.-xTaskNotifyStateClear
 7005              	 .text
 7006              	.Letext0:
 7007              	 .file 3 "c:\\progra~2\\gnuarm~1\\102021~1.10\\arm-none-eabi\\include\\c++\\10.3.1\\cstdlib"
 7008              	 .file 4 "c:\\progra~2\\gnuarm~1\\102021~1.10\\arm-none-eabi\\include\\c++\\10.3.1\\bits\\std_abs.h"
 7009              	 .file 5 "c:\\progra~2\\gnuarm~1\\102021~1.10\\arm-none-eabi\\include\\c++\\10.3.1\\arm-none-eabi\\thumb\\v7e-m+fp\\hard\\bits\\c++config.h"
 7010              	 .file 6 "c:\\progra~2\\gnuarm~1\\102021~1.10\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\stddef.h"
 7011              	 .file 7 "c:\\progra~2\\gnuarm~1\\102021~1.10\\arm-none-eabi\\include\\machine\\_default_types.h"
 7012              	 .file 8 "c:\\progra~2\\gnuarm~1\\102021~1.10\\arm-none-eabi\\include\\stdlib.h"
 7013              	 .file 9 "c:\\progra~2\\gnuarm~1\\102021~1.10\\arm-none-eabi\\include\\c++\\10.3.1\\stdlib.h"
 7014              	 .file 10 "c:\\progra~2\\gnuarm~1\\102021~1.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 7015              	 .file 11 "C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/include/projdefs.h"
 7016              	 .file 12 "C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/include/list.h"
 7017              	 .file 13 "C:/Users/niels/DOCUME~1/ELEKTR~1/JAAR2~1/ECS/ECSL/software/STM32/STM32B~1/HAL/GEMEEN~1/THIRD_~1/FreeRTOS/Source/include/task.h"
 7018              	 .file 14 "<built-in>"
 7019              	 .section .debug_info,"",%progbits
 7020              	.Ldebug_info0:
 7021 0000 37210000 	 .4byte 0x2137
 7022 0004 0400     	 .2byte 0x4
 7023 0006 00000000 	 .4byte .Ldebug_abbrev0
 7024 000a 04       	 .byte 0x4
 7025 000b 01       	 .uleb128 0x1
 7026 000c 57070000 	 .4byte .LASF263
 7027 0010 04       	 .byte 0x4
 7028 0011 810F0000 	 .4byte .LASF264
 7029 0015 2E020000 	 .4byte .LASF265
 7030 0019 00000000 	 .4byte .Ldebug_ranges0+0
 7031 001d 00000000 	 .4byte 0
 7032 0021 00000000 	 .4byte .Ldebug_line0
 7033 0025 02       	 .uleb128 0x2
 7034 0026 73746400 	 .ascii "std\000"
 7035 002a 0E       	 .byte 0xe
 7036 002b 00       	 .byte 0
 7037 002c D0010000 	 .4byte 0x1d0
 7038 0030 03       	 .uleb128 0x3
 7039 0031 B9080000 	 .4byte .LASF5
 7040 0035 05       	 .byte 0x5
 7041 0036 1E01     	 .2byte 0x11e
 7042 0038 41       	 .byte 0x41
 7043 0039 04       	 .uleb128 0x4
 7044 003a 05       	 .byte 0x5
 7045 003b 1E01     	 .2byte 0x11e
 7046 003d 41       	 .byte 0x41
 7047 003e 30000000 	 .4byte 0x30
 7048 0042 05       	 .uleb128 0x5
ARM GAS   			page 210


 7049 0043 03       	 .byte 0x3
 7050 0044 7F       	 .byte 0x7f
 7051 0045 0B       	 .byte 0xb
 7052 0046 18030000 	 .4byte 0x318
 7053 004a 05       	 .uleb128 0x5
 7054 004b 03       	 .byte 0x3
 7055 004c 80       	 .byte 0x80
 7056 004d 0B       	 .byte 0xb
 7057 004e 4C030000 	 .4byte 0x34c
 7058 0052 05       	 .uleb128 0x5
 7059 0053 03       	 .byte 0x3
 7060 0054 86       	 .byte 0x86
 7061 0055 0B       	 .byte 0xb
 7062 0056 B9030000 	 .4byte 0x3b9
 7063 005a 05       	 .uleb128 0x5
 7064 005b 03       	 .byte 0x3
 7065 005c 8C       	 .byte 0x8c
 7066 005d 0B       	 .byte 0xb
 7067 005e CF030000 	 .4byte 0x3cf
 7068 0062 05       	 .uleb128 0x5
 7069 0063 03       	 .byte 0x3
 7070 0064 8D       	 .byte 0x8d
 7071 0065 0B       	 .byte 0xb
 7072 0066 EC030000 	 .4byte 0x3ec
 7073 006a 05       	 .uleb128 0x5
 7074 006b 03       	 .byte 0x3
 7075 006c 8E       	 .byte 0x8e
 7076 006d 0B       	 .byte 0xb
 7077 006e 02040000 	 .4byte 0x402
 7078 0072 05       	 .uleb128 0x5
 7079 0073 03       	 .byte 0x3
 7080 0074 8F       	 .byte 0x8f
 7081 0075 0B       	 .byte 0xb
 7082 0076 18040000 	 .4byte 0x418
 7083 007a 05       	 .uleb128 0x5
 7084 007b 03       	 .byte 0x3
 7085 007c 91       	 .byte 0x91
 7086 007d 0B       	 .byte 0xb
 7087 007e 42040000 	 .4byte 0x442
 7088 0082 05       	 .uleb128 0x5
 7089 0083 03       	 .byte 0x3
 7090 0084 94       	 .byte 0x94
 7091 0085 0B       	 .byte 0xb
 7092 0086 5D040000 	 .4byte 0x45d
 7093 008a 05       	 .uleb128 0x5
 7094 008b 03       	 .byte 0x3
 7095 008c 96       	 .byte 0x96
 7096 008d 0B       	 .byte 0xb
 7097 008e 73040000 	 .4byte 0x473
 7098 0092 05       	 .uleb128 0x5
 7099 0093 03       	 .byte 0x3
 7100 0094 99       	 .byte 0x99
 7101 0095 0B       	 .byte 0xb
 7102 0096 8E040000 	 .4byte 0x48e
 7103 009a 05       	 .uleb128 0x5
 7104 009b 03       	 .byte 0x3
 7105 009c 9A       	 .byte 0x9a
ARM GAS   			page 211


 7106 009d 0B       	 .byte 0xb
 7107 009e A9040000 	 .4byte 0x4a9
 7108 00a2 05       	 .uleb128 0x5
 7109 00a3 03       	 .byte 0x3
 7110 00a4 9B       	 .byte 0x9b
 7111 00a5 0B       	 .byte 0xb
 7112 00a6 DB040000 	 .4byte 0x4db
 7113 00aa 05       	 .uleb128 0x5
 7114 00ab 03       	 .byte 0x3
 7115 00ac 9D       	 .byte 0x9d
 7116 00ad 0B       	 .byte 0xb
 7117 00ae FB040000 	 .4byte 0x4fb
 7118 00b2 05       	 .uleb128 0x5
 7119 00b3 03       	 .byte 0x3
 7120 00b4 A3       	 .byte 0xa3
 7121 00b5 0B       	 .byte 0xb
 7122 00b6 1C050000 	 .4byte 0x51c
 7123 00ba 05       	 .uleb128 0x5
 7124 00bb 03       	 .byte 0x3
 7125 00bc A5       	 .byte 0xa5
 7126 00bd 0B       	 .byte 0xb
 7127 00be 28050000 	 .4byte 0x528
 7128 00c2 05       	 .uleb128 0x5
 7129 00c3 03       	 .byte 0x3
 7130 00c4 A6       	 .byte 0xa6
 7131 00c5 0B       	 .byte 0xb
 7132 00c6 3A050000 	 .4byte 0x53a
 7133 00ca 05       	 .uleb128 0x5
 7134 00cb 03       	 .byte 0x3
 7135 00cc A7       	 .byte 0xa7
 7136 00cd 0B       	 .byte 0xb
 7137 00ce 5B050000 	 .4byte 0x55b
 7138 00d2 05       	 .uleb128 0x5
 7139 00d3 03       	 .byte 0x3
 7140 00d4 A8       	 .byte 0xa8
 7141 00d5 0B       	 .byte 0xb
 7142 00d6 7B050000 	 .4byte 0x57b
 7143 00da 05       	 .uleb128 0x5
 7144 00db 03       	 .byte 0x3
 7145 00dc A9       	 .byte 0xa9
 7146 00dd 0B       	 .byte 0xb
 7147 00de 9B050000 	 .4byte 0x59b
 7148 00e2 05       	 .uleb128 0x5
 7149 00e3 03       	 .byte 0x3
 7150 00e4 AB       	 .byte 0xab
 7151 00e5 0B       	 .byte 0xb
 7152 00e6 B1050000 	 .4byte 0x5b1
 7153 00ea 05       	 .uleb128 0x5
 7154 00eb 03       	 .byte 0x3
 7155 00ec AC       	 .byte 0xac
 7156 00ed 0B       	 .byte 0xb
 7157 00ee D7050000 	 .4byte 0x5d7
 7158 00f2 05       	 .uleb128 0x5
 7159 00f3 03       	 .byte 0x3
 7160 00f4 F0       	 .byte 0xf0
 7161 00f5 16       	 .byte 0x16
 7162 00f6 80030000 	 .4byte 0x380
ARM GAS   			page 212


 7163 00fa 05       	 .uleb128 0x5
 7164 00fb 03       	 .byte 0x3
 7165 00fc F5       	 .byte 0xf5
 7166 00fd 16       	 .byte 0x16
 7167 00fe 27020000 	 .4byte 0x227
 7168 0102 05       	 .uleb128 0x5
 7169 0103 03       	 .byte 0x3
 7170 0104 F6       	 .byte 0xf6
 7171 0105 16       	 .byte 0x16
 7172 0106 F2050000 	 .4byte 0x5f2
 7173 010a 05       	 .uleb128 0x5
 7174 010b 03       	 .byte 0x3
 7175 010c F8       	 .byte 0xf8
 7176 010d 16       	 .byte 0x16
 7177 010e 0E060000 	 .4byte 0x60e
 7178 0112 05       	 .uleb128 0x5
 7179 0113 03       	 .byte 0x3
 7180 0114 F9       	 .byte 0xf9
 7181 0115 16       	 .byte 0x16
 7182 0116 67060000 	 .4byte 0x667
 7183 011a 05       	 .uleb128 0x5
 7184 011b 03       	 .byte 0x3
 7185 011c FA       	 .byte 0xfa
 7186 011d 16       	 .byte 0x16
 7187 011e 25060000 	 .4byte 0x625
 7188 0122 05       	 .uleb128 0x5
 7189 0123 03       	 .byte 0x3
 7190 0124 FB       	 .byte 0xfb
 7191 0125 16       	 .byte 0x16
 7192 0126 46060000 	 .4byte 0x646
 7193 012a 05       	 .uleb128 0x5
 7194 012b 03       	 .byte 0x3
 7195 012c FC       	 .byte 0xfc
 7196 012d 16       	 .byte 0x16
 7197 012e 89060000 	 .4byte 0x689
 7198 0132 06       	 .uleb128 0x6
 7199 0133 61627300 	 .ascii "abs\000"
 7200 0137 04       	 .byte 0x4
 7201 0138 4F       	 .byte 0x4f
 7202 0139 03       	 .byte 0x3
 7203 013a F7020000 	 .4byte .LASF0
 7204 013e 64020000 	 .4byte 0x264
 7205 0142 4C010000 	 .4byte 0x14c
 7206 0146 07       	 .uleb128 0x7
 7207 0147 64020000 	 .4byte 0x264
 7208 014b 00       	 .byte 0
 7209 014c 06       	 .uleb128 0x6
 7210 014d 61627300 	 .ascii "abs\000"
 7211 0151 04       	 .byte 0x4
 7212 0152 4B       	 .byte 0x4b
 7213 0153 03       	 .byte 0x3
 7214 0154 01030000 	 .4byte .LASF1
 7215 0158 82060000 	 .4byte 0x682
 7216 015c 66010000 	 .4byte 0x166
 7217 0160 07       	 .uleb128 0x7
 7218 0161 82060000 	 .4byte 0x682
 7219 0165 00       	 .byte 0
ARM GAS   			page 213


 7220 0166 06       	 .uleb128 0x6
 7221 0167 61627300 	 .ascii "abs\000"
 7222 016b 04       	 .byte 0x4
 7223 016c 47       	 .byte 0x47
 7224 016d 03       	 .byte 0x3
 7225 016e ED020000 	 .4byte .LASF2
 7226 0172 E5030000 	 .4byte 0x3e5
 7227 0176 80010000 	 .4byte 0x180
 7228 017a 07       	 .uleb128 0x7
 7229 017b E5030000 	 .4byte 0x3e5
 7230 017f 00       	 .byte 0
 7231 0180 06       	 .uleb128 0x6
 7232 0181 61627300 	 .ascii "abs\000"
 7233 0185 04       	 .byte 0x4
 7234 0186 3D       	 .byte 0x3d
 7235 0187 03       	 .byte 0x3
 7236 0188 35030000 	 .4byte .LASF3
 7237 018c 5D020000 	 .4byte 0x25d
 7238 0190 9A010000 	 .4byte 0x19a
 7239 0194 07       	 .uleb128 0x7
 7240 0195 5D020000 	 .4byte 0x25d
 7241 0199 00       	 .byte 0
 7242 019a 06       	 .uleb128 0x6
 7243 019b 61627300 	 .ascii "abs\000"
 7244 019f 04       	 .byte 0x4
 7245 01a0 38       	 .byte 0x38
 7246 01a1 03       	 .byte 0x3
 7247 01a2 0B030000 	 .4byte .LASF4
 7248 01a6 A4020000 	 .4byte 0x2a4
 7249 01aa B4010000 	 .4byte 0x1b4
 7250 01ae 07       	 .uleb128 0x7
 7251 01af A4020000 	 .4byte 0x2a4
 7252 01b3 00       	 .byte 0
 7253 01b4 08       	 .uleb128 0x8
 7254 01b5 64697600 	 .ascii "div\000"
 7255 01b9 03       	 .byte 0x3
 7256 01ba B1       	 .byte 0xb1
 7257 01bb 03       	 .byte 0x3
 7258 01bc 50000000 	 .4byte .LASF6
 7259 01c0 4C030000 	 .4byte 0x34c
 7260 01c4 07       	 .uleb128 0x7
 7261 01c5 A4020000 	 .4byte 0x2a4
 7262 01c9 07       	 .uleb128 0x7
 7263 01ca A4020000 	 .4byte 0x2a4
 7264 01ce 00       	 .byte 0
 7265 01cf 00       	 .byte 0
 7266 01d0 09       	 .uleb128 0x9
 7267 01d1 33010000 	 .4byte .LASF266
 7268 01d5 05       	 .byte 0x5
 7269 01d6 2001     	 .2byte 0x120
 7270 01d8 0B       	 .byte 0xb
 7271 01d9 43020000 	 .4byte 0x243
 7272 01dd 03       	 .uleb128 0x3
 7273 01de B9080000 	 .4byte .LASF5
 7274 01e2 05       	 .byte 0x5
 7275 01e3 2201     	 .2byte 0x122
 7276 01e5 41       	 .byte 0x41
ARM GAS   			page 214


 7277 01e6 04       	 .uleb128 0x4
 7278 01e7 05       	 .byte 0x5
 7279 01e8 2201     	 .2byte 0x122
 7280 01ea 41       	 .byte 0x41
 7281 01eb DD010000 	 .4byte 0x1dd
 7282 01ef 05       	 .uleb128 0x5
 7283 01f0 03       	 .byte 0x3
 7284 01f1 C8       	 .byte 0xc8
 7285 01f2 0B       	 .byte 0xb
 7286 01f3 80030000 	 .4byte 0x380
 7287 01f7 05       	 .uleb128 0x5
 7288 01f8 03       	 .byte 0x3
 7289 01f9 D8       	 .byte 0xd8
 7290 01fa 0B       	 .byte 0xb
 7291 01fb F2050000 	 .4byte 0x5f2
 7292 01ff 05       	 .uleb128 0x5
 7293 0200 03       	 .byte 0x3
 7294 0201 E3       	 .byte 0xe3
 7295 0202 0B       	 .byte 0xb
 7296 0203 0E060000 	 .4byte 0x60e
 7297 0207 05       	 .uleb128 0x5
 7298 0208 03       	 .byte 0x3
 7299 0209 E4       	 .byte 0xe4
 7300 020a 0B       	 .byte 0xb
 7301 020b 25060000 	 .4byte 0x625
 7302 020f 05       	 .uleb128 0x5
 7303 0210 03       	 .byte 0x3
 7304 0211 E5       	 .byte 0xe5
 7305 0212 0B       	 .byte 0xb
 7306 0213 46060000 	 .4byte 0x646
 7307 0217 05       	 .uleb128 0x5
 7308 0218 03       	 .byte 0x3
 7309 0219 E7       	 .byte 0xe7
 7310 021a 0B       	 .byte 0xb
 7311 021b 67060000 	 .4byte 0x667
 7312 021f 05       	 .uleb128 0x5
 7313 0220 03       	 .byte 0x3
 7314 0221 E8       	 .byte 0xe8
 7315 0222 0B       	 .byte 0xb
 7316 0223 89060000 	 .4byte 0x689
 7317 0227 08       	 .uleb128 0x8
 7318 0228 64697600 	 .ascii "div\000"
 7319 022c 03       	 .byte 0x3
 7320 022d D5       	 .byte 0xd5
 7321 022e 03       	 .byte 0x3
 7322 022f 9D010000 	 .4byte .LASF7
 7323 0233 80030000 	 .4byte 0x380
 7324 0237 07       	 .uleb128 0x7
 7325 0238 5D020000 	 .4byte 0x25d
 7326 023c 07       	 .uleb128 0x7
 7327 023d 5D020000 	 .4byte 0x25d
 7328 0241 00       	 .byte 0
 7329 0242 00       	 .byte 0
 7330 0243 0A       	 .uleb128 0xa
 7331 0244 C3040000 	 .4byte .LASF12
 7332 0248 06       	 .byte 0x6
 7333 0249 D1       	 .byte 0xd1
ARM GAS   			page 215


 7334 024a 17       	 .byte 0x17
 7335 024b 4F020000 	 .4byte 0x24f
 7336 024f 0B       	 .uleb128 0xb
 7337 0250 04       	 .byte 0x4
 7338 0251 07       	 .byte 0x7
 7339 0252 EB000000 	 .4byte .LASF8
 7340 0256 0C       	 .uleb128 0xc
 7341 0257 04       	 .byte 0x4
 7342 0258 05       	 .byte 0x5
 7343 0259 696E7400 	 .ascii "int\000"
 7344 025d 0B       	 .uleb128 0xb
 7345 025e 08       	 .byte 0x8
 7346 025f 05       	 .byte 0x5
 7347 0260 49070000 	 .4byte .LASF9
 7348 0264 0B       	 .uleb128 0xb
 7349 0265 08       	 .byte 0x8
 7350 0266 04       	 .byte 0x4
 7351 0267 5E0A0000 	 .4byte .LASF10
 7352 026b 0D       	 .uleb128 0xd
 7353 026c BF0D0000 	 .4byte .LASF267
 7354 0270 0B       	 .uleb128 0xb
 7355 0271 01       	 .byte 0x1
 7356 0272 06       	 .byte 0x6
 7357 0273 CD0E0000 	 .4byte .LASF11
 7358 0277 0A       	 .uleb128 0xa
 7359 0278 290C0000 	 .4byte .LASF13
 7360 027c 07       	 .byte 0x7
 7361 027d 2B       	 .byte 0x2b
 7362 027e 18       	 .byte 0x18
 7363 027f 83020000 	 .4byte 0x283
 7364 0283 0B       	 .uleb128 0xb
 7365 0284 01       	 .byte 0x1
 7366 0285 08       	 .byte 0x8
 7367 0286 370D0000 	 .4byte .LASF14
 7368 028a 0B       	 .uleb128 0xb
 7369 028b 02       	 .byte 0x2
 7370 028c 05       	 .byte 0x5
 7371 028d D10A0000 	 .4byte .LASF15
 7372 0291 0A       	 .uleb128 0xa
 7373 0292 55040000 	 .4byte .LASF16
 7374 0296 07       	 .byte 0x7
 7375 0297 39       	 .byte 0x39
 7376 0298 19       	 .byte 0x19
 7377 0299 9D020000 	 .4byte 0x29d
 7378 029d 0B       	 .uleb128 0xb
 7379 029e 02       	 .byte 0x2
 7380 029f 07       	 .byte 0x7
 7381 02a0 FD0E0000 	 .4byte .LASF17
 7382 02a4 0B       	 .uleb128 0xb
 7383 02a5 04       	 .byte 0x4
 7384 02a6 05       	 .byte 0x5
 7385 02a7 0A0B0000 	 .4byte .LASF18
 7386 02ab 0A       	 .uleb128 0xa
 7387 02ac 860D0000 	 .4byte .LASF19
 7388 02b0 07       	 .byte 0x7
 7389 02b1 4F       	 .byte 0x4f
 7390 02b2 19       	 .byte 0x19
ARM GAS   			page 216


 7391 02b3 B7020000 	 .4byte 0x2b7
 7392 02b7 0B       	 .uleb128 0xb
 7393 02b8 04       	 .byte 0x4
 7394 02b9 07       	 .byte 0x7
 7395 02ba A90C0000 	 .4byte .LASF20
 7396 02be 0B       	 .uleb128 0xb
 7397 02bf 08       	 .byte 0x8
 7398 02c0 07       	 .byte 0x7
 7399 02c1 C5030000 	 .4byte .LASF21
 7400 02c5 0E       	 .uleb128 0xe
 7401 02c6 04       	 .byte 0x4
 7402 02c7 0F       	 .uleb128 0xf
 7403 02c8 C5020000 	 .4byte 0x2c5
 7404 02cc 10       	 .uleb128 0x10
 7405 02cd 04       	 .byte 0x4
 7406 02ce D2020000 	 .4byte 0x2d2
 7407 02d2 11       	 .uleb128 0x11
 7408 02d3 10       	 .uleb128 0x10
 7409 02d4 04       	 .byte 0x4
 7410 02d5 D9020000 	 .4byte 0x2d9
 7411 02d9 0B       	 .uleb128 0xb
 7412 02da 01       	 .byte 0x1
 7413 02db 08       	 .byte 0x8
 7414 02dc 3C060000 	 .4byte .LASF22
 7415 02e0 0F       	 .uleb128 0xf
 7416 02e1 D9020000 	 .4byte 0x2d9
 7417 02e5 10       	 .uleb128 0x10
 7418 02e6 04       	 .byte 0x4
 7419 02e7 E0020000 	 .4byte 0x2e0
 7420 02eb 0F       	 .uleb128 0xf
 7421 02ec E5020000 	 .4byte 0x2e5
 7422 02f0 12       	 .uleb128 0x12
 7423 02f1 08       	 .byte 0x8
 7424 02f2 08       	 .byte 0x8
 7425 02f3 24       	 .byte 0x24
 7426 02f4 01       	 .byte 0x1
 7427 02f5 4C060000 	 .4byte .LASF25
 7428 02f9 18030000 	 .4byte 0x318
 7429 02fd 13       	 .uleb128 0x13
 7430 02fe DA060000 	 .4byte .LASF23
 7431 0302 08       	 .byte 0x8
 7432 0303 25       	 .byte 0x25
 7433 0304 07       	 .byte 0x7
 7434 0305 56020000 	 .4byte 0x256
 7435 0309 00       	 .byte 0
 7436 030a 14       	 .uleb128 0x14
 7437 030b 72656D00 	 .ascii "rem\000"
 7438 030f 08       	 .byte 0x8
 7439 0310 26       	 .byte 0x26
 7440 0311 07       	 .byte 0x7
 7441 0312 56020000 	 .4byte 0x256
 7442 0316 04       	 .byte 0x4
 7443 0317 00       	 .byte 0
 7444 0318 0A       	 .uleb128 0xa
 7445 0319 310D0000 	 .4byte .LASF24
 7446 031d 08       	 .byte 0x8
 7447 031e 27       	 .byte 0x27
ARM GAS   			page 217


 7448 031f 03       	 .byte 0x3
 7449 0320 F0020000 	 .4byte 0x2f0
 7450 0324 12       	 .uleb128 0x12
 7451 0325 08       	 .byte 0x8
 7452 0326 08       	 .byte 0x8
 7453 0327 2A       	 .byte 0x2a
 7454 0328 01       	 .byte 0x1
 7455 0329 680E0000 	 .4byte .LASF26
 7456 032d 4C030000 	 .4byte 0x34c
 7457 0331 13       	 .uleb128 0x13
 7458 0332 DA060000 	 .4byte .LASF23
 7459 0336 08       	 .byte 0x8
 7460 0337 2B       	 .byte 0x2b
 7461 0338 08       	 .byte 0x8
 7462 0339 A4020000 	 .4byte 0x2a4
 7463 033d 00       	 .byte 0
 7464 033e 14       	 .uleb128 0x14
 7465 033f 72656D00 	 .ascii "rem\000"
 7466 0343 08       	 .byte 0x8
 7467 0344 2C       	 .byte 0x2c
 7468 0345 08       	 .byte 0x8
 7469 0346 A4020000 	 .4byte 0x2a4
 7470 034a 04       	 .byte 0x4
 7471 034b 00       	 .byte 0
 7472 034c 0A       	 .uleb128 0xa
 7473 034d 150C0000 	 .4byte .LASF27
 7474 0351 08       	 .byte 0x8
 7475 0352 2D       	 .byte 0x2d
 7476 0353 03       	 .byte 0x3
 7477 0354 24030000 	 .4byte 0x324
 7478 0358 12       	 .uleb128 0x12
 7479 0359 10       	 .byte 0x10
 7480 035a 08       	 .byte 0x8
 7481 035b 31       	 .byte 0x31
 7482 035c 01       	 .byte 0x1
 7483 035d AD0E0000 	 .4byte .LASF28
 7484 0361 80030000 	 .4byte 0x380
 7485 0365 13       	 .uleb128 0x13
 7486 0366 DA060000 	 .4byte .LASF23
 7487 036a 08       	 .byte 0x8
 7488 036b 32       	 .byte 0x32
 7489 036c 11       	 .byte 0x11
 7490 036d 5D020000 	 .4byte 0x25d
 7491 0371 00       	 .byte 0
 7492 0372 14       	 .uleb128 0x14
 7493 0373 72656D00 	 .ascii "rem\000"
 7494 0377 08       	 .byte 0x8
 7495 0378 33       	 .byte 0x33
 7496 0379 11       	 .byte 0x11
 7497 037a 5D020000 	 .4byte 0x25d
 7498 037e 08       	 .byte 0x8
 7499 037f 00       	 .byte 0
 7500 0380 0A       	 .uleb128 0xa
 7501 0381 320F0000 	 .4byte .LASF29
 7502 0385 08       	 .byte 0x8
 7503 0386 34       	 .byte 0x34
 7504 0387 03       	 .byte 0x3
ARM GAS   			page 218


 7505 0388 58030000 	 .4byte 0x358
 7506 038c 0A       	 .uleb128 0xa
 7507 038d 82090000 	 .4byte .LASF30
 7508 0391 08       	 .byte 0x8
 7509 0392 39       	 .byte 0x39
 7510 0393 0F       	 .byte 0xf
 7511 0394 98030000 	 .4byte 0x398
 7512 0398 10       	 .uleb128 0x10
 7513 0399 04       	 .byte 0x4
 7514 039a 9E030000 	 .4byte 0x39e
 7515 039e 15       	 .uleb128 0x15
 7516 039f 56020000 	 .4byte 0x256
 7517 03a3 B2030000 	 .4byte 0x3b2
 7518 03a7 07       	 .uleb128 0x7
 7519 03a8 B2030000 	 .4byte 0x3b2
 7520 03ac 07       	 .uleb128 0x7
 7521 03ad B2030000 	 .4byte 0x3b2
 7522 03b1 00       	 .byte 0
 7523 03b2 10       	 .uleb128 0x10
 7524 03b3 04       	 .byte 0x4
 7525 03b4 B8030000 	 .4byte 0x3b8
 7526 03b8 16       	 .uleb128 0x16
 7527 03b9 17       	 .uleb128 0x17
 7528 03ba 930B0000 	 .4byte .LASF31
 7529 03be 08       	 .byte 0x8
 7530 03bf 4C       	 .byte 0x4c
 7531 03c0 05       	 .byte 0x5
 7532 03c1 56020000 	 .4byte 0x256
 7533 03c5 CF030000 	 .4byte 0x3cf
 7534 03c9 07       	 .uleb128 0x7
 7535 03ca CC020000 	 .4byte 0x2cc
 7536 03ce 00       	 .byte 0
 7537 03cf 17       	 .uleb128 0x17
 7538 03d0 3A0F0000 	 .4byte .LASF32
 7539 03d4 08       	 .byte 0x8
 7540 03d5 4D       	 .byte 0x4d
 7541 03d6 08       	 .byte 0x8
 7542 03d7 E5030000 	 .4byte 0x3e5
 7543 03db E5030000 	 .4byte 0x3e5
 7544 03df 07       	 .uleb128 0x7
 7545 03e0 E5020000 	 .4byte 0x2e5
 7546 03e4 00       	 .byte 0
 7547 03e5 0B       	 .uleb128 0xb
 7548 03e6 08       	 .byte 0x8
 7549 03e7 04       	 .byte 0x4
 7550 03e8 560F0000 	 .4byte .LASF33
 7551 03ec 17       	 .uleb128 0x17
 7552 03ed 450F0000 	 .4byte .LASF34
 7553 03f1 08       	 .byte 0x8
 7554 03f2 51       	 .byte 0x51
 7555 03f3 05       	 .byte 0x5
 7556 03f4 56020000 	 .4byte 0x256
 7557 03f8 02040000 	 .4byte 0x402
 7558 03fc 07       	 .uleb128 0x7
 7559 03fd E5020000 	 .4byte 0x2e5
 7560 0401 00       	 .byte 0
 7561 0402 17       	 .uleb128 0x17
ARM GAS   			page 219


 7562 0403 4A0F0000 	 .4byte .LASF35
 7563 0407 08       	 .byte 0x8
 7564 0408 53       	 .byte 0x53
 7565 0409 06       	 .byte 0x6
 7566 040a A4020000 	 .4byte 0x2a4
 7567 040e 18040000 	 .4byte 0x418
 7568 0412 07       	 .uleb128 0x7
 7569 0413 E5020000 	 .4byte 0x2e5
 7570 0417 00       	 .byte 0
 7571 0418 17       	 .uleb128 0x17
 7572 0419 07050000 	 .4byte .LASF36
 7573 041d 08       	 .byte 0x8
 7574 041e 55       	 .byte 0x55
 7575 041f 08       	 .byte 0x8
 7576 0420 C5020000 	 .4byte 0x2c5
 7577 0424 42040000 	 .4byte 0x442
 7578 0428 07       	 .uleb128 0x7
 7579 0429 B2030000 	 .4byte 0x3b2
 7580 042d 07       	 .uleb128 0x7
 7581 042e B2030000 	 .4byte 0x3b2
 7582 0432 07       	 .uleb128 0x7
 7583 0433 43020000 	 .4byte 0x243
 7584 0437 07       	 .uleb128 0x7
 7585 0438 43020000 	 .4byte 0x243
 7586 043c 07       	 .uleb128 0x7
 7587 043d 8C030000 	 .4byte 0x38c
 7588 0441 00       	 .byte 0
 7589 0442 18       	 .uleb128 0x18
 7590 0443 64697600 	 .ascii "div\000"
 7591 0447 08       	 .byte 0x8
 7592 0448 5C       	 .byte 0x5c
 7593 0449 07       	 .byte 0x7
 7594 044a 18030000 	 .4byte 0x318
 7595 044e 5D040000 	 .4byte 0x45d
 7596 0452 07       	 .uleb128 0x7
 7597 0453 56020000 	 .4byte 0x256
 7598 0457 07       	 .uleb128 0x7
 7599 0458 56020000 	 .4byte 0x256
 7600 045c 00       	 .byte 0
 7601 045d 17       	 .uleb128 0x17
 7602 045e 00000000 	 .4byte .LASF37
 7603 0462 08       	 .byte 0x8
 7604 0463 5F       	 .byte 0x5f
 7605 0464 09       	 .byte 0x9
 7606 0465 D3020000 	 .4byte 0x2d3
 7607 0469 73040000 	 .4byte 0x473
 7608 046d 07       	 .uleb128 0x7
 7609 046e E5020000 	 .4byte 0x2e5
 7610 0472 00       	 .byte 0
 7611 0473 17       	 .uleb128 0x17
 7612 0474 4D090000 	 .4byte .LASF38
 7613 0478 08       	 .byte 0x8
 7614 0479 6B       	 .byte 0x6b
 7615 047a 08       	 .byte 0x8
 7616 047b 4C030000 	 .4byte 0x34c
 7617 047f 8E040000 	 .4byte 0x48e
 7618 0483 07       	 .uleb128 0x7
ARM GAS   			page 220


 7619 0484 A4020000 	 .4byte 0x2a4
 7620 0488 07       	 .uleb128 0x7
 7621 0489 A4020000 	 .4byte 0x2a4
 7622 048d 00       	 .byte 0
 7623 048e 17       	 .uleb128 0x17
 7624 048f E5000000 	 .4byte .LASF39
 7625 0493 08       	 .byte 0x8
 7626 0494 6D       	 .byte 0x6d
 7627 0495 05       	 .byte 0x5
 7628 0496 56020000 	 .4byte 0x256
 7629 049a A9040000 	 .4byte 0x4a9
 7630 049e 07       	 .uleb128 0x7
 7631 049f E5020000 	 .4byte 0x2e5
 7632 04a3 07       	 .uleb128 0x7
 7633 04a4 43020000 	 .4byte 0x243
 7634 04a8 00       	 .byte 0
 7635 04a9 17       	 .uleb128 0x17
 7636 04aa 09070000 	 .4byte .LASF40
 7637 04ae 08       	 .byte 0x8
 7638 04af 73       	 .byte 0x73
 7639 04b0 08       	 .byte 0x8
 7640 04b1 43020000 	 .4byte 0x243
 7641 04b5 C9040000 	 .4byte 0x4c9
 7642 04b9 07       	 .uleb128 0x7
 7643 04ba C9040000 	 .4byte 0x4c9
 7644 04be 07       	 .uleb128 0x7
 7645 04bf E5020000 	 .4byte 0x2e5
 7646 04c3 07       	 .uleb128 0x7
 7647 04c4 43020000 	 .4byte 0x243
 7648 04c8 00       	 .byte 0
 7649 04c9 10       	 .uleb128 0x10
 7650 04ca 04       	 .byte 0x4
 7651 04cb CF040000 	 .4byte 0x4cf
 7652 04cf 0B       	 .uleb128 0xb
 7653 04d0 04       	 .byte 0x4
 7654 04d1 07       	 .byte 0x7
 7655 04d2 64010000 	 .4byte .LASF41
 7656 04d6 0F       	 .uleb128 0xf
 7657 04d7 CF040000 	 .4byte 0x4cf
 7658 04db 17       	 .uleb128 0x17
 7659 04dc 4E030000 	 .4byte .LASF42
 7660 04e0 08       	 .byte 0x8
 7661 04e1 6F       	 .byte 0x6f
 7662 04e2 05       	 .byte 0x5
 7663 04e3 56020000 	 .4byte 0x256
 7664 04e7 FB040000 	 .4byte 0x4fb
 7665 04eb 07       	 .uleb128 0x7
 7666 04ec C9040000 	 .4byte 0x4c9
 7667 04f0 07       	 .uleb128 0x7
 7668 04f1 E5020000 	 .4byte 0x2e5
 7669 04f5 07       	 .uleb128 0x7
 7670 04f6 43020000 	 .4byte 0x243
 7671 04fa 00       	 .byte 0
 7672 04fb 19       	 .uleb128 0x19
 7673 04fc A5100000 	 .4byte .LASF43
 7674 0500 08       	 .byte 0x8
 7675 0501 8F       	 .byte 0x8f
ARM GAS   			page 221


 7676 0502 06       	 .byte 0x6
 7677 0503 1C050000 	 .4byte 0x51c
 7678 0507 07       	 .uleb128 0x7
 7679 0508 C5020000 	 .4byte 0x2c5
 7680 050c 07       	 .uleb128 0x7
 7681 050d 43020000 	 .4byte 0x243
 7682 0511 07       	 .uleb128 0x7
 7683 0512 43020000 	 .4byte 0x243
 7684 0516 07       	 .uleb128 0x7
 7685 0517 8C030000 	 .4byte 0x38c
 7686 051b 00       	 .byte 0
 7687 051c 1A       	 .uleb128 0x1a
 7688 051d 2D000000 	 .4byte .LASF268
 7689 0521 08       	 .byte 0x8
 7690 0522 90       	 .byte 0x90
 7691 0523 05       	 .byte 0x5
 7692 0524 56020000 	 .4byte 0x256
 7693 0528 19       	 .uleb128 0x19
 7694 0529 D1040000 	 .4byte .LASF44
 7695 052d 08       	 .byte 0x8
 7696 052e 9F       	 .byte 0x9f
 7697 052f 06       	 .byte 0x6
 7698 0530 3A050000 	 .4byte 0x53a
 7699 0534 07       	 .uleb128 0x7
 7700 0535 4F020000 	 .4byte 0x24f
 7701 0539 00       	 .byte 0
 7702 053a 17       	 .uleb128 0x17
 7703 053b CA040000 	 .4byte .LASF45
 7704 053f 08       	 .byte 0x8
 7705 0540 A0       	 .byte 0xa0
 7706 0541 08       	 .byte 0x8
 7707 0542 E5030000 	 .4byte 0x3e5
 7708 0546 55050000 	 .4byte 0x555
 7709 054a 07       	 .uleb128 0x7
 7710 054b E5020000 	 .4byte 0x2e5
 7711 054f 07       	 .uleb128 0x7
 7712 0550 55050000 	 .4byte 0x555
 7713 0554 00       	 .byte 0
 7714 0555 10       	 .uleb128 0x10
 7715 0556 04       	 .byte 0x4
 7716 0557 D3020000 	 .4byte 0x2d3
 7717 055b 17       	 .uleb128 0x17
 7718 055c F30D0000 	 .4byte .LASF46
 7719 0560 08       	 .byte 0x8
 7720 0561 AB       	 .byte 0xab
 7721 0562 06       	 .byte 0x6
 7722 0563 A4020000 	 .4byte 0x2a4
 7723 0567 7B050000 	 .4byte 0x57b
 7724 056b 07       	 .uleb128 0x7
 7725 056c E5020000 	 .4byte 0x2e5
 7726 0570 07       	 .uleb128 0x7
 7727 0571 55050000 	 .4byte 0x555
 7728 0575 07       	 .uleb128 0x7
 7729 0576 56020000 	 .4byte 0x256
 7730 057a 00       	 .byte 0
 7731 057b 17       	 .uleb128 0x17
 7732 057c 930C0000 	 .4byte .LASF47
ARM GAS   			page 222


 7733 0580 08       	 .byte 0x8
 7734 0581 AD       	 .byte 0xad
 7735 0582 0F       	 .byte 0xf
 7736 0583 B7020000 	 .4byte 0x2b7
 7737 0587 9B050000 	 .4byte 0x59b
 7738 058b 07       	 .uleb128 0x7
 7739 058c E5020000 	 .4byte 0x2e5
 7740 0590 07       	 .uleb128 0x7
 7741 0591 55050000 	 .4byte 0x555
 7742 0595 07       	 .uleb128 0x7
 7743 0596 56020000 	 .4byte 0x256
 7744 059a 00       	 .byte 0
 7745 059b 17       	 .uleb128 0x17
 7746 059c 32000000 	 .4byte .LASF48
 7747 05a0 08       	 .byte 0x8
 7748 05a1 BF       	 .byte 0xbf
 7749 05a2 05       	 .byte 0x5
 7750 05a3 56020000 	 .4byte 0x256
 7751 05a7 B1050000 	 .4byte 0x5b1
 7752 05ab 07       	 .uleb128 0x7
 7753 05ac E5020000 	 .4byte 0x2e5
 7754 05b0 00       	 .byte 0
 7755 05b1 17       	 .uleb128 0x17
 7756 05b2 EA0D0000 	 .4byte .LASF49
 7757 05b6 08       	 .byte 0x8
 7758 05b7 75       	 .byte 0x75
 7759 05b8 08       	 .byte 0x8
 7760 05b9 43020000 	 .4byte 0x243
 7761 05bd D1050000 	 .4byte 0x5d1
 7762 05c1 07       	 .uleb128 0x7
 7763 05c2 D3020000 	 .4byte 0x2d3
 7764 05c6 07       	 .uleb128 0x7
 7765 05c7 D1050000 	 .4byte 0x5d1
 7766 05cb 07       	 .uleb128 0x7
 7767 05cc 43020000 	 .4byte 0x243
 7768 05d0 00       	 .byte 0
 7769 05d1 10       	 .uleb128 0x10
 7770 05d2 04       	 .byte 0x4
 7771 05d3 D6040000 	 .4byte 0x4d6
 7772 05d7 17       	 .uleb128 0x17
 7773 05d8 4F0F0000 	 .4byte .LASF50
 7774 05dc 08       	 .byte 0x8
 7775 05dd 71       	 .byte 0x71
 7776 05de 05       	 .byte 0x5
 7777 05df 56020000 	 .4byte 0x256
 7778 05e3 F2050000 	 .4byte 0x5f2
 7779 05e7 07       	 .uleb128 0x7
 7780 05e8 D3020000 	 .4byte 0x2d3
 7781 05ec 07       	 .uleb128 0x7
 7782 05ed CF040000 	 .4byte 0x4cf
 7783 05f1 00       	 .byte 0
 7784 05f2 1B       	 .uleb128 0x1b
 7785 05f3 81040000 	 .4byte .LASF51
 7786 05f7 08       	 .byte 0x8
 7787 05f8 0C01     	 .2byte 0x10c
 7788 05fa 09       	 .byte 0x9
 7789 05fb 80030000 	 .4byte 0x380
ARM GAS   			page 223


 7790 05ff 0E060000 	 .4byte 0x60e
 7791 0603 07       	 .uleb128 0x7
 7792 0604 5D020000 	 .4byte 0x25d
 7793 0608 07       	 .uleb128 0x7
 7794 0609 5D020000 	 .4byte 0x25d
 7795 060d 00       	 .byte 0
 7796 060e 1B       	 .uleb128 0x1b
 7797 060f 87040000 	 .4byte .LASF52
 7798 0613 08       	 .byte 0x8
 7799 0614 0701     	 .2byte 0x107
 7800 0616 0B       	 .byte 0xb
 7801 0617 5D020000 	 .4byte 0x25d
 7802 061b 25060000 	 .4byte 0x625
 7803 061f 07       	 .uleb128 0x7
 7804 0620 E5020000 	 .4byte 0x2e5
 7805 0624 00       	 .byte 0
 7806 0625 1B       	 .uleb128 0x1b
 7807 0626 24030000 	 .4byte .LASF53
 7808 062a 08       	 .byte 0x8
 7809 062b 0D01     	 .2byte 0x10d
 7810 062d 0B       	 .byte 0xb
 7811 062e 5D020000 	 .4byte 0x25d
 7812 0632 46060000 	 .4byte 0x646
 7813 0636 07       	 .uleb128 0x7
 7814 0637 E5020000 	 .4byte 0x2e5
 7815 063b 07       	 .uleb128 0x7
 7816 063c 55050000 	 .4byte 0x555
 7817 0640 07       	 .uleb128 0x7
 7818 0641 56020000 	 .4byte 0x256
 7819 0645 00       	 .byte 0
 7820 0646 1B       	 .uleb128 0x1b
 7821 0647 D9010000 	 .4byte .LASF54
 7822 064b 08       	 .byte 0x8
 7823 064c 1101     	 .2byte 0x111
 7824 064e 14       	 .byte 0x14
 7825 064f BE020000 	 .4byte 0x2be
 7826 0653 67060000 	 .4byte 0x667
 7827 0657 07       	 .uleb128 0x7
 7828 0658 E5020000 	 .4byte 0x2e5
 7829 065c 07       	 .uleb128 0x7
 7830 065d 55050000 	 .4byte 0x555
 7831 0661 07       	 .uleb128 0x7
 7832 0662 56020000 	 .4byte 0x256
 7833 0666 00       	 .byte 0
 7834 0667 17       	 .uleb128 0x17
 7835 0668 D10D0000 	 .4byte .LASF55
 7836 066c 08       	 .byte 0x8
 7837 066d A3       	 .byte 0xa3
 7838 066e 07       	 .byte 0x7
 7839 066f 82060000 	 .4byte 0x682
 7840 0673 82060000 	 .4byte 0x682
 7841 0677 07       	 .uleb128 0x7
 7842 0678 E5020000 	 .4byte 0x2e5
 7843 067c 07       	 .uleb128 0x7
 7844 067d 55050000 	 .4byte 0x555
 7845 0681 00       	 .byte 0
 7846 0682 0B       	 .uleb128 0xb
ARM GAS   			page 224


 7847 0683 04       	 .byte 0x4
 7848 0684 04       	 .byte 0x4
 7849 0685 7A030000 	 .4byte .LASF56
 7850 0689 1B       	 .uleb128 0x1b
 7851 068a 15030000 	 .4byte .LASF57
 7852 068e 08       	 .byte 0x8
 7853 068f 4401     	 .2byte 0x144
 7854 0691 14       	 .byte 0x14
 7855 0692 64020000 	 .4byte 0x264
 7856 0696 A5060000 	 .4byte 0x6a5
 7857 069a 07       	 .uleb128 0x7
 7858 069b E5020000 	 .4byte 0x2e5
 7859 069f 07       	 .uleb128 0x7
 7860 06a0 55050000 	 .4byte 0x555
 7861 06a4 00       	 .byte 0
 7862 06a5 05       	 .uleb128 0x5
 7863 06a6 09       	 .byte 0x9
 7864 06a7 27       	 .byte 0x27
 7865 06a8 0C       	 .byte 0xc
 7866 06a9 B9030000 	 .4byte 0x3b9
 7867 06ad 05       	 .uleb128 0x5
 7868 06ae 09       	 .byte 0x9
 7869 06af 33       	 .byte 0x33
 7870 06b0 0C       	 .byte 0xc
 7871 06b1 18030000 	 .4byte 0x318
 7872 06b5 05       	 .uleb128 0x5
 7873 06b6 09       	 .byte 0x9
 7874 06b7 34       	 .byte 0x34
 7875 06b8 0C       	 .byte 0xc
 7876 06b9 4C030000 	 .4byte 0x34c
 7877 06bd 05       	 .uleb128 0x5
 7878 06be 09       	 .byte 0x9
 7879 06bf 36       	 .byte 0x36
 7880 06c0 0C       	 .byte 0xc
 7881 06c1 32010000 	 .4byte 0x132
 7882 06c5 05       	 .uleb128 0x5
 7883 06c6 09       	 .byte 0x9
 7884 06c7 36       	 .byte 0x36
 7885 06c8 0C       	 .byte 0xc
 7886 06c9 4C010000 	 .4byte 0x14c
 7887 06cd 05       	 .uleb128 0x5
 7888 06ce 09       	 .byte 0x9
 7889 06cf 36       	 .byte 0x36
 7890 06d0 0C       	 .byte 0xc
 7891 06d1 66010000 	 .4byte 0x166
 7892 06d5 05       	 .uleb128 0x5
 7893 06d6 09       	 .byte 0x9
 7894 06d7 36       	 .byte 0x36
 7895 06d8 0C       	 .byte 0xc
 7896 06d9 80010000 	 .4byte 0x180
 7897 06dd 05       	 .uleb128 0x5
 7898 06de 09       	 .byte 0x9
 7899 06df 36       	 .byte 0x36
 7900 06e0 0C       	 .byte 0xc
 7901 06e1 9A010000 	 .4byte 0x19a
 7902 06e5 05       	 .uleb128 0x5
 7903 06e6 09       	 .byte 0x9
ARM GAS   			page 225


 7904 06e7 37       	 .byte 0x37
 7905 06e8 0C       	 .byte 0xc
 7906 06e9 CF030000 	 .4byte 0x3cf
 7907 06ed 05       	 .uleb128 0x5
 7908 06ee 09       	 .byte 0x9
 7909 06ef 38       	 .byte 0x38
 7910 06f0 0C       	 .byte 0xc
 7911 06f1 EC030000 	 .4byte 0x3ec
 7912 06f5 05       	 .uleb128 0x5
 7913 06f6 09       	 .byte 0x9
 7914 06f7 39       	 .byte 0x39
 7915 06f8 0C       	 .byte 0xc
 7916 06f9 02040000 	 .4byte 0x402
 7917 06fd 05       	 .uleb128 0x5
 7918 06fe 09       	 .byte 0x9
 7919 06ff 3A       	 .byte 0x3a
 7920 0700 0C       	 .byte 0xc
 7921 0701 18040000 	 .4byte 0x418
 7922 0705 05       	 .uleb128 0x5
 7923 0706 09       	 .byte 0x9
 7924 0707 3C       	 .byte 0x3c
 7925 0708 0C       	 .byte 0xc
 7926 0709 27020000 	 .4byte 0x227
 7927 070d 05       	 .uleb128 0x5
 7928 070e 09       	 .byte 0x9
 7929 070f 3C       	 .byte 0x3c
 7930 0710 0C       	 .byte 0xc
 7931 0711 B4010000 	 .4byte 0x1b4
 7932 0715 05       	 .uleb128 0x5
 7933 0716 09       	 .byte 0x9
 7934 0717 3C       	 .byte 0x3c
 7935 0718 0C       	 .byte 0xc
 7936 0719 42040000 	 .4byte 0x442
 7937 071d 05       	 .uleb128 0x5
 7938 071e 09       	 .byte 0x9
 7939 071f 3E       	 .byte 0x3e
 7940 0720 0C       	 .byte 0xc
 7941 0721 5D040000 	 .4byte 0x45d
 7942 0725 05       	 .uleb128 0x5
 7943 0726 09       	 .byte 0x9
 7944 0727 40       	 .byte 0x40
 7945 0728 0C       	 .byte 0xc
 7946 0729 73040000 	 .4byte 0x473
 7947 072d 05       	 .uleb128 0x5
 7948 072e 09       	 .byte 0x9
 7949 072f 43       	 .byte 0x43
 7950 0730 0C       	 .byte 0xc
 7951 0731 8E040000 	 .4byte 0x48e
 7952 0735 05       	 .uleb128 0x5
 7953 0736 09       	 .byte 0x9
 7954 0737 44       	 .byte 0x44
 7955 0738 0C       	 .byte 0xc
 7956 0739 A9040000 	 .4byte 0x4a9
 7957 073d 05       	 .uleb128 0x5
 7958 073e 09       	 .byte 0x9
 7959 073f 45       	 .byte 0x45
 7960 0740 0C       	 .byte 0xc
ARM GAS   			page 226


 7961 0741 DB040000 	 .4byte 0x4db
 7962 0745 05       	 .uleb128 0x5
 7963 0746 09       	 .byte 0x9
 7964 0747 47       	 .byte 0x47
 7965 0748 0C       	 .byte 0xc
 7966 0749 FB040000 	 .4byte 0x4fb
 7967 074d 05       	 .uleb128 0x5
 7968 074e 09       	 .byte 0x9
 7969 074f 48       	 .byte 0x48
 7970 0750 0C       	 .byte 0xc
 7971 0751 1C050000 	 .4byte 0x51c
 7972 0755 05       	 .uleb128 0x5
 7973 0756 09       	 .byte 0x9
 7974 0757 4A       	 .byte 0x4a
 7975 0758 0C       	 .byte 0xc
 7976 0759 28050000 	 .4byte 0x528
 7977 075d 05       	 .uleb128 0x5
 7978 075e 09       	 .byte 0x9
 7979 075f 4B       	 .byte 0x4b
 7980 0760 0C       	 .byte 0xc
 7981 0761 3A050000 	 .4byte 0x53a
 7982 0765 05       	 .uleb128 0x5
 7983 0766 09       	 .byte 0x9
 7984 0767 4C       	 .byte 0x4c
 7985 0768 0C       	 .byte 0xc
 7986 0769 5B050000 	 .4byte 0x55b
 7987 076d 05       	 .uleb128 0x5
 7988 076e 09       	 .byte 0x9
 7989 076f 4D       	 .byte 0x4d
 7990 0770 0C       	 .byte 0xc
 7991 0771 7B050000 	 .4byte 0x57b
 7992 0775 05       	 .uleb128 0x5
 7993 0776 09       	 .byte 0x9
 7994 0777 4E       	 .byte 0x4e
 7995 0778 0C       	 .byte 0xc
 7996 0779 9B050000 	 .4byte 0x59b
 7997 077d 05       	 .uleb128 0x5
 7998 077e 09       	 .byte 0x9
 7999 077f 50       	 .byte 0x50
 8000 0780 0C       	 .byte 0xc
 8001 0781 B1050000 	 .4byte 0x5b1
 8002 0785 05       	 .uleb128 0x5
 8003 0786 09       	 .byte 0x9
 8004 0787 51       	 .byte 0x51
 8005 0788 0C       	 .byte 0xc
 8006 0789 D7050000 	 .4byte 0x5d7
 8007 078d 0A       	 .uleb128 0xa
 8008 078e CB060000 	 .4byte .LASF58
 8009 0792 0A       	 .byte 0xa
 8010 0793 18       	 .byte 0x18
 8011 0794 13       	 .byte 0x13
 8012 0795 77020000 	 .4byte 0x277
 8013 0799 0F       	 .uleb128 0xf
 8014 079a 8D070000 	 .4byte 0x78d
 8015 079e 0A       	 .uleb128 0xa
 8016 079f 790A0000 	 .4byte .LASF59
 8017 07a3 0A       	 .byte 0xa
ARM GAS   			page 227


 8018 07a4 24       	 .byte 0x24
 8019 07a5 14       	 .byte 0x14
 8020 07a6 91020000 	 .4byte 0x291
 8021 07aa 0F       	 .uleb128 0xf
 8022 07ab 9E070000 	 .4byte 0x79e
 8023 07af 0A       	 .uleb128 0xa
 8024 07b0 2C030000 	 .4byte .LASF60
 8025 07b4 0A       	 .byte 0xa
 8026 07b5 30       	 .byte 0x30
 8027 07b6 14       	 .byte 0x14
 8028 07b7 AB020000 	 .4byte 0x2ab
 8029 07bb 1C       	 .uleb128 0x1c
 8030 07bc AF070000 	 .4byte 0x7af
 8031 07c0 0A       	 .uleb128 0xa
 8032 07c1 FB080000 	 .4byte .LASF61
 8033 07c5 0B       	 .byte 0xb
 8034 07c6 4D       	 .byte 0x4d
 8035 07c7 10       	 .byte 0x10
 8036 07c8 CC070000 	 .4byte 0x7cc
 8037 07cc 10       	 .uleb128 0x10
 8038 07cd 04       	 .byte 0x4
 8039 07ce D2070000 	 .4byte 0x7d2
 8040 07d2 1D       	 .uleb128 0x1d
 8041 07d3 DD070000 	 .4byte 0x7dd
 8042 07d7 07       	 .uleb128 0x7
 8043 07d8 C5020000 	 .4byte 0x2c5
 8044 07dc 00       	 .byte 0
 8045 07dd 0A       	 .uleb128 0xa
 8046 07de D80D0000 	 .4byte .LASF62
 8047 07e2 02       	 .byte 0x2
 8048 07e3 61       	 .byte 0x61
 8049 07e4 18       	 .byte 0x18
 8050 07e5 AF070000 	 .4byte 0x7af
 8051 07e9 1C       	 .uleb128 0x1c
 8052 07ea DD070000 	 .4byte 0x7dd
 8053 07ee 0A       	 .uleb128 0xa
 8054 07ef AE080000 	 .4byte .LASF63
 8055 07f3 02       	 .byte 0x2
 8056 07f4 62       	 .byte 0x62
 8057 07f5 0E       	 .byte 0xe
 8058 07f6 A4020000 	 .4byte 0x2a4
 8059 07fa 1C       	 .uleb128 0x1c
 8060 07fb EE070000 	 .4byte 0x7ee
 8061 07ff 0A       	 .uleb128 0xa
 8062 0800 7D060000 	 .4byte .LASF64
 8063 0804 02       	 .byte 0x2
 8064 0805 63       	 .byte 0x63
 8065 0806 17       	 .byte 0x17
 8066 0807 B7020000 	 .4byte 0x2b7
 8067 080b 1C       	 .uleb128 0x1c
 8068 080c FF070000 	 .4byte 0x7ff
 8069 0810 0F       	 .uleb128 0xf
 8070 0811 FF070000 	 .4byte 0x7ff
 8071 0815 0A       	 .uleb128 0xa
 8072 0816 1C0A0000 	 .4byte .LASF65
 8073 081a 02       	 .byte 0x2
 8074 081b 69       	 .byte 0x69
ARM GAS   			page 228


 8075 081c 13       	 .byte 0x13
 8076 081d AF070000 	 .4byte 0x7af
 8077 0821 1C       	 .uleb128 0x1c
 8078 0822 15080000 	 .4byte 0x815
 8079 0826 0F       	 .uleb128 0xf
 8080 0827 15080000 	 .4byte 0x815
 8081 082b 1E       	 .uleb128 0x1e
 8082 082c 47010000 	 .4byte .LASF72
 8083 0830 14       	 .byte 0x14
 8084 0831 0C       	 .byte 0xc
 8085 0832 B5       	 .byte 0xb5
 8086 0833 08       	 .byte 0x8
 8087 0834 7A080000 	 .4byte 0x87a
 8088 0838 13       	 .uleb128 0x13
 8089 0839 FF0A0000 	 .4byte .LASF66
 8090 083d 0C       	 .byte 0xc
 8091 083e B8       	 .byte 0xb8
 8092 083f 21       	 .byte 0x21
 8093 0840 15080000 	 .4byte 0x815
 8094 0844 00       	 .byte 0
 8095 0845 13       	 .uleb128 0x13
 8096 0846 0A090000 	 .4byte .LASF67
 8097 084a 0C       	 .byte 0xc
 8098 084b B9       	 .byte 0xb9
 8099 084c 2A       	 .byte 0x2a
 8100 084d 7A080000 	 .4byte 0x87a
 8101 0851 04       	 .byte 0x4
 8102 0852 13       	 .uleb128 0x13
 8103 0853 35040000 	 .4byte .LASF68
 8104 0857 0C       	 .byte 0xc
 8105 0858 BA       	 .byte 0xba
 8106 0859 2A       	 .byte 0x2a
 8107 085a 7A080000 	 .4byte 0x87a
 8108 085e 08       	 .byte 0x8
 8109 085f 13       	 .uleb128 0x13
 8110 0860 FA0D0000 	 .4byte .LASF69
 8111 0864 0C       	 .byte 0xc
 8112 0865 BB       	 .byte 0xbb
 8113 0866 09       	 .byte 0x9
 8114 0867 C5020000 	 .4byte 0x2c5
 8115 086b 0C       	 .byte 0xc
 8116 086c 13       	 .uleb128 0x13
 8117 086d B80A0000 	 .4byte .LASF70
 8118 0871 0C       	 .byte 0xc
 8119 0872 BC       	 .byte 0xbc
 8120 0873 1D       	 .byte 0x1d
 8121 0874 C5020000 	 .4byte 0x2c5
 8122 0878 10       	 .byte 0x10
 8123 0879 00       	 .byte 0
 8124 087a 10       	 .uleb128 0x10
 8125 087b 04       	 .byte 0x4
 8126 087c 2B080000 	 .4byte 0x82b
 8127 0880 0A       	 .uleb128 0xa
 8128 0881 41060000 	 .4byte .LASF71
 8129 0885 0C       	 .byte 0xc
 8130 0886 BF       	 .byte 0xbf
 8131 0887 1B       	 .byte 0x1b
ARM GAS   			page 229


 8132 0888 2B080000 	 .4byte 0x82b
 8133 088c 1E       	 .uleb128 0x1e
 8134 088d F7040000 	 .4byte .LASF73
 8135 0891 0C       	 .byte 0xc
 8136 0892 0C       	 .byte 0xc
 8137 0893 C1       	 .byte 0xc1
 8138 0894 08       	 .byte 0x8
 8139 0895 C1080000 	 .4byte 0x8c1
 8140 0899 13       	 .uleb128 0x13
 8141 089a FF0A0000 	 .4byte .LASF66
 8142 089e 0C       	 .byte 0xc
 8143 089f C4       	 .byte 0xc4
 8144 08a0 21       	 .byte 0x21
 8145 08a1 15080000 	 .4byte 0x815
 8146 08a5 00       	 .byte 0
 8147 08a6 13       	 .uleb128 0x13
 8148 08a7 0A090000 	 .4byte .LASF67
 8149 08ab 0C       	 .byte 0xc
 8150 08ac C5       	 .byte 0xc5
 8151 08ad 2A       	 .byte 0x2a
 8152 08ae 7A080000 	 .4byte 0x87a
 8153 08b2 04       	 .byte 0x4
 8154 08b3 13       	 .uleb128 0x13
 8155 08b4 35040000 	 .4byte .LASF68
 8156 08b8 0C       	 .byte 0xc
 8157 08b9 C6       	 .byte 0xc6
 8158 08ba 2A       	 .byte 0x2a
 8159 08bb 7A080000 	 .4byte 0x87a
 8160 08bf 08       	 .byte 0x8
 8161 08c0 00       	 .byte 0
 8162 08c1 0A       	 .uleb128 0xa
 8163 08c2 BC060000 	 .4byte .LASF74
 8164 08c6 0C       	 .byte 0xc
 8165 08c7 C8       	 .byte 0xc8
 8166 08c8 20       	 .byte 0x20
 8167 08c9 8C080000 	 .4byte 0x88c
 8168 08cd 1E       	 .uleb128 0x1e
 8169 08ce 1A050000 	 .4byte .LASF75
 8170 08d2 14       	 .byte 0x14
 8171 08d3 0C       	 .byte 0xc
 8172 08d4 CD       	 .byte 0xcd
 8173 08d5 10       	 .byte 0x10
 8174 08d6 02090000 	 .4byte 0x902
 8175 08da 13       	 .uleb128 0x13
 8176 08db 12000000 	 .4byte .LASF76
 8177 08df 0C       	 .byte 0xc
 8178 08e0 D0       	 .byte 0xd0
 8179 08e1 22       	 .byte 0x22
 8180 08e2 FF070000 	 .4byte 0x7ff
 8181 08e6 00       	 .byte 0
 8182 08e7 13       	 .uleb128 0x13
 8183 08e8 16010000 	 .4byte .LASF77
 8184 08ec 0C       	 .byte 0xc
 8185 08ed D1       	 .byte 0xd1
 8186 08ee 23       	 .byte 0x23
 8187 08ef 02090000 	 .4byte 0x902
 8188 08f3 04       	 .byte 0x4
ARM GAS   			page 230


 8189 08f4 13       	 .uleb128 0x13
 8190 08f5 95060000 	 .4byte .LASF78
 8191 08f9 0C       	 .byte 0xc
 8192 08fa D2       	 .byte 0xd2
 8193 08fb 11       	 .byte 0x11
 8194 08fc C1080000 	 .4byte 0x8c1
 8195 0900 08       	 .byte 0x8
 8196 0901 00       	 .byte 0
 8197 0902 10       	 .uleb128 0x10
 8198 0903 04       	 .byte 0x4
 8199 0904 80080000 	 .4byte 0x880
 8200 0908 0A       	 .uleb128 0xa
 8201 0909 150A0000 	 .4byte .LASF79
 8202 090d 0C       	 .byte 0xc
 8203 090e D4       	 .byte 0xd4
 8204 090f 03       	 .byte 0x3
 8205 0910 CD080000 	 .4byte 0x8cd
 8206 0914 0F       	 .uleb128 0xf
 8207 0915 08090000 	 .4byte 0x908
 8208 0919 0A       	 .uleb128 0xa
 8209 091a A7090000 	 .4byte .LASF80
 8210 091e 0D       	 .byte 0xd
 8211 091f 67       	 .byte 0x67
 8212 0920 10       	 .byte 0x10
 8213 0921 C5020000 	 .4byte 0x2c5
 8214 0925 0F       	 .uleb128 0xf
 8215 0926 19090000 	 .4byte 0x919
 8216 092a 1F       	 .uleb128 0x1f
 8217 092b 07       	 .byte 0x7
 8218 092c 01       	 .byte 0x1
 8219 092d 83020000 	 .4byte 0x283
 8220 0931 0D       	 .byte 0xd
 8221 0932 71       	 .byte 0x71
 8222 0933 01       	 .byte 0x1
 8223 0934 9E060000 	 .4byte .LASF87
 8224 0938 5B090000 	 .4byte 0x95b
 8225 093c 20       	 .uleb128 0x20
 8226 093d FB0C0000 	 .4byte .LASF81
 8227 0941 00       	 .byte 0
 8228 0942 20       	 .uleb128 0x20
 8229 0943 D3060000 	 .4byte .LASF82
 8230 0947 01       	 .byte 0x1
 8231 0948 20       	 .uleb128 0x20
 8232 0949 020E0000 	 .4byte .LASF83
 8233 094d 02       	 .byte 0x2
 8234 094e 20       	 .uleb128 0x20
 8235 094f 45000000 	 .4byte .LASF84
 8236 0953 03       	 .byte 0x3
 8237 0954 20       	 .uleb128 0x20
 8238 0955 5B080000 	 .4byte .LASF85
 8239 0959 04       	 .byte 0x4
 8240 095a 00       	 .byte 0
 8241 095b 0A       	 .uleb128 0xa
 8242 095c FD090000 	 .4byte .LASF86
 8243 0960 0D       	 .byte 0xd
 8244 0961 77       	 .byte 0x77
 8245 0962 03       	 .byte 0x3
ARM GAS   			page 231


 8246 0963 2A090000 	 .4byte 0x92a
 8247 0967 1F       	 .uleb128 0x1f
 8248 0968 07       	 .byte 0x7
 8249 0969 01       	 .byte 0x1
 8250 096a 83020000 	 .4byte 0x283
 8251 096e 0D       	 .byte 0xd
 8252 096f 7B       	 .byte 0x7b
 8253 0970 01       	 .byte 0x1
 8254 0971 D90E0000 	 .4byte .LASF88
 8255 0975 98090000 	 .4byte 0x998
 8256 0979 20       	 .uleb128 0x20
 8257 097a C8000000 	 .4byte .LASF89
 8258 097e 00       	 .byte 0
 8259 097f 20       	 .uleb128 0x20
 8260 0980 3B0A0000 	 .4byte .LASF90
 8261 0984 01       	 .byte 0x1
 8262 0985 20       	 .uleb128 0x20
 8263 0986 EC040000 	 .4byte .LASF91
 8264 098a 02       	 .byte 0x2
 8265 098b 20       	 .uleb128 0x20
 8266 098c AE030000 	 .4byte .LASF92
 8267 0990 03       	 .byte 0x3
 8268 0991 20       	 .uleb128 0x20
 8269 0992 53060000 	 .4byte .LASF93
 8270 0996 04       	 .byte 0x4
 8271 0997 00       	 .byte 0
 8272 0998 0A       	 .uleb128 0xa
 8273 0999 B5040000 	 .4byte .LASF94
 8274 099d 0D       	 .byte 0xd
 8275 099e 81       	 .byte 0x81
 8276 099f 03       	 .byte 0x3
 8277 09a0 67090000 	 .4byte 0x967
 8278 09a4 1E       	 .uleb128 0x1e
 8279 09a5 3D010000 	 .4byte .LASF95
 8280 09a9 08       	 .byte 0x8
 8281 09aa 0D       	 .byte 0xd
 8282 09ab 86       	 .byte 0x86
 8283 09ac 10       	 .byte 0x10
 8284 09ad CC090000 	 .4byte 0x9cc
 8285 09b1 13       	 .uleb128 0x13
 8286 09b2 0F020000 	 .4byte .LASF96
 8287 09b6 0D       	 .byte 0xd
 8288 09b7 88       	 .byte 0x88
 8289 09b8 0D       	 .byte 0xd
 8290 09b9 EE070000 	 .4byte 0x7ee
 8291 09bd 00       	 .byte 0
 8292 09be 13       	 .uleb128 0x13
 8293 09bf DD080000 	 .4byte .LASF97
 8294 09c3 0D       	 .byte 0xd
 8295 09c4 89       	 .byte 0x89
 8296 09c5 0D       	 .byte 0xd
 8297 09c6 15080000 	 .4byte 0x815
 8298 09ca 04       	 .byte 0x4
 8299 09cb 00       	 .byte 0
 8300 09cc 0A       	 .uleb128 0xa
 8301 09cd 90090000 	 .4byte .LASF98
 8302 09d1 0D       	 .byte 0xd
ARM GAS   			page 232


 8303 09d2 8A       	 .byte 0x8a
 8304 09d3 03       	 .byte 0x3
 8305 09d4 A4090000 	 .4byte 0x9a4
 8306 09d8 1E       	 .uleb128 0x1e
 8307 09d9 6A0A0000 	 .4byte .LASF99
 8308 09dd 0C       	 .byte 0xc
 8309 09de 0D       	 .byte 0xd
 8310 09df 8F       	 .byte 0x8f
 8311 09e0 10       	 .byte 0x10
 8312 09e1 0D0A0000 	 .4byte 0xa0d
 8313 09e5 13       	 .uleb128 0x13
 8314 09e6 150D0000 	 .4byte .LASF100
 8315 09ea 0D       	 .byte 0xd
 8316 09eb 91       	 .byte 0x91
 8317 09ec 08       	 .byte 0x8
 8318 09ed C5020000 	 .4byte 0x2c5
 8319 09f1 00       	 .byte 0
 8320 09f2 13       	 .uleb128 0x13
 8321 09f3 9E080000 	 .4byte .LASF101
 8322 09f7 0D       	 .byte 0xd
 8323 09f8 92       	 .byte 0x92
 8324 09f9 0B       	 .byte 0xb
 8325 09fa AF070000 	 .4byte 0x7af
 8326 09fe 04       	 .byte 0x4
 8327 09ff 13       	 .uleb128 0x13
 8328 0a00 A5020000 	 .4byte .LASF102
 8329 0a04 0D       	 .byte 0xd
 8330 0a05 93       	 .byte 0x93
 8331 0a06 0B       	 .byte 0xb
 8332 0a07 AF070000 	 .4byte 0x7af
 8333 0a0b 08       	 .byte 0x8
 8334 0a0c 00       	 .byte 0
 8335 0a0d 0A       	 .uleb128 0xa
 8336 0a0e 12070000 	 .4byte .LASF103
 8337 0a12 0D       	 .byte 0xd
 8338 0a13 94       	 .byte 0x94
 8339 0a14 03       	 .byte 0x3
 8340 0a15 D8090000 	 .4byte 0x9d8
 8341 0a19 0F       	 .uleb128 0xf
 8342 0a1a 0D0A0000 	 .4byte 0xa0d
 8343 0a1e 10       	 .uleb128 0x10
 8344 0a1f 04       	 .byte 0x4
 8345 0a20 DD070000 	 .4byte 0x7dd
 8346 0a24 0F       	 .uleb128 0xf
 8347 0a25 1E0A0000 	 .4byte 0xa1e
 8348 0a29 1E       	 .uleb128 0x1e
 8349 0a2a 130B0000 	 .4byte .LASF104
 8350 0a2e 20       	 .byte 0x20
 8351 0a2f 0D       	 .byte 0xd
 8352 0a30 A6       	 .byte 0xa6
 8353 0a31 10       	 .byte 0x10
 8354 0a32 9F0A0000 	 .4byte 0xa9f
 8355 0a36 13       	 .uleb128 0x13
 8356 0a37 D7040000 	 .4byte .LASF105
 8357 0a3b 0D       	 .byte 0xd
 8358 0a3c A8       	 .byte 0xa8
 8359 0a3d 0F       	 .byte 0xf
ARM GAS   			page 233


 8360 0a3e 19090000 	 .4byte 0x919
 8361 0a42 00       	 .byte 0
 8362 0a43 13       	 .uleb128 0x13
 8363 0a44 07000000 	 .4byte .LASF106
 8364 0a48 0D       	 .byte 0xd
 8365 0a49 A9       	 .byte 0xa9
 8366 0a4a 0E       	 .byte 0xe
 8367 0a4b E5020000 	 .4byte 0x2e5
 8368 0a4f 04       	 .byte 0x4
 8369 0a50 13       	 .uleb128 0x13
 8370 0a51 8D020000 	 .4byte .LASF107
 8371 0a55 0D       	 .byte 0xd
 8372 0a56 AA       	 .byte 0xaa
 8373 0a57 0E       	 .byte 0xe
 8374 0a58 FF070000 	 .4byte 0x7ff
 8375 0a5c 08       	 .byte 0x8
 8376 0a5d 13       	 .uleb128 0x13
 8377 0a5e DB0A0000 	 .4byte .LASF108
 8378 0a62 0D       	 .byte 0xd
 8379 0a63 AB       	 .byte 0xab
 8380 0a64 0D       	 .byte 0xd
 8381 0a65 5B090000 	 .4byte 0x95b
 8382 0a69 0C       	 .byte 0xc
 8383 0a6a 13       	 .uleb128 0x13
 8384 0a6b DB050000 	 .4byte .LASF109
 8385 0a6f 0D       	 .byte 0xd
 8386 0a70 AC       	 .byte 0xac
 8387 0a71 0E       	 .byte 0xe
 8388 0a72 FF070000 	 .4byte 0x7ff
 8389 0a76 10       	 .byte 0x10
 8390 0a77 13       	 .uleb128 0x13
 8391 0a78 B00D0000 	 .4byte .LASF110
 8392 0a7c 0D       	 .byte 0xd
 8393 0a7d AD       	 .byte 0xad
 8394 0a7e 0E       	 .byte 0xe
 8395 0a7f FF070000 	 .4byte 0x7ff
 8396 0a83 14       	 .byte 0x14
 8397 0a84 13       	 .uleb128 0x13
 8398 0a85 040D0000 	 .4byte .LASF111
 8399 0a89 0D       	 .byte 0xd
 8400 0a8a AE       	 .byte 0xae
 8401 0a8b 0B       	 .byte 0xb
 8402 0a8c AF070000 	 .4byte 0x7af
 8403 0a90 18       	 .byte 0x18
 8404 0a91 13       	 .uleb128 0x13
 8405 0a92 980E0000 	 .4byte .LASF112
 8406 0a96 0D       	 .byte 0xd
 8407 0a97 AF       	 .byte 0xaf
 8408 0a98 0B       	 .byte 0xb
 8409 0a99 9E070000 	 .4byte 0x79e
 8410 0a9d 1C       	 .byte 0x1c
 8411 0a9e 00       	 .byte 0
 8412 0a9f 0A       	 .uleb128 0xa
 8413 0aa0 DF040000 	 .4byte .LASF113
 8414 0aa4 0D       	 .byte 0xd
 8415 0aa5 B0       	 .byte 0xb0
 8416 0aa6 03       	 .byte 0x3
ARM GAS   			page 234


 8417 0aa7 290A0000 	 .4byte 0xa29
 8418 0aab 1F       	 .uleb128 0x1f
 8419 0aac 07       	 .byte 0x7
 8420 0aad 01       	 .byte 0x1
 8421 0aae 83020000 	 .4byte 0x283
 8422 0ab2 01       	 .byte 0x1
 8423 0ab3 7B       	 .byte 0x7b
 8424 0ab4 01       	 .byte 0x1
 8425 0ab5 52090000 	 .4byte .LASF114
 8426 0ab9 D00A0000 	 .4byte 0xad0
 8427 0abd 20       	 .uleb128 0x20
 8428 0abe 330C0000 	 .4byte .LASF115
 8429 0ac2 00       	 .byte 0
 8430 0ac3 20       	 .uleb128 0x20
 8431 0ac4 2E090000 	 .4byte .LASF116
 8432 0ac8 01       	 .byte 0x1
 8433 0ac9 20       	 .uleb128 0x20
 8434 0aca 7C010000 	 .4byte .LASF117
 8435 0ace 02       	 .byte 0x2
 8436 0acf 00       	 .byte 0
 8437 0ad0 0A       	 .uleb128 0xa
 8438 0ad1 080A0000 	 .4byte .LASF118
 8439 0ad5 01       	 .byte 0x1
 8440 0ad6 7F       	 .byte 0x7f
 8441 0ad7 03       	 .byte 0x3
 8442 0ad8 AB0A0000 	 .4byte 0xaab
 8443 0adc 1C       	 .uleb128 0x1c
 8444 0add D00A0000 	 .4byte 0xad0
 8445 0ae1 1E       	 .uleb128 0x1e
 8446 0ae2 6E050000 	 .4byte .LASF119
 8447 0ae6 5C       	 .byte 0x5c
 8448 0ae7 01       	 .byte 0x1
 8449 0ae8 86       	 .byte 0x86
 8450 0ae9 10       	 .byte 0x10
 8451 0aea 8B0B0000 	 .4byte 0xb8b
 8452 0aee 13       	 .uleb128 0x13
 8453 0aef 27100000 	 .4byte .LASF120
 8454 0af3 01       	 .byte 0x1
 8455 0af4 88       	 .byte 0x88
 8456 0af5 18       	 .byte 0x18
 8457 0af6 8B0B0000 	 .4byte 0xb8b
 8458 0afa 00       	 .byte 0
 8459 0afb 13       	 .uleb128 0x13
 8460 0afc 9D000000 	 .4byte .LASF121
 8461 0b00 01       	 .byte 0x1
 8462 0b01 8F       	 .byte 0x8f
 8463 0b02 0F       	 .byte 0xf
 8464 0b03 80080000 	 .4byte 0x880
 8465 0b07 04       	 .byte 0x4
 8466 0b08 13       	 .uleb128 0x13
 8467 0b09 540C0000 	 .4byte .LASF122
 8468 0b0d 01       	 .byte 0x1
 8469 0b0e 90       	 .byte 0x90
 8470 0b0f 0F       	 .byte 0xf
 8471 0b10 80080000 	 .4byte 0x880
 8472 0b14 18       	 .byte 0x18
 8473 0b15 13       	 .uleb128 0x13
ARM GAS   			page 235


 8474 0b16 22000000 	 .4byte .LASF123
 8475 0b1a 01       	 .byte 0x1
 8476 0b1b 91       	 .byte 0x91
 8477 0b1c 10       	 .byte 0x10
 8478 0b1d FF070000 	 .4byte 0x7ff
 8479 0b21 2C       	 .byte 0x2c
 8480 0b22 13       	 .uleb128 0x13
 8481 0b23 E10B0000 	 .4byte .LASF124
 8482 0b27 01       	 .byte 0x1
 8483 0b28 92       	 .byte 0x92
 8484 0b29 11       	 .byte 0x11
 8485 0b2a 1E0A0000 	 .4byte 0xa1e
 8486 0b2e 30       	 .byte 0x30
 8487 0b2f 13       	 .uleb128 0x13
 8488 0b30 07000000 	 .4byte .LASF106
 8489 0b34 01       	 .byte 0x1
 8490 0b35 93       	 .byte 0x93
 8491 0b36 0A       	 .byte 0xa
 8492 0b37 910B0000 	 .4byte 0xb91
 8493 0b3b 34       	 .byte 0x34
 8494 0b3c 13       	 .uleb128 0x13
 8495 0b3d 99020000 	 .4byte .LASF125
 8496 0b41 01       	 .byte 0x1
 8497 0b42 9E       	 .byte 0x9e
 8498 0b43 10       	 .byte 0x10
 8499 0b44 FF070000 	 .4byte 0x7ff
 8500 0b48 44       	 .byte 0x44
 8501 0b49 13       	 .uleb128 0x13
 8502 0b4a 9A090000 	 .4byte .LASF126
 8503 0b4e 01       	 .byte 0x1
 8504 0b4f 9F       	 .byte 0x9f
 8505 0b50 11       	 .byte 0x11
 8506 0b51 FF070000 	 .4byte 0x7ff
 8507 0b55 48       	 .byte 0x48
 8508 0b56 13       	 .uleb128 0x13
 8509 0b57 B00D0000 	 .4byte .LASF110
 8510 0b5b 01       	 .byte 0x1
 8511 0b5c A3       	 .byte 0xa3
 8512 0b5d 10       	 .byte 0x10
 8513 0b5e FF070000 	 .4byte 0x7ff
 8514 0b62 4C       	 .byte 0x4c
 8515 0b63 13       	 .uleb128 0x13
 8516 0b64 FD050000 	 .4byte .LASF127
 8517 0b68 01       	 .byte 0x1
 8518 0b69 A4       	 .byte 0xa4
 8519 0b6a 10       	 .byte 0x10
 8520 0b6b FF070000 	 .4byte 0x7ff
 8521 0b6f 50       	 .byte 0x50
 8522 0b70 13       	 .uleb128 0x13
 8523 0b71 ED050000 	 .4byte .LASF128
 8524 0b75 01       	 .byte 0x1
 8525 0b76 BF       	 .byte 0xbf
 8526 0b77 15       	 .byte 0x15
 8527 0b78 BB070000 	 .4byte 0x7bb
 8528 0b7c 54       	 .byte 0x54
 8529 0b7d 13       	 .uleb128 0x13
 8530 0b7e E0020000 	 .4byte .LASF129
ARM GAS   			page 236


 8531 0b82 01       	 .byte 0x1
 8532 0b83 C0       	 .byte 0xc0
 8533 0b84 19       	 .byte 0x19
 8534 0b85 DC0A0000 	 .4byte 0xadc
 8535 0b89 58       	 .byte 0x58
 8536 0b8a 00       	 .byte 0
 8537 0b8b 10       	 .uleb128 0x10
 8538 0b8c 04       	 .byte 0x4
 8539 0b8d E9070000 	 .4byte 0x7e9
 8540 0b91 21       	 .uleb128 0x21
 8541 0b92 D9020000 	 .4byte 0x2d9
 8542 0b96 A10B0000 	 .4byte 0xba1
 8543 0b9a 22       	 .uleb128 0x22
 8544 0b9b 4F020000 	 .4byte 0x24f
 8545 0b9f 0F       	 .byte 0xf
 8546 0ba0 00       	 .byte 0
 8547 0ba1 0A       	 .uleb128 0xa
 8548 0ba2 1D030000 	 .4byte .LASF130
 8549 0ba6 01       	 .byte 0x1
 8550 0ba7 C3       	 .byte 0xc3
 8551 0ba8 03       	 .byte 0x3
 8552 0ba9 E10A0000 	 .4byte 0xae1
 8553 0bad 0A       	 .uleb128 0xa
 8554 0bae E40D0000 	 .4byte .LASF131
 8555 0bb2 01       	 .byte 0x1
 8556 0bb3 C7       	 .byte 0xc7
 8557 0bb4 10       	 .byte 0x10
 8558 0bb5 A10B0000 	 .4byte 0xba1
 8559 0bb9 1C       	 .uleb128 0x1c
 8560 0bba AD0B0000 	 .4byte 0xbad
 8561 0bbe 0F       	 .uleb128 0xf
 8562 0bbf AD0B0000 	 .4byte 0xbad
 8563 0bc3 23       	 .uleb128 0x23
 8564 0bc4 C40A0000 	 .4byte .LASF269
 8565 0bc8 01       	 .byte 0x1
 8566 0bc9 D4       	 .byte 0xd4
 8567 0bca 22       	 .byte 0x22
 8568 0bcb DB0B0000 	 .4byte 0xbdb
 8569 0bcf 05       	 .uleb128 0x5
 8570 0bd0 03       	 .byte 0x3
 8571 0bd1 00000000 	 .4byte pxCurrentTCB
 8572 0bd5 10       	 .uleb128 0x10
 8573 0bd6 04       	 .byte 0x4
 8574 0bd7 AD0B0000 	 .4byte 0xbad
 8575 0bdb 1C       	 .uleb128 0x1c
 8576 0bdc D50B0000 	 .4byte 0xbd5
 8577 0be0 0F       	 .uleb128 0xf
 8578 0be1 D50B0000 	 .4byte 0xbd5
 8579 0be5 21       	 .uleb128 0x21
 8580 0be6 08090000 	 .4byte 0x908
 8581 0bea F50B0000 	 .4byte 0xbf5
 8582 0bee 22       	 .uleb128 0x22
 8583 0bef 4F020000 	 .4byte 0x24f
 8584 0bf3 06       	 .byte 0x6
 8585 0bf4 00       	 .byte 0
 8586 0bf5 24       	 .uleb128 0x24
 8587 0bf6 52010000 	 .4byte .LASF132
ARM GAS   			page 237


 8588 0bfa 01       	 .byte 0x1
 8589 0bfb D7       	 .byte 0xd7
 8590 0bfc 1F       	 .byte 0x1f
 8591 0bfd E50B0000 	 .4byte 0xbe5
 8592 0c01 05       	 .uleb128 0x5
 8593 0c02 03       	 .byte 0x3
 8594 0c03 00000000 	 .4byte _ZL17pxReadyTasksLists
 8595 0c07 24       	 .uleb128 0x24
 8596 0c08 EB010000 	 .4byte .LASF133
 8597 0c0c 01       	 .byte 0x1
 8598 0c0d D8       	 .byte 0xd8
 8599 0c0e 1F       	 .byte 0x1f
 8600 0c0f 08090000 	 .4byte 0x908
 8601 0c13 05       	 .uleb128 0x5
 8602 0c14 03       	 .byte 0x3
 8603 0c15 00000000 	 .4byte _ZL17xDelayedTaskList1
 8604 0c19 24       	 .uleb128 0x24
 8605 0c1a FD010000 	 .4byte .LASF134
 8606 0c1e 01       	 .byte 0x1
 8607 0c1f D9       	 .byte 0xd9
 8608 0c20 1F       	 .byte 0x1f
 8609 0c21 08090000 	 .4byte 0x908
 8610 0c25 05       	 .uleb128 0x5
 8611 0c26 03       	 .byte 0x3
 8612 0c27 00000000 	 .4byte _ZL17xDelayedTaskList2
 8613 0c2b 24       	 .uleb128 0x24
 8614 0c2c 460B0000 	 .4byte .LASF135
 8615 0c30 01       	 .byte 0x1
 8616 0c31 DA       	 .byte 0xda
 8617 0c32 2A       	 .byte 0x2a
 8618 0c33 430C0000 	 .4byte 0xc43
 8619 0c37 05       	 .uleb128 0x5
 8620 0c38 03       	 .byte 0x3
 8621 0c39 00000000 	 .4byte _ZL17pxDelayedTaskList
 8622 0c3d 10       	 .uleb128 0x10
 8623 0c3e 04       	 .byte 0x4
 8624 0c3f 08090000 	 .4byte 0x908
 8625 0c43 1C       	 .uleb128 0x1c
 8626 0c44 3D0C0000 	 .4byte 0xc3d
 8627 0c48 0F       	 .uleb128 0xf
 8628 0c49 3D0C0000 	 .4byte 0xc3d
 8629 0c4d 24       	 .uleb128 0x24
 8630 0c4e 82050000 	 .4byte .LASF136
 8631 0c52 01       	 .byte 0x1
 8632 0c53 DB       	 .byte 0xdb
 8633 0c54 2A       	 .byte 0x2a
 8634 0c55 430C0000 	 .4byte 0xc43
 8635 0c59 05       	 .uleb128 0x5
 8636 0c5a 03       	 .byte 0x3
 8637 0c5b 00000000 	 .4byte _ZL25pxOverflowDelayedTaskList
 8638 0c5f 24       	 .uleb128 0x24
 8639 0c60 23040000 	 .4byte .LASF137
 8640 0c64 01       	 .byte 0x1
 8641 0c65 DC       	 .byte 0xdc
 8642 0c66 1F       	 .byte 0x1f
 8643 0c67 08090000 	 .4byte 0x908
 8644 0c6b 05       	 .uleb128 0x5
ARM GAS   			page 238


 8645 0c6c 03       	 .byte 0x3
 8646 0c6d 00000000 	 .4byte _ZL17xPendingReadyList
 8647 0c71 24       	 .uleb128 0x24
 8648 0c72 54050000 	 .4byte .LASF138
 8649 0c76 01       	 .byte 0x1
 8650 0c77 E7       	 .byte 0xe7
 8651 0c78 20       	 .byte 0x20
 8652 0c79 08090000 	 .4byte 0x908
 8653 0c7d 05       	 .uleb128 0x5
 8654 0c7e 03       	 .byte 0x3
 8655 0c7f 00000000 	 .4byte _ZL18xSuspendedTaskList
 8656 0c83 24       	 .uleb128 0x24
 8657 0c84 B60E0000 	 .4byte .LASF139
 8658 0c88 01       	 .byte 0x1
 8659 0c89 F2       	 .byte 0xf2
 8660 0c8a 2D       	 .byte 0x2d
 8661 0c8b 0B080000 	 .4byte 0x80b
 8662 0c8f 05       	 .uleb128 0x5
 8663 0c90 03       	 .byte 0x3
 8664 0c91 00000000 	 .4byte _ZL22uxCurrentNumberOfTasks
 8665 0c95 24       	 .uleb128 0x24
 8666 0c96 0F050000 	 .4byte .LASF140
 8667 0c9a 01       	 .byte 0x1
 8668 0c9b F3       	 .byte 0xf3
 8669 0c9c 2C       	 .byte 0x2c
 8670 0c9d 21080000 	 .4byte 0x821
 8671 0ca1 05       	 .uleb128 0x5
 8672 0ca2 03       	 .byte 0x3
 8673 0ca3 00000000 	 .4byte _ZL10xTickCount
 8674 0ca7 24       	 .uleb128 0x24
 8675 0ca8 D2000000 	 .4byte .LASF141
 8676 0cac 01       	 .byte 0x1
 8677 0cad F4       	 .byte 0xf4
 8678 0cae 2D       	 .byte 0x2d
 8679 0caf 0B080000 	 .4byte 0x80b
 8680 0cb3 05       	 .uleb128 0x5
 8681 0cb4 03       	 .byte 0x3
 8682 0cb5 00000000 	 .4byte _ZL18uxTopReadyPriority
 8683 0cb9 24       	 .uleb128 0x24
 8684 0cba 04010000 	 .4byte .LASF142
 8685 0cbe 01       	 .byte 0x1
 8686 0cbf F5       	 .byte 0xf5
 8687 0cc0 2C       	 .byte 0x2c
 8688 0cc1 FA070000 	 .4byte 0x7fa
 8689 0cc5 05       	 .uleb128 0x5
 8690 0cc6 03       	 .byte 0x3
 8691 0cc7 00000000 	 .4byte _ZL17xSchedulerRunning
 8692 0ccb 24       	 .uleb128 0x24
 8693 0ccc 9B0C0000 	 .4byte .LASF143
 8694 0cd0 01       	 .byte 0x1
 8695 0cd1 F6       	 .byte 0xf6
 8696 0cd2 2D       	 .byte 0x2d
 8697 0cd3 0B080000 	 .4byte 0x80b
 8698 0cd7 05       	 .uleb128 0x5
 8699 0cd8 03       	 .byte 0x3
 8700 0cd9 00000000 	 .4byte _ZL13uxPendedTicks
 8701 0cdd 24       	 .uleb128 0x24
ARM GAS   			page 239


 8702 0cde C1100000 	 .4byte .LASF144
 8703 0ce2 01       	 .byte 0x1
 8704 0ce3 F7       	 .byte 0xf7
 8705 0ce4 2C       	 .byte 0x2c
 8706 0ce5 FA070000 	 .4byte 0x7fa
 8707 0ce9 05       	 .uleb128 0x5
 8708 0cea 03       	 .byte 0x3
 8709 0ceb 00000000 	 .4byte _ZL13xYieldPending
 8710 0cef 24       	 .uleb128 0x24
 8711 0cf0 A80A0000 	 .4byte .LASF145
 8712 0cf4 01       	 .byte 0x1
 8713 0cf5 F8       	 .byte 0xf8
 8714 0cf6 2C       	 .byte 0x2c
 8715 0cf7 FA070000 	 .4byte 0x7fa
 8716 0cfb 05       	 .uleb128 0x5
 8717 0cfc 03       	 .byte 0x3
 8718 0cfd 00000000 	 .4byte _ZL15xNumOfOverflows
 8719 0d01 24       	 .uleb128 0x24
 8720 0d02 9A090000 	 .4byte .LASF126
 8721 0d06 01       	 .byte 0x1
 8722 0d07 F9       	 .byte 0xf9
 8723 0d08 24       	 .byte 0x24
 8724 0d09 FF070000 	 .4byte 0x7ff
 8725 0d0d 05       	 .uleb128 0x5
 8726 0d0e 03       	 .byte 0x3
 8727 0d0f 00000000 	 .4byte _ZL12uxTaskNumber
 8728 0d13 24       	 .uleb128 0x24
 8729 0d14 21070000 	 .4byte .LASF146
 8730 0d18 01       	 .byte 0x1
 8731 0d19 FA       	 .byte 0xfa
 8732 0d1a 2C       	 .byte 0x2c
 8733 0d1b 21080000 	 .4byte 0x821
 8734 0d1f 05       	 .uleb128 0x5
 8735 0d20 03       	 .byte 0x3
 8736 0d21 00000000 	 .4byte _ZL20xNextTaskUnblockTime
 8737 0d25 25       	 .uleb128 0x25
 8738 0d26 5D0F0000 	 .4byte .LASF147
 8739 0d2a 01       	 .byte 0x1
 8740 0d2b 0401     	 .2byte 0x104
 8741 0d2d 2D       	 .byte 0x2d
 8742 0d2e 0B080000 	 .4byte 0x80b
 8743 0d32 05       	 .uleb128 0x5
 8744 0d33 03       	 .byte 0x3
 8745 0d34 00000000 	 .4byte _ZL20uxSchedulerSuspended
 8746 0d38 26       	 .uleb128 0x26
 8747 0d39 1C0F0000 	 .4byte .LASF155
 8748 0d3d 01       	 .byte 0x1
 8749 0d3e 5C11     	 .2byte 0x115c
 8750 0d40 0D       	 .byte 0xd
 8751 0d41 EE070000 	 .4byte 0x7ee
 8752 0d45 00000000 	 .4byte .LFB59
 8753 0d49 5C000000 	 .4byte .LFE59-.LFB59
 8754 0d4d 01       	 .uleb128 0x1
 8755 0d4e 9C       	 .byte 0x9c
 8756 0d4f 840D0000 	 .4byte 0xd84
 8757 0d53 27       	 .uleb128 0x27
 8758 0d54 350A0000 	 .4byte .LASF150
ARM GAS   			page 240


 8759 0d58 01       	 .byte 0x1
 8760 0d59 5C11     	 .2byte 0x115c
 8761 0d5b 31       	 .byte 0x31
 8762 0d5c 19090000 	 .4byte 0x919
 8763 0d60 02       	 .uleb128 0x2
 8764 0d61 91       	 .byte 0x91
 8765 0d62 6C       	 .sleb128 -20
 8766 0d63 25       	 .uleb128 0x25
 8767 0d64 3F0F0000 	 .4byte .LASF148
 8768 0d68 01       	 .byte 0x1
 8769 0d69 5E11     	 .2byte 0x115e
 8770 0d6b 09       	 .byte 0x9
 8771 0d6c D50B0000 	 .4byte 0xbd5
 8772 0d70 02       	 .uleb128 0x2
 8773 0d71 91       	 .byte 0x91
 8774 0d72 70       	 .sleb128 -16
 8775 0d73 25       	 .uleb128 0x25
 8776 0d74 8B0C0000 	 .4byte .LASF149
 8777 0d78 01       	 .byte 0x1
 8778 0d79 5F11     	 .2byte 0x115f
 8779 0d7b 0D       	 .byte 0xd
 8780 0d7c EE070000 	 .4byte 0x7ee
 8781 0d80 02       	 .uleb128 0x2
 8782 0d81 91       	 .byte 0x91
 8783 0d82 74       	 .sleb128 -12
 8784 0d83 00       	 .byte 0
 8785 0d84 28       	 .uleb128 0x28
 8786 0d85 2F0B0000 	 .4byte .LASF174
 8787 0d89 01       	 .byte 0x1
 8788 0d8a 0A11     	 .2byte 0x110a
 8789 0d8c 07       	 .byte 0x7
 8790 0d8d 00000000 	 .4byte .LFB58
 8791 0d91 30010000 	 .4byte .LFE58-.LFB58
 8792 0d95 01       	 .uleb128 0x1
 8793 0d96 9C       	 .byte 0x9c
 8794 0d97 680E0000 	 .4byte 0xe68
 8795 0d9b 27       	 .uleb128 0x27
 8796 0d9c 270A0000 	 .4byte .LASF151
 8797 0da0 01       	 .byte 0x1
 8798 0da1 0A11     	 .2byte 0x110a
 8799 0da3 2C       	 .byte 0x2c
 8800 0da4 19090000 	 .4byte 0x919
 8801 0da8 02       	 .uleb128 0x2
 8802 0da9 91       	 .byte 0x91
 8803 0daa 54       	 .sleb128 -44
 8804 0dab 27       	 .uleb128 0x27
 8805 0dac AE000000 	 .4byte .LASF152
 8806 0db0 01       	 .byte 0x1
 8807 0db1 0A11     	 .2byte 0x110a
 8808 0db3 47       	 .byte 0x47
 8809 0db4 680E0000 	 .4byte 0xe68
 8810 0db8 02       	 .uleb128 0x2
 8811 0db9 91       	 .byte 0x91
 8812 0dba 50       	 .sleb128 -48
 8813 0dbb 25       	 .uleb128 0x25
 8814 0dbc 3F0F0000 	 .4byte .LASF148
 8815 0dc0 01       	 .byte 0x1
ARM GAS   			page 241


 8816 0dc1 0C11     	 .2byte 0x110c
 8817 0dc3 0A       	 .byte 0xa
 8818 0dc4 D50B0000 	 .4byte 0xbd5
 8819 0dc8 02       	 .uleb128 0x2
 8820 0dc9 91       	 .byte 0x91
 8821 0dca 74       	 .sleb128 -12
 8822 0dcb 25       	 .uleb128 0x25
 8823 0dcc A0040000 	 .4byte .LASF153
 8824 0dd0 01       	 .byte 0x1
 8825 0dd1 0D11     	 .2byte 0x110d
 8826 0dd3 0F       	 .byte 0xf
 8827 0dd4 D00A0000 	 .4byte 0xad0
 8828 0dd8 02       	 .uleb128 0x2
 8829 0dd9 91       	 .byte 0x91
 8830 0dda 6F       	 .sleb128 -17
 8831 0ddb 25       	 .uleb128 0x25
 8832 0ddc 86010000 	 .4byte .LASF154
 8833 0de0 01       	 .byte 0x1
 8834 0de1 0E11     	 .2byte 0x110e
 8835 0de3 0E       	 .byte 0xe
 8836 0de4 FF070000 	 .4byte 0x7ff
 8837 0de8 02       	 .uleb128 0x2
 8838 0de9 91       	 .byte 0x91
 8839 0dea 70       	 .sleb128 -16
 8840 0deb 29       	 .uleb128 0x29
 8841 0dec FA200000 	 .4byte 0x20fa
 8842 0df0 10000000 	 .4byte .LBB187
 8843 0df4 14000000 	 .4byte .LBE187-.LBB187
 8844 0df8 01       	 .byte 0x1
 8845 0df9 1011     	 .2byte 0x1110
 8846 0dfb 03       	 .byte 0x3
 8847 0dfc 090E0000 	 .4byte 0xe09
 8848 0e00 2A       	 .uleb128 0x2a
 8849 0e01 07210000 	 .4byte 0x2107
 8850 0e05 02       	 .uleb128 0x2
 8851 0e06 91       	 .byte 0x91
 8852 0e07 68       	 .sleb128 -24
 8853 0e08 00       	 .byte 0
 8854 0e09 29       	 .uleb128 0x29
 8855 0e0a D0200000 	 .4byte 0x20d0
 8856 0e0e 2E000000 	 .4byte .LBB189
 8857 0e12 1A000000 	 .4byte .LBE189-.LBB189
 8858 0e16 01       	 .byte 0x1
 8859 0e17 2611     	 .2byte 0x1126
 8860 0e19 1C       	 .byte 0x1c
 8861 0e1a 2F0E0000 	 .4byte 0xe2f
 8862 0e1e 2A       	 .uleb128 0x2a
 8863 0e1f E1200000 	 .4byte 0x20e1
 8864 0e23 02       	 .uleb128 0x2
 8865 0e24 91       	 .byte 0x91
 8866 0e25 64       	 .sleb128 -28
 8867 0e26 2A       	 .uleb128 0x2a
 8868 0e27 ED200000 	 .4byte 0x20ed
 8869 0e2b 02       	 .uleb128 0x2
 8870 0e2c 91       	 .byte 0x91
 8871 0e2d 60       	 .sleb128 -32
 8872 0e2e 00       	 .byte 0
ARM GAS   			page 242


 8873 0e2f 29       	 .uleb128 0x29
 8874 0e30 FA200000 	 .4byte 0x20fa
 8875 0e34 72000000 	 .4byte .LBB191
 8876 0e38 14000000 	 .4byte .LBE191-.LBB191
 8877 0e3c 01       	 .byte 0x1
 8878 0e3d 3611     	 .2byte 0x1136
 8879 0e3f 05       	 .byte 0x5
 8880 0e40 4D0E0000 	 .4byte 0xe4d
 8881 0e44 2A       	 .uleb128 0x2a
 8882 0e45 07210000 	 .4byte 0x2107
 8883 0e49 02       	 .uleb128 0x2
 8884 0e4a 91       	 .byte 0x91
 8885 0e4b 5C       	 .sleb128 -36
 8886 0e4c 00       	 .byte 0
 8887 0e4d 2B       	 .uleb128 0x2b
 8888 0e4e B6200000 	 .4byte 0x20b6
 8889 0e52 0A010000 	 .4byte .LBB193
 8890 0e56 08000000 	 .4byte .LBE193-.LBB193
 8891 0e5a 01       	 .byte 0x1
 8892 0e5b 5311     	 .2byte 0x1153
 8893 0e5d 03       	 .byte 0x3
 8894 0e5e 2C       	 .uleb128 0x2c
 8895 0e5f C3200000 	 .4byte 0x20c3
 8896 0e63 02       	 .uleb128 0x2
 8897 0e64 91       	 .byte 0x91
 8898 0e65 58       	 .sleb128 -40
 8899 0e66 00       	 .byte 0
 8900 0e67 00       	 .byte 0
 8901 0e68 10       	 .uleb128 0x10
 8902 0e69 04       	 .byte 0x4
 8903 0e6a EE070000 	 .4byte 0x7ee
 8904 0e6e 26       	 .uleb128 0x26
 8905 0e6f B2010000 	 .4byte .LASF156
 8906 0e73 01       	 .byte 0x1
 8907 0e74 9510     	 .2byte 0x1095
 8908 0e76 0D       	 .byte 0xd
 8909 0e77 EE070000 	 .4byte 0x7ee
 8910 0e7b 00000000 	 .4byte .LFB57
 8911 0e7f 9C010000 	 .4byte .LFE57-.LFB57
 8912 0e83 01       	 .uleb128 0x1
 8913 0e84 9C       	 .byte 0x9c
 8914 0e85 960F0000 	 .4byte 0xf96
 8915 0e89 27       	 .uleb128 0x27
 8916 0e8a 270A0000 	 .4byte .LASF151
 8917 0e8e 01       	 .byte 0x1
 8918 0e8f 9510     	 .2byte 0x1095
 8919 0e91 35       	 .byte 0x35
 8920 0e92 19090000 	 .4byte 0x919
 8921 0e96 02       	 .uleb128 0x2
 8922 0e97 91       	 .byte 0x91
 8923 0e98 4C       	 .sleb128 -52
 8924 0e99 27       	 .uleb128 0x27
 8925 0e9a E90B0000 	 .4byte .LASF157
 8926 0e9e 01       	 .byte 0x1
 8927 0e9f 9510     	 .2byte 0x1095
 8928 0ea1 4D       	 .byte 0x4d
 8929 0ea2 AF070000 	 .4byte 0x7af
ARM GAS   			page 243


 8930 0ea6 02       	 .uleb128 0x2
 8931 0ea7 91       	 .byte 0x91
 8932 0ea8 48       	 .sleb128 -56
 8933 0ea9 27       	 .uleb128 0x27
 8934 0eaa B4090000 	 .4byte .LASF158
 8935 0eae 01       	 .byte 0x1
 8936 0eaf 9510     	 .2byte 0x1095
 8937 0eb1 64       	 .byte 0x64
 8938 0eb2 98090000 	 .4byte 0x998
 8939 0eb6 02       	 .uleb128 0x2
 8940 0eb7 91       	 .byte 0x91
 8941 0eb8 47       	 .sleb128 -57
 8942 0eb9 27       	 .uleb128 0x27
 8943 0eba 11090000 	 .4byte .LASF159
 8944 0ebe 01       	 .byte 0x1
 8945 0ebf 9510     	 .2byte 0x1095
 8946 0ec1 77       	 .byte 0x77
 8947 0ec2 960F0000 	 .4byte 0xf96
 8948 0ec6 02       	 .uleb128 0x2
 8949 0ec7 91       	 .byte 0x91
 8950 0ec8 40       	 .sleb128 -64
 8951 0ec9 27       	 .uleb128 0x27
 8952 0eca AE000000 	 .4byte .LASF152
 8953 0ece 01       	 .byte 0x1
 8954 0ecf 9510     	 .2byte 0x1095
 8955 0ed1 A1       	 .byte 0xa1
 8956 0ed2 680E0000 	 .4byte 0xe68
 8957 0ed6 02       	 .uleb128 0x2
 8958 0ed7 91       	 .byte 0x91
 8959 0ed8 00       	 .sleb128 0
 8960 0ed9 25       	 .uleb128 0x25
 8961 0eda 3F0F0000 	 .4byte .LASF148
 8962 0ede 01       	 .byte 0x1
 8963 0edf 9710     	 .2byte 0x1097
 8964 0ee1 0A       	 .byte 0xa
 8965 0ee2 D50B0000 	 .4byte 0xbd5
 8966 0ee6 02       	 .uleb128 0x2
 8967 0ee7 91       	 .byte 0x91
 8968 0ee8 70       	 .sleb128 -16
 8969 0ee9 25       	 .uleb128 0x25
 8970 0eea A0040000 	 .4byte .LASF153
 8971 0eee 01       	 .byte 0x1
 8972 0eef 9810     	 .2byte 0x1098
 8973 0ef1 0F       	 .byte 0xf
 8974 0ef2 D00A0000 	 .4byte 0xad0
 8975 0ef6 02       	 .uleb128 0x2
 8976 0ef7 91       	 .byte 0x91
 8977 0ef8 6B       	 .sleb128 -21
 8978 0ef9 25       	 .uleb128 0x25
 8979 0efa 8B0C0000 	 .4byte .LASF149
 8980 0efe 01       	 .byte 0x1
 8981 0eff 9910     	 .2byte 0x1099
 8982 0f01 0D       	 .byte 0xd
 8983 0f02 EE070000 	 .4byte 0x7ee
 8984 0f06 02       	 .uleb128 0x2
 8985 0f07 91       	 .byte 0x91
 8986 0f08 74       	 .sleb128 -12
ARM GAS   			page 244


 8987 0f09 25       	 .uleb128 0x25
 8988 0f0a 86010000 	 .4byte .LASF154
 8989 0f0e 01       	 .byte 0x1
 8990 0f0f 9A10     	 .2byte 0x109a
 8991 0f11 0E       	 .byte 0xe
 8992 0f12 FF070000 	 .4byte 0x7ff
 8993 0f16 02       	 .uleb128 0x2
 8994 0f17 91       	 .byte 0x91
 8995 0f18 6C       	 .sleb128 -20
 8996 0f19 29       	 .uleb128 0x29
 8997 0f1a FA200000 	 .4byte 0x20fa
 8998 0f1e 1A000000 	 .4byte .LBB179
 8999 0f22 14000000 	 .4byte .LBE179-.LBB179
 9000 0f26 01       	 .byte 0x1
 9001 0f27 9C10     	 .2byte 0x109c
 9002 0f29 03       	 .byte 0x3
 9003 0f2a 370F0000 	 .4byte 0xf37
 9004 0f2e 2A       	 .uleb128 0x2a
 9005 0f2f 07210000 	 .4byte 0x2107
 9006 0f33 02       	 .uleb128 0x2
 9007 0f34 91       	 .byte 0x91
 9008 0f35 64       	 .sleb128 -28
 9009 0f36 00       	 .byte 0
 9010 0f37 29       	 .uleb128 0x29
 9011 0f38 D0200000 	 .4byte 0x20d0
 9012 0f3c 38000000 	 .4byte .LBB181
 9013 0f40 1A000000 	 .4byte .LBE181-.LBB181
 9014 0f44 01       	 .byte 0x1
 9015 0f45 B210     	 .2byte 0x10b2
 9016 0f47 1C       	 .byte 0x1c
 9017 0f48 5D0F0000 	 .4byte 0xf5d
 9018 0f4c 2A       	 .uleb128 0x2a
 9019 0f4d E1200000 	 .4byte 0x20e1
 9020 0f51 02       	 .uleb128 0x2
 9021 0f52 91       	 .byte 0x91
 9022 0f53 60       	 .sleb128 -32
 9023 0f54 2A       	 .uleb128 0x2a
 9024 0f55 ED200000 	 .4byte 0x20ed
 9025 0f59 02       	 .uleb128 0x2
 9026 0f5a 91       	 .byte 0x91
 9027 0f5b 5C       	 .sleb128 -36
 9028 0f5c 00       	 .byte 0
 9029 0f5d 29       	 .uleb128 0x29
 9030 0f5e FA200000 	 .4byte 0x20fa
 9031 0f62 DC000000 	 .4byte .LBB183
 9032 0f66 14000000 	 .4byte .LBE183-.LBB183
 9033 0f6a 01       	 .byte 0x1
 9034 0f6b E310     	 .2byte 0x10e3
 9035 0f6d 05       	 .byte 0x5
 9036 0f6e 7B0F0000 	 .4byte 0xf7b
 9037 0f72 2A       	 .uleb128 0x2a
 9038 0f73 07210000 	 .4byte 0x2107
 9039 0f77 02       	 .uleb128 0x2
 9040 0f78 91       	 .byte 0x91
 9041 0f79 58       	 .sleb128 -40
 9042 0f7a 00       	 .byte 0
 9043 0f7b 2B       	 .uleb128 0x2b
ARM GAS   			page 245


 9044 0f7c B6200000 	 .4byte 0x20b6
 9045 0f80 74010000 	 .4byte .LBB185
 9046 0f84 08000000 	 .4byte .LBE185-.LBB185
 9047 0f88 01       	 .byte 0x1
 9048 0f89 0011     	 .2byte 0x1100
 9049 0f8b 03       	 .byte 0x3
 9050 0f8c 2C       	 .uleb128 0x2c
 9051 0f8d C3200000 	 .4byte 0x20c3
 9052 0f91 02       	 .uleb128 0x2
 9053 0f92 91       	 .byte 0x91
 9054 0f93 54       	 .sleb128 -44
 9055 0f94 00       	 .byte 0
 9056 0f95 00       	 .byte 0
 9057 0f96 10       	 .uleb128 0x10
 9058 0f97 04       	 .byte 0x4
 9059 0f98 AF070000 	 .4byte 0x7af
 9060 0f9c 0F       	 .uleb128 0xf
 9061 0f9d 960F0000 	 .4byte 0xf96
 9062 0fa1 26       	 .uleb128 0x26
 9063 0fa2 67030000 	 .4byte .LASF160
 9064 0fa6 01       	 .byte 0x1
 9065 0fa7 2B10     	 .2byte 0x102b
 9066 0fa9 0D       	 .byte 0xd
 9067 0faa EE070000 	 .4byte 0x7ee
 9068 0fae 00000000 	 .4byte .LFB56
 9069 0fb2 54010000 	 .4byte .LFE56-.LFB56
 9070 0fb6 01       	 .uleb128 0x1
 9071 0fb7 9C       	 .byte 0x9c
 9072 0fb8 65100000 	 .4byte 0x1065
 9073 0fbc 27       	 .uleb128 0x27
 9074 0fbd 270A0000 	 .4byte .LASF151
 9075 0fc1 01       	 .byte 0x1
 9076 0fc2 2B10     	 .2byte 0x102b
 9077 0fc4 2E       	 .byte 0x2e
 9078 0fc5 19090000 	 .4byte 0x919
 9079 0fc9 02       	 .uleb128 0x2
 9080 0fca 91       	 .byte 0x91
 9081 0fcb 5C       	 .sleb128 -36
 9082 0fcc 27       	 .uleb128 0x27
 9083 0fcd E90B0000 	 .4byte .LASF157
 9084 0fd1 01       	 .byte 0x1
 9085 0fd2 2B10     	 .2byte 0x102b
 9086 0fd4 46       	 .byte 0x46
 9087 0fd5 AF070000 	 .4byte 0x7af
 9088 0fd9 02       	 .uleb128 0x2
 9089 0fda 91       	 .byte 0x91
 9090 0fdb 58       	 .sleb128 -40
 9091 0fdc 27       	 .uleb128 0x27
 9092 0fdd B4090000 	 .4byte .LASF158
 9093 0fe1 01       	 .byte 0x1
 9094 0fe2 2B10     	 .2byte 0x102b
 9095 0fe4 5D       	 .byte 0x5d
 9096 0fe5 98090000 	 .4byte 0x998
 9097 0fe9 02       	 .uleb128 0x2
 9098 0fea 91       	 .byte 0x91
 9099 0feb 57       	 .sleb128 -41
 9100 0fec 27       	 .uleb128 0x27
ARM GAS   			page 246


 9101 0fed 11090000 	 .4byte .LASF159
 9102 0ff1 01       	 .byte 0x1
 9103 0ff2 2B10     	 .2byte 0x102b
 9104 0ff4 70       	 .byte 0x70
 9105 0ff5 960F0000 	 .4byte 0xf96
 9106 0ff9 02       	 .uleb128 0x2
 9107 0ffa 91       	 .byte 0x91
 9108 0ffb 50       	 .sleb128 -48
 9109 0ffc 25       	 .uleb128 0x25
 9110 0ffd 3F0F0000 	 .4byte .LASF148
 9111 1001 01       	 .byte 0x1
 9112 1002 2D10     	 .2byte 0x102d
 9113 1004 0A       	 .byte 0xa
 9114 1005 D50B0000 	 .4byte 0xbd5
 9115 1009 02       	 .uleb128 0x2
 9116 100a 91       	 .byte 0x91
 9117 100b 70       	 .sleb128 -16
 9118 100c 25       	 .uleb128 0x25
 9119 100d A0040000 	 .4byte .LASF153
 9120 1011 01       	 .byte 0x1
 9121 1012 2E10     	 .2byte 0x102e
 9122 1014 0F       	 .byte 0xf
 9123 1015 D00A0000 	 .4byte 0xad0
 9124 1019 02       	 .uleb128 0x2
 9125 101a 91       	 .byte 0x91
 9126 101b 6F       	 .sleb128 -17
 9127 101c 25       	 .uleb128 0x25
 9128 101d 8B0C0000 	 .4byte .LASF149
 9129 1021 01       	 .byte 0x1
 9130 1022 2F10     	 .2byte 0x102f
 9131 1024 0D       	 .byte 0xd
 9132 1025 EE070000 	 .4byte 0x7ee
 9133 1029 02       	 .uleb128 0x2
 9134 102a 91       	 .byte 0x91
 9135 102b 74       	 .sleb128 -12
 9136 102c 29       	 .uleb128 0x29
 9137 102d FA200000 	 .4byte 0x20fa
 9138 1031 1A000000 	 .4byte .LBB175
 9139 1035 14000000 	 .4byte .LBE175-.LBB175
 9140 1039 01       	 .byte 0x1
 9141 103a 3110     	 .2byte 0x1031
 9142 103c 03       	 .byte 0x3
 9143 103d 4A100000 	 .4byte 0x104a
 9144 1041 2A       	 .uleb128 0x2a
 9145 1042 07210000 	 .4byte 0x2107
 9146 1046 02       	 .uleb128 0x2
 9147 1047 91       	 .byte 0x91
 9148 1048 68       	 .sleb128 -24
 9149 1049 00       	 .byte 0
 9150 104a 2B       	 .uleb128 0x2b
 9151 104b FA200000 	 .4byte 0x20fa
 9152 104f F6000000 	 .4byte .LBB177
 9153 1053 14000000 	 .4byte .LBE177-.LBB177
 9154 1057 01       	 .byte 0x1
 9155 1058 6910     	 .2byte 0x1069
 9156 105a 05       	 .byte 0x5
 9157 105b 2A       	 .uleb128 0x2a
ARM GAS   			page 247


 9158 105c 07210000 	 .4byte 0x2107
 9159 1060 02       	 .uleb128 0x2
 9160 1061 91       	 .byte 0x91
 9161 1062 64       	 .sleb128 -28
 9162 1063 00       	 .byte 0
 9163 1064 00       	 .byte 0
 9164 1065 26       	 .uleb128 0x26
 9165 1066 6D060000 	 .4byte .LASF161
 9166 106a 01       	 .byte 0x1
 9167 106b AE0F     	 .2byte 0xfae
 9168 106d 0D       	 .byte 0xd
 9169 106e EE070000 	 .4byte 0x7ee
 9170 1072 00000000 	 .4byte .LFB55
 9171 1076 28010000 	 .4byte .LFE55-.LFB55
 9172 107a 01       	 .uleb128 0x1
 9173 107b 9C       	 .byte 0x9c
 9174 107c E1100000 	 .4byte 0x10e1
 9175 1080 27       	 .uleb128 0x27
 9176 1081 0E040000 	 .4byte .LASF162
 9177 1085 01       	 .byte 0x1
 9178 1086 AE0F     	 .2byte 0xfae
 9179 1088 27       	 .byte 0x27
 9180 1089 AF070000 	 .4byte 0x7af
 9181 108d 02       	 .uleb128 0x2
 9182 108e 91       	 .byte 0x91
 9183 108f 6C       	 .sleb128 -20
 9184 1090 27       	 .uleb128 0x27
 9185 1091 5B000000 	 .4byte .LASF163
 9186 1095 01       	 .byte 0x1
 9187 1096 AE0F     	 .2byte 0xfae
 9188 1098 46       	 .byte 0x46
 9189 1099 AF070000 	 .4byte 0x7af
 9190 109d 02       	 .uleb128 0x2
 9191 109e 91       	 .byte 0x91
 9192 109f 68       	 .sleb128 -24
 9193 10a0 27       	 .uleb128 0x27
 9194 10a1 760C0000 	 .4byte .LASF164
 9195 10a5 01       	 .byte 0x1
 9196 10a6 AE0F     	 .2byte 0xfae
 9197 10a8 65       	 .byte 0x65
 9198 10a9 960F0000 	 .4byte 0xf96
 9199 10ad 02       	 .uleb128 0x2
 9200 10ae 91       	 .byte 0x91
 9201 10af 64       	 .sleb128 -28
 9202 10b0 27       	 .uleb128 0x27
 9203 10b1 1C0C0000 	 .4byte .LASF165
 9204 10b5 01       	 .byte 0x1
 9205 10b6 AE0F     	 .2byte 0xfae
 9206 10b8 86       	 .byte 0x86
 9207 10b9 15080000 	 .4byte 0x815
 9208 10bd 02       	 .uleb128 0x2
 9209 10be 91       	 .byte 0x91
 9210 10bf 60       	 .sleb128 -32
 9211 10c0 25       	 .uleb128 0x25
 9212 10c1 100F0000 	 .4byte .LASF166
 9213 10c5 01       	 .byte 0x1
 9214 10c6 B00F     	 .2byte 0xfb0
ARM GAS   			page 248


 9215 10c8 0D       	 .byte 0xd
 9216 10c9 15080000 	 .4byte 0x815
 9217 10cd 02       	 .uleb128 0x2
 9218 10ce 91       	 .byte 0x91
 9219 10cf 70       	 .sleb128 -16
 9220 10d0 25       	 .uleb128 0x25
 9221 10d1 8B0C0000 	 .4byte .LASF149
 9222 10d5 01       	 .byte 0x1
 9223 10d6 B10F     	 .2byte 0xfb1
 9224 10d8 0D       	 .byte 0xd
 9225 10d9 EE070000 	 .4byte 0x7ee
 9226 10dd 02       	 .uleb128 0x2
 9227 10de 91       	 .byte 0x91
 9228 10df 74       	 .sleb128 -12
 9229 10e0 00       	 .byte 0
 9230 10e1 26       	 .uleb128 0x26
 9231 10e2 AB060000 	 .4byte .LASF167
 9232 10e6 01       	 .byte 0x1
 9233 10e7 3D0F     	 .2byte 0xf3d
 9234 10e9 0B       	 .byte 0xb
 9235 10ea AF070000 	 .4byte 0x7af
 9236 10ee 00000000 	 .4byte .LFB54
 9237 10f2 FC000000 	 .4byte .LFE54-.LFB54
 9238 10f6 01       	 .uleb128 0x1
 9239 10f7 9C       	 .byte 0x9c
 9240 10f8 3D110000 	 .4byte 0x113d
 9241 10fc 27       	 .uleb128 0x27
 9242 10fd 9C030000 	 .4byte .LASF168
 9243 1101 01       	 .byte 0x1
 9244 1102 3D0F     	 .2byte 0xf3d
 9245 1104 28       	 .byte 0x28
 9246 1105 EE070000 	 .4byte 0x7ee
 9247 1109 02       	 .uleb128 0x2
 9248 110a 91       	 .byte 0x91
 9249 110b 6C       	 .sleb128 -20
 9250 110c 27       	 .uleb128 0x27
 9251 110d 1C0C0000 	 .4byte .LASF165
 9252 1111 01       	 .byte 0x1
 9253 1112 3D0F     	 .2byte 0xf3d
 9254 1114 46       	 .byte 0x46
 9255 1115 15080000 	 .4byte 0x815
 9256 1119 02       	 .uleb128 0x2
 9257 111a 91       	 .byte 0x91
 9258 111b 68       	 .sleb128 -24
 9259 111c 25       	 .uleb128 0x25
 9260 111d 100F0000 	 .4byte .LASF166
 9261 1121 01       	 .byte 0x1
 9262 1122 3F0F     	 .2byte 0xf3f
 9263 1124 0D       	 .byte 0xd
 9264 1125 15080000 	 .4byte 0x815
 9265 1129 02       	 .uleb128 0x2
 9266 112a 91       	 .byte 0x91
 9267 112b 74       	 .sleb128 -12
 9268 112c 25       	 .uleb128 0x25
 9269 112d 9C100000 	 .4byte .LASF169
 9270 1131 01       	 .byte 0x1
 9271 1132 400F     	 .2byte 0xf40
ARM GAS   			page 249


 9272 1134 0B       	 .byte 0xb
 9273 1135 AF070000 	 .4byte 0x7af
 9274 1139 02       	 .uleb128 0x2
 9275 113a 91       	 .byte 0x91
 9276 113b 70       	 .sleb128 -16
 9277 113c 00       	 .byte 0
 9278 113d 2D       	 .uleb128 0x2d
 9279 113e BD050000 	 .4byte .LASF225
 9280 1142 01       	 .byte 0x1
 9281 1143 2C0F     	 .2byte 0xf2c
 9282 1145 08       	 .byte 0x8
 9283 1146 C5020000 	 .4byte 0x2c5
 9284 114a 00000000 	 .4byte .LFB53
 9285 114e 34000000 	 .4byte .LFE53-.LFB53
 9286 1152 01       	 .uleb128 0x1
 9287 1153 9C       	 .byte 0x9c
 9288 1154 2E       	 .uleb128 0x2e
 9289 1155 D2090000 	 .4byte .LASF170
 9290 1159 01       	 .byte 0x1
 9291 115a 1C0F     	 .2byte 0xf1c
 9292 115c 0C       	 .byte 0xc
 9293 115d 15080000 	 .4byte 0x815
 9294 1161 00000000 	 .4byte .LFB52
 9295 1165 30000000 	 .4byte .LFE52-.LFB52
 9296 1169 01       	 .uleb128 0x1
 9297 116a 9C       	 .byte 0x9c
 9298 116b 80110000 	 .4byte 0x1180
 9299 116f 25       	 .uleb128 0x25
 9300 1170 D7020000 	 .4byte .LASF171
 9301 1174 01       	 .byte 0x1
 9302 1175 1E0F     	 .2byte 0xf1e
 9303 1177 0C       	 .byte 0xc
 9304 1178 15080000 	 .4byte 0x815
 9305 117c 02       	 .uleb128 0x2
 9306 117d 91       	 .byte 0x91
 9307 117e 74       	 .sleb128 -12
 9308 117f 00       	 .byte 0
 9309 1180 26       	 .uleb128 0x26
 9310 1181 0B060000 	 .4byte .LASF172
 9311 1185 01       	 .byte 0x1
 9312 1186 9C0D     	 .2byte 0xd9c
 9313 1188 0D       	 .byte 0xd
 9314 1189 EE070000 	 .4byte 0x7ee
 9315 118d 00000000 	 .4byte .LFB51
 9316 1191 20010000 	 .4byte .LFE51-.LFB51
 9317 1195 01       	 .uleb128 0x1
 9318 1196 9C       	 .byte 0x9c
 9319 1197 04120000 	 .4byte 0x1204
 9320 119b 27       	 .uleb128 0x27
 9321 119c BD0B0000 	 .4byte .LASF173
 9322 11a0 01       	 .byte 0x1
 9323 11a1 9C0D     	 .2byte 0xd9c
 9324 11a3 39       	 .byte 0x39
 9325 11a4 25090000 	 .4byte 0x925
 9326 11a8 02       	 .uleb128 0x2
 9327 11a9 91       	 .byte 0x91
 9328 11aa 64       	 .sleb128 -28
ARM GAS   			page 250


 9329 11ab 25       	 .uleb128 0x25
 9330 11ac 3F0F0000 	 .4byte .LASF148
 9331 11b0 01       	 .byte 0x1
 9332 11b1 9E0D     	 .2byte 0xd9e
 9333 11b3 10       	 .byte 0x10
 9334 11b4 E00B0000 	 .4byte 0xbe0
 9335 11b8 02       	 .uleb128 0x2
 9336 11b9 91       	 .byte 0x91
 9337 11ba 70       	 .sleb128 -16
 9338 11bb 25       	 .uleb128 0x25
 9339 11bc 8B0C0000 	 .4byte .LASF149
 9340 11c0 01       	 .byte 0x1
 9341 11c1 9F0D     	 .2byte 0xd9f
 9342 11c3 0D       	 .byte 0xd
 9343 11c4 EE070000 	 .4byte 0x7ee
 9344 11c8 02       	 .uleb128 0x2
 9345 11c9 91       	 .byte 0x91
 9346 11ca 74       	 .sleb128 -12
 9347 11cb 29       	 .uleb128 0x29
 9348 11cc FA200000 	 .4byte 0x20fa
 9349 11d0 2A000000 	 .4byte .LBB171
 9350 11d4 14000000 	 .4byte .LBE171-.LBB171
 9351 11d8 01       	 .byte 0x1
 9352 11d9 A70D     	 .2byte 0xda7
 9353 11db 04       	 .byte 0x4
 9354 11dc E9110000 	 .4byte 0x11e9
 9355 11e0 2A       	 .uleb128 0x2a
 9356 11e1 07210000 	 .4byte 0x2107
 9357 11e5 02       	 .uleb128 0x2
 9358 11e6 91       	 .byte 0x91
 9359 11e7 6C       	 .sleb128 -20
 9360 11e8 00       	 .byte 0
 9361 11e9 2B       	 .uleb128 0x2b
 9362 11ea FA200000 	 .4byte 0x20fa
 9363 11ee 48000000 	 .4byte .LBB173
 9364 11f2 14000000 	 .4byte .LBE173-.LBB173
 9365 11f6 01       	 .byte 0x1
 9366 11f7 A90D     	 .2byte 0xda9
 9367 11f9 04       	 .byte 0x4
 9368 11fa 2A       	 .uleb128 0x2a
 9369 11fb 07210000 	 .4byte 0x2107
 9370 11ff 02       	 .uleb128 0x2
 9371 1200 91       	 .byte 0x91
 9372 1201 68       	 .sleb128 -24
 9373 1202 00       	 .byte 0
 9374 1203 00       	 .byte 0
 9375 1204 28       	 .uleb128 0x28
 9376 1205 1E010000 	 .4byte .LASF175
 9377 1209 01       	 .byte 0x1
 9378 120a 5A0D     	 .2byte 0xd5a
 9379 120c 07       	 .byte 0x7
 9380 120d 00000000 	 .4byte .LFB50
 9381 1211 04010000 	 .4byte .LFE50-.LFB50
 9382 1215 01       	 .uleb128 0x1
 9383 1216 9C       	 .byte 0x9c
 9384 1217 3C120000 	 .4byte 0x123c
 9385 121b 27       	 .uleb128 0x27
ARM GAS   			page 251


 9386 121c BD0B0000 	 .4byte .LASF173
 9387 1220 01       	 .byte 0x1
 9388 1221 5A0D     	 .2byte 0xd5a
 9389 1223 30       	 .byte 0x30
 9390 1224 25090000 	 .4byte 0x925
 9391 1228 02       	 .uleb128 0x2
 9392 1229 91       	 .byte 0x91
 9393 122a 6C       	 .sleb128 -20
 9394 122b 25       	 .uleb128 0x25
 9395 122c 3F0F0000 	 .4byte .LASF148
 9396 1230 01       	 .byte 0x1
 9397 1231 5C0D     	 .2byte 0xd5c
 9398 1233 10       	 .byte 0x10
 9399 1234 E00B0000 	 .4byte 0xbe0
 9400 1238 02       	 .uleb128 0x2
 9401 1239 91       	 .byte 0x91
 9402 123a 74       	 .sleb128 -12
 9403 123b 00       	 .byte 0
 9404 123c 2E       	 .uleb128 0x2e
 9405 123d 86000000 	 .4byte .LASF176
 9406 1241 01       	 .byte 0x1
 9407 1242 3E0D     	 .2byte 0xd3e
 9408 1244 0D       	 .byte 0xd
 9409 1245 EE070000 	 .4byte 0x7ee
 9410 1249 00000000 	 .4byte .LFB49
 9411 124d 50000000 	 .4byte .LFE49-.LFB49
 9412 1251 01       	 .uleb128 0x1
 9413 1252 9C       	 .byte 0x9c
 9414 1253 68120000 	 .4byte 0x1268
 9415 1257 25       	 .uleb128 0x25
 9416 1258 8B0C0000 	 .4byte .LASF149
 9417 125c 01       	 .byte 0x1
 9418 125d 400D     	 .2byte 0xd40
 9419 125f 0D       	 .byte 0xd
 9420 1260 EE070000 	 .4byte 0x7ee
 9421 1264 02       	 .uleb128 0x2
 9422 1265 91       	 .byte 0x91
 9423 1266 74       	 .sleb128 -12
 9424 1267 00       	 .byte 0
 9425 1268 2E       	 .uleb128 0x2e
 9426 1269 280E0000 	 .4byte .LASF177
 9427 126d 01       	 .byte 0x1
 9428 126e 2D0D     	 .2byte 0xd2d
 9429 1270 0F       	 .byte 0xf
 9430 1271 19090000 	 .4byte 0x919
 9431 1275 00000000 	 .4byte .LFB48
 9432 1279 20000000 	 .4byte .LFE48-.LFB48
 9433 127d 01       	 .uleb128 0x1
 9434 127e 9C       	 .byte 0x9c
 9435 127f 94120000 	 .4byte 0x1294
 9436 1283 25       	 .uleb128 0x25
 9437 1284 8B0C0000 	 .4byte .LASF149
 9438 1288 01       	 .byte 0x1
 9439 1289 2F0D     	 .2byte 0xd2f
 9440 128b 0F       	 .byte 0xf
 9441 128c 19090000 	 .4byte 0x919
 9442 1290 02       	 .uleb128 0x2
ARM GAS   			page 252


 9443 1291 91       	 .byte 0x91
 9444 1292 74       	 .sleb128 -12
 9445 1293 00       	 .byte 0
 9446 1294 2F       	 .uleb128 0x2f
 9447 1295 C1080000 	 .4byte .LASF193
 9448 1299 01       	 .byte 0x1
 9449 129a 130D     	 .2byte 0xd13
 9450 129c 0D       	 .byte 0xd
 9451 129d 00000000 	 .4byte .LFB47
 9452 12a1 54000000 	 .4byte .LFE47-.LFB47
 9453 12a5 01       	 .uleb128 0x1
 9454 12a6 9C       	 .byte 0x9c
 9455 12a7 BC120000 	 .4byte 0x12bc
 9456 12ab 25       	 .uleb128 0x25
 9457 12ac 3F0F0000 	 .4byte .LASF148
 9458 12b0 01       	 .byte 0x1
 9459 12b1 150D     	 .2byte 0xd15
 9460 12b3 08       	 .byte 0x8
 9461 12b4 D50B0000 	 .4byte 0xbd5
 9462 12b8 02       	 .uleb128 0x2
 9463 12b9 91       	 .byte 0x91
 9464 12ba 74       	 .sleb128 -12
 9465 12bb 00       	 .byte 0
 9466 12bc 30       	 .uleb128 0x30
 9467 12bd 4D0E0000 	 .4byte .LASF180
 9468 12c1 01       	 .byte 0x1
 9469 12c2 BF0C     	 .2byte 0xcbf
 9470 12c4 12       	 .byte 0x12
 9471 12c5 9E070000 	 .4byte 0x79e
 9472 12c9 00000000 	 .4byte .LFB46
 9473 12cd 38000000 	 .4byte .LFE46-.LFB46
 9474 12d1 01       	 .uleb128 0x1
 9475 12d2 9C       	 .byte 0x9c
 9476 12d3 F8120000 	 .4byte 0x12f8
 9477 12d7 27       	 .uleb128 0x27
 9478 12d8 CC010000 	 .4byte .LASF178
 9479 12dc 01       	 .byte 0x1
 9480 12dd BF0C     	 .2byte 0xcbf
 9481 12df 3E       	 .byte 0x3e
 9482 12e0 F8120000 	 .4byte 0x12f8
 9483 12e4 02       	 .uleb128 0x2
 9484 12e5 91       	 .byte 0x91
 9485 12e6 6C       	 .sleb128 -20
 9486 12e7 25       	 .uleb128 0x25
 9487 12e8 7A090000 	 .4byte .LASF179
 9488 12ec 01       	 .byte 0x1
 9489 12ed C10C     	 .2byte 0xcc1
 9490 12ef 0B       	 .byte 0xb
 9491 12f0 AF070000 	 .4byte 0x7af
 9492 12f4 02       	 .uleb128 0x2
 9493 12f5 91       	 .byte 0x91
 9494 12f6 74       	 .sleb128 -12
 9495 12f7 00       	 .byte 0
 9496 12f8 10       	 .uleb128 0x10
 9497 12f9 04       	 .byte 0x4
 9498 12fa 99070000 	 .4byte 0x799
 9499 12fe 31       	 .uleb128 0x31
ARM GAS   			page 253


 9500 12ff DC030000 	 .4byte .LASF181
 9501 1303 01       	 .byte 0x1
 9502 1304 6A0C     	 .2byte 0xc6a
 9503 1306 15       	 .byte 0x15
 9504 1307 FF070000 	 .4byte 0x7ff
 9505 130b 00000000 	 .4byte .LFB45
 9506 130f 22010000 	 .4byte .LFE45-.LFB45
 9507 1313 01       	 .uleb128 0x1
 9508 1314 9C       	 .byte 0x9c
 9509 1315 B2130000 	 .4byte 0x13b2
 9510 1319 27       	 .uleb128 0x27
 9511 131a C20C0000 	 .4byte .LASF182
 9512 131e 01       	 .byte 0x1
 9513 131f 6A0C     	 .2byte 0xc6a
 9514 1321 40       	 .byte 0x40
 9515 1322 B2130000 	 .4byte 0x13b2
 9516 1326 02       	 .uleb128 0x2
 9517 1327 91       	 .byte 0x91
 9518 1328 54       	 .sleb128 -44
 9519 1329 27       	 .uleb128 0x27
 9520 132a 57100000 	 .4byte .LASF183
 9521 132e 01       	 .byte 0x1
 9522 132f 6A0C     	 .2byte 0xc6a
 9523 1331 5B       	 .byte 0x5b
 9524 1332 3D0C0000 	 .4byte 0xc3d
 9525 1336 02       	 .uleb128 0x2
 9526 1337 91       	 .byte 0x91
 9527 1338 50       	 .sleb128 -48
 9528 1339 27       	 .uleb128 0x27
 9529 133a BB0C0000 	 .4byte .LASF184
 9530 133e 01       	 .byte 0x1
 9531 133f 6A0C     	 .2byte 0xc6a
 9532 1341 6E       	 .byte 0x6e
 9533 1342 5B090000 	 .4byte 0x95b
 9534 1346 02       	 .uleb128 0x2
 9535 1347 91       	 .byte 0x91
 9536 1348 4F       	 .sleb128 -49
 9537 1349 25       	 .uleb128 0x25
 9538 134a 77040000 	 .4byte .LASF185
 9539 134e 01       	 .byte 0x1
 9540 134f 6C0C     	 .2byte 0xc6c
 9541 1351 12       	 .byte 0x12
 9542 1352 BD130000 	 .4byte 0x13bd
 9543 1356 02       	 .uleb128 0x2
 9544 1357 91       	 .byte 0x91
 9545 1358 5C       	 .sleb128 -36
 9546 1359 25       	 .uleb128 0x25
 9547 135a 420E0000 	 .4byte .LASF186
 9548 135e 01       	 .byte 0x1
 9549 135f 6C0C     	 .2byte 0xc6c
 9550 1361 1E       	 .byte 0x1e
 9551 1362 BD130000 	 .4byte 0x13bd
 9552 1366 02       	 .uleb128 0x2
 9553 1367 91       	 .byte 0x91
 9554 1368 64       	 .sleb128 -28
 9555 1369 25       	 .uleb128 0x25
 9556 136a CB090000 	 .4byte .LASF187
ARM GAS   			page 254


 9557 136e 01       	 .byte 0x1
 9558 136f 6D0C     	 .2byte 0xc6d
 9559 1371 0E       	 .byte 0xe
 9560 1372 FF070000 	 .4byte 0x7ff
 9561 1376 02       	 .uleb128 0x2
 9562 1377 91       	 .byte 0x91
 9563 1378 6C       	 .sleb128 -20
 9564 1379 32       	 .uleb128 0x32
 9565 137a 1A000000 	 .4byte .LBB168
 9566 137e 2C000000 	 .4byte .LBE168-.LBB168
 9567 1382 97130000 	 .4byte 0x1397
 9568 1386 25       	 .uleb128 0x25
 9569 1387 39000000 	 .4byte .LASF188
 9570 138b 01       	 .byte 0x1
 9571 138c 710C     	 .2byte 0xc71
 9572 138e 04       	 .byte 0x4
 9573 138f 480C0000 	 .4byte 0xc48
 9574 1393 02       	 .uleb128 0x2
 9575 1394 91       	 .byte 0x91
 9576 1395 68       	 .sleb128 -24
 9577 1396 00       	 .byte 0
 9578 1397 33       	 .uleb128 0x33
 9579 1398 46000000 	 .4byte .LBB170
 9580 139c 2C000000 	 .4byte .LBE170-.LBB170
 9581 13a0 25       	 .uleb128 0x25
 9582 13a1 39000000 	 .4byte .LASF188
 9583 13a5 01       	 .byte 0x1
 9584 13a6 790C     	 .2byte 0xc79
 9585 13a8 05       	 .byte 0x5
 9586 13a9 480C0000 	 .4byte 0xc48
 9587 13ad 02       	 .uleb128 0x2
 9588 13ae 91       	 .byte 0x91
 9589 13af 60       	 .sleb128 -32
 9590 13b0 00       	 .byte 0
 9591 13b1 00       	 .byte 0
 9592 13b2 10       	 .uleb128 0x10
 9593 13b3 04       	 .byte 0x4
 9594 13b4 9F0A0000 	 .4byte 0xa9f
 9595 13b8 0F       	 .uleb128 0xf
 9596 13b9 B2130000 	 .4byte 0x13b2
 9597 13bd 10       	 .uleb128 0x10
 9598 13be 04       	 .byte 0x4
 9599 13bf B90B0000 	 .4byte 0xbb9
 9600 13c3 31       	 .uleb128 0x31
 9601 13c4 B2020000 	 .4byte .LASF189
 9602 13c8 01       	 .byte 0x1
 9603 13c9 1D0C     	 .2byte 0xc1d
 9604 13cb 0F       	 .byte 0xf
 9605 13cc D50B0000 	 .4byte 0xbd5
 9606 13d0 00000000 	 .4byte .LFB44
 9607 13d4 6E000000 	 .4byte .LFE44-.LFB44
 9608 13d8 01       	 .uleb128 0x1
 9609 13d9 9C       	 .byte 0x9c
 9610 13da 29140000 	 .4byte 0x1429
 9611 13de 27       	 .uleb128 0x27
 9612 13df 8F030000 	 .4byte .LASF190
 9613 13e3 01       	 .byte 0x1
ARM GAS   			page 255


 9614 13e4 1D0C     	 .2byte 0xc1d
 9615 13e6 36       	 .byte 0x36
 9616 13e7 AA070000 	 .4byte 0x7aa
 9617 13eb 02       	 .uleb128 0x2
 9618 13ec 91       	 .byte 0x91
 9619 13ed 6E       	 .sleb128 -18
 9620 13ee 27       	 .uleb128 0x27
 9621 13ef 720F0000 	 .4byte .LASF191
 9622 13f3 01       	 .byte 0x1
 9623 13f4 1D0C     	 .2byte 0xc1d
 9624 13f6 58       	 .byte 0x58
 9625 13f7 240A0000 	 .4byte 0xa24
 9626 13fb 02       	 .uleb128 0x2
 9627 13fc 91       	 .byte 0x91
 9628 13fd 68       	 .sleb128 -24
 9629 13fe 25       	 .uleb128 0x25
 9630 13ff DF060000 	 .4byte .LASF192
 9631 1403 01       	 .byte 0x1
 9632 1404 1F0C     	 .2byte 0xc1f
 9633 1406 08       	 .byte 0x8
 9634 1407 D50B0000 	 .4byte 0xbd5
 9635 140b 02       	 .uleb128 0x2
 9636 140c 91       	 .byte 0x91
 9637 140d 74       	 .sleb128 -12
 9638 140e 33       	 .uleb128 0x33
 9639 140f 0C000000 	 .4byte .LBB165
 9640 1413 42000000 	 .4byte .LBE165-.LBB165
 9641 1417 25       	 .uleb128 0x25
 9642 1418 E10B0000 	 .4byte .LASF124
 9643 141c 01       	 .byte 0x1
 9644 141d 3B0C     	 .2byte 0xc3b
 9645 141f 0F       	 .byte 0xf
 9646 1420 1E0A0000 	 .4byte 0xa1e
 9647 1424 02       	 .uleb128 0x2
 9648 1425 91       	 .byte 0x91
 9649 1426 70       	 .sleb128 -16
 9650 1427 00       	 .byte 0
 9651 1428 00       	 .byte 0
 9652 1429 34       	 .uleb128 0x34
 9653 142a 790E0000 	 .4byte .LASF194
 9654 142e 01       	 .byte 0x1
 9655 142f FF0B     	 .2byte 0xbff
 9656 1431 0D       	 .byte 0xd
 9657 1432 00000000 	 .4byte .LFB43
 9658 1436 80000000 	 .4byte .LFE43-.LFB43
 9659 143a 01       	 .uleb128 0x1
 9660 143b 9C       	 .byte 0x9c
 9661 143c 51140000 	 .4byte 0x1451
 9662 1440 27       	 .uleb128 0x27
 9663 1441 100F0000 	 .4byte .LASF166
 9664 1445 01       	 .byte 0x1
 9665 1446 FF0B     	 .2byte 0xbff
 9666 1448 3E       	 .byte 0x3e
 9667 1449 26080000 	 .4byte 0x826
 9668 144d 02       	 .uleb128 0x2
 9669 144e 91       	 .byte 0x91
 9670 144f 74       	 .sleb128 -12
ARM GAS   			page 256


 9671 1450 00       	 .byte 0
 9672 1451 35       	 .uleb128 0x35
 9673 1452 7C100000 	 .4byte .LASF270
 9674 1456 01       	 .byte 0x1
 9675 1457 D60B     	 .2byte 0xbd6
 9676 1459 0D       	 .byte 0xd
 9677 145a 00000000 	 .4byte .LFB42
 9678 145e 0E000000 	 .4byte .LFE42-.LFB42
 9679 1462 01       	 .uleb128 0x1
 9680 1463 9C       	 .byte 0x9c
 9681 1464 34       	 .uleb128 0x34
 9682 1465 40100000 	 .4byte .LASF195
 9683 1469 01       	 .byte 0x1
 9684 146a B60B     	 .2byte 0xbb6
 9685 146c 0D       	 .byte 0xd
 9686 146d 00000000 	 .4byte .LFB41
 9687 1471 74000000 	 .4byte .LFE41-.LFB41
 9688 1475 01       	 .uleb128 0x1
 9689 1476 9C       	 .byte 0x9c
 9690 1477 8C140000 	 .4byte 0x148c
 9691 147b 25       	 .uleb128 0x25
 9692 147c 22000000 	 .4byte .LASF123
 9693 1480 01       	 .byte 0x1
 9694 1481 B80B     	 .2byte 0xbb8
 9695 1483 0D       	 .byte 0xd
 9696 1484 FF070000 	 .4byte 0x7ff
 9697 1488 02       	 .uleb128 0x2
 9698 1489 91       	 .byte 0x91
 9699 148a 74       	 .sleb128 -12
 9700 148b 00       	 .byte 0
 9701 148c 34       	 .uleb128 0x34
 9702 148d 440A0000 	 .4byte .LASF196
 9703 1491 01       	 .byte 0x1
 9704 1492 110B     	 .2byte 0xb11
 9705 1494 0D       	 .byte 0xd
 9706 1495 00000000 	 .4byte .LFB40
 9707 1499 A6000000 	 .4byte .LFE40-.LFB40
 9708 149d 01       	 .uleb128 0x1
 9709 149e 9C       	 .byte 0x9c
 9710 149f 02150000 	 .4byte 0x1502
 9711 14a3 27       	 .uleb128 0x27
 9712 14a4 3F0F0000 	 .4byte .LASF148
 9713 14a8 01       	 .byte 0x1
 9714 14a9 110B     	 .2byte 0xb11
 9715 14ab 36       	 .byte 0x36
 9716 14ac E00B0000 	 .4byte 0xbe0
 9717 14b0 02       	 .uleb128 0x2
 9718 14b1 91       	 .byte 0x91
 9719 14b2 6C       	 .sleb128 -20
 9720 14b3 27       	 .uleb128 0x27
 9721 14b4 67050000 	 .4byte .LASF197
 9722 14b8 01       	 .byte 0x1
 9723 14b9 110B     	 .2byte 0xb11
 9724 14bb 50       	 .byte 0x50
 9725 14bc EB020000 	 .4byte 0x2eb
 9726 14c0 02       	 .uleb128 0x2
 9727 14c1 91       	 .byte 0x91
ARM GAS   			page 257


 9728 14c2 68       	 .sleb128 -24
 9729 14c3 27       	 .uleb128 0x27
 9730 14c4 22000000 	 .4byte .LASF123
 9731 14c8 01       	 .byte 0x1
 9732 14c9 110B     	 .2byte 0xb11
 9733 14cb 64       	 .byte 0x64
 9734 14cc FF070000 	 .4byte 0x7ff
 9735 14d0 02       	 .uleb128 0x2
 9736 14d1 91       	 .byte 0x91
 9737 14d2 64       	 .sleb128 -28
 9738 14d3 27       	 .uleb128 0x27
 9739 14d4 700E0000 	 .4byte .LASF198
 9740 14d8 01       	 .byte 0x1
 9741 14d9 110B     	 .2byte 0xb11
 9742 14db 8D       	 .byte 0x8d
 9743 14dc 08150000 	 .4byte 0x1508
 9744 14e0 02       	 .uleb128 0x2
 9745 14e1 91       	 .byte 0x91
 9746 14e2 60       	 .sleb128 -32
 9747 14e3 27       	 .uleb128 0x27
 9748 14e4 8F030000 	 .4byte .LASF190
 9749 14e8 01       	 .byte 0x1
 9750 14e9 110B     	 .2byte 0xb11
 9751 14eb A6       	 .byte 0xa6
 9752 14ec AA070000 	 .4byte 0x7aa
 9753 14f0 02       	 .uleb128 0x2
 9754 14f1 91       	 .byte 0x91
 9755 14f2 00       	 .sleb128 0
 9756 14f3 36       	 .uleb128 0x36
 9757 14f4 7800     	 .ascii "x\000"
 9758 14f6 01       	 .byte 0x1
 9759 14f7 130B     	 .2byte 0xb13
 9760 14f9 0D       	 .byte 0xd
 9761 14fa FF070000 	 .4byte 0x7ff
 9762 14fe 02       	 .uleb128 0x2
 9763 14ff 91       	 .byte 0x91
 9764 1500 74       	 .sleb128 -12
 9765 1501 00       	 .byte 0
 9766 1502 10       	 .uleb128 0x10
 9767 1503 04       	 .byte 0x4
 9768 1504 190A0000 	 .4byte 0xa19
 9769 1508 0F       	 .uleb128 0xf
 9770 1509 02150000 	 .4byte 0x1502
 9771 150d 34       	 .uleb128 0x34
 9772 150e 89060000 	 .4byte .LASF199
 9773 1512 01       	 .byte 0x1
 9774 1513 820A     	 .2byte 0xa82
 9775 1515 08       	 .byte 0x8
 9776 1516 00000000 	 .4byte .LFB39
 9777 151a 30000000 	 .4byte .LFE39-.LFB39
 9778 151e 01       	 .uleb128 0x1
 9779 151f 9C       	 .byte 0x9c
 9780 1520 35150000 	 .4byte 0x1535
 9781 1524 27       	 .uleb128 0x27
 9782 1525 F20A0000 	 .4byte .LASF200
 9783 1529 01       	 .byte 0x1
 9784 152a 820A     	 .2byte 0xa82
ARM GAS   			page 258


 9785 152c 08       	 .byte 0x8
 9786 152d C5020000 	 .4byte 0x2c5
 9787 1531 02       	 .uleb128 0x2
 9788 1532 91       	 .byte 0x91
 9789 1533 74       	 .sleb128 -12
 9790 1534 00       	 .byte 0
 9791 1535 37       	 .uleb128 0x37
 9792 1536 9A0B0000 	 .4byte .LASF201
 9793 153a 01       	 .byte 0x1
 9794 153b 6A0A     	 .2byte 0xa6a
 9795 153d 07       	 .byte 0x7
 9796 153e 00000000 	 .4byte .LFB38
 9797 1542 26000000 	 .4byte .LFE38-.LFB38
 9798 1546 01       	 .uleb128 0x1
 9799 1547 9C       	 .byte 0x9c
 9800 1548 7D150000 	 .4byte 0x157d
 9801 154c 27       	 .uleb128 0x27
 9802 154d 350A0000 	 .4byte .LASF150
 9803 1551 01       	 .byte 0x1
 9804 1552 6A0A     	 .2byte 0xa6a
 9805 1554 28       	 .byte 0x28
 9806 1555 19090000 	 .4byte 0x919
 9807 1559 02       	 .uleb128 0x2
 9808 155a 91       	 .byte 0x91
 9809 155b 6C       	 .sleb128 -20
 9810 155c 27       	 .uleb128 0x27
 9811 155d E2010000 	 .4byte .LASF202
 9812 1561 01       	 .byte 0x1
 9813 1562 6A0A     	 .2byte 0xa6a
 9814 1564 41       	 .byte 0x41
 9815 1565 10080000 	 .4byte 0x810
 9816 1569 02       	 .uleb128 0x2
 9817 156a 91       	 .byte 0x91
 9818 156b 68       	 .sleb128 -24
 9819 156c 25       	 .uleb128 0x25
 9820 156d 3F0F0000 	 .4byte .LASF148
 9821 1571 01       	 .byte 0x1
 9822 1572 6C0A     	 .2byte 0xa6c
 9823 1574 09       	 .byte 0x9
 9824 1575 D50B0000 	 .4byte 0xbd5
 9825 1579 02       	 .uleb128 0x2
 9826 157a 91       	 .byte 0x91
 9827 157b 74       	 .sleb128 -12
 9828 157c 00       	 .byte 0
 9829 157d 2E       	 .uleb128 0x2e
 9830 157e E90E0000 	 .4byte .LASF203
 9831 1582 01       	 .byte 0x1
 9832 1583 530A     	 .2byte 0xa53
 9833 1585 0E       	 .byte 0xe
 9834 1586 FF070000 	 .4byte 0x7ff
 9835 158a 00000000 	 .4byte .LFB37
 9836 158e 2C000000 	 .4byte .LFE37-.LFB37
 9837 1592 01       	 .uleb128 0x1
 9838 1593 9C       	 .byte 0x9c
 9839 1594 C9150000 	 .4byte 0x15c9
 9840 1598 27       	 .uleb128 0x27
 9841 1599 350A0000 	 .4byte .LASF150
ARM GAS   			page 259


 9842 159d 01       	 .byte 0x1
 9843 159e 530A     	 .2byte 0xa53
 9844 15a0 30       	 .byte 0x30
 9845 15a1 19090000 	 .4byte 0x919
 9846 15a5 02       	 .uleb128 0x2
 9847 15a6 91       	 .byte 0x91
 9848 15a7 6C       	 .sleb128 -20
 9849 15a8 25       	 .uleb128 0x25
 9850 15a9 D7020000 	 .4byte .LASF171
 9851 15ad 01       	 .byte 0x1
 9852 15ae 550A     	 .2byte 0xa55
 9853 15b0 0E       	 .byte 0xe
 9854 15b1 FF070000 	 .4byte 0x7ff
 9855 15b5 02       	 .uleb128 0x2
 9856 15b6 91       	 .byte 0x91
 9857 15b7 74       	 .sleb128 -12
 9858 15b8 25       	 .uleb128 0x25
 9859 15b9 3F0F0000 	 .4byte .LASF148
 9860 15bd 01       	 .byte 0x1
 9861 15be 560A     	 .2byte 0xa56
 9862 15c0 09       	 .byte 0x9
 9863 15c1 D50B0000 	 .4byte 0xbd5
 9864 15c5 02       	 .uleb128 0x2
 9865 15c6 91       	 .byte 0x91
 9866 15c7 70       	 .sleb128 -16
 9867 15c8 00       	 .byte 0
 9868 15c9 38       	 .uleb128 0x38
 9869 15ca 9F0D0000 	 .4byte .LASF232
 9870 15ce 01       	 .byte 0x1
 9871 15cf 4B0A     	 .2byte 0xa4b
 9872 15d1 06       	 .byte 0x6
 9873 15d2 00000000 	 .4byte .LFB36
 9874 15d6 18000000 	 .4byte .LFE36-.LFB36
 9875 15da 01       	 .uleb128 0x1
 9876 15db 9C       	 .byte 0x9c
 9877 15dc 26       	 .uleb128 0x26
 9878 15dd 000C0000 	 .4byte .LASF204
 9879 15e1 01       	 .byte 0x1
 9880 15e2 1A0A     	 .2byte 0xa1a
 9881 15e4 0C       	 .byte 0xc
 9882 15e5 EE070000 	 .4byte 0x7ee
 9883 15e9 00000000 	 .4byte .LFB35
 9884 15ed CC000000 	 .4byte .LFE35-.LFB35
 9885 15f1 01       	 .uleb128 0x1
 9886 15f2 9C       	 .byte 0x9c
 9887 15f3 7E160000 	 .4byte 0x167e
 9888 15f7 27       	 .uleb128 0x27
 9889 15f8 43090000 	 .4byte .LASF205
 9890 15fc 01       	 .byte 0x1
 9891 15fd 1A0A     	 .2byte 0xa1a
 9892 15ff 34       	 .byte 0x34
 9893 1600 84160000 	 .4byte 0x1684
 9894 1604 02       	 .uleb128 0x2
 9895 1605 91       	 .byte 0x91
 9896 1606 64       	 .sleb128 -28
 9897 1607 27       	 .uleb128 0x27
 9898 1608 910D0000 	 .4byte .LASF206
ARM GAS   			page 260


 9899 160c 01       	 .byte 0x1
 9900 160d 1A0A     	 .2byte 0xa1a
 9901 160f 52       	 .byte 0x52
 9902 1610 8F160000 	 .4byte 0x168f
 9903 1614 02       	 .uleb128 0x2
 9904 1615 91       	 .byte 0x91
 9905 1616 60       	 .sleb128 -32
 9906 1617 25       	 .uleb128 0x25
 9907 1618 8B0C0000 	 .4byte .LASF149
 9908 161c 01       	 .byte 0x1
 9909 161d 1C0A     	 .2byte 0xa1c
 9910 161f 0C       	 .byte 0xc
 9911 1620 EE070000 	 .4byte 0x7ee
 9912 1624 02       	 .uleb128 0x2
 9913 1625 91       	 .byte 0x91
 9914 1626 74       	 .sleb128 -12
 9915 1627 32       	 .uleb128 0x32
 9916 1628 46000000 	 .4byte .LBB164
 9917 162c 6E000000 	 .4byte .LBE164-.LBB164
 9918 1630 45160000 	 .4byte 0x1645
 9919 1634 25       	 .uleb128 0x25
 9920 1635 44050000 	 .4byte .LASF207
 9921 1639 01       	 .byte 0x1
 9922 163a 240A     	 .2byte 0xa24
 9923 163c 14       	 .byte 0x14
 9924 163d 26080000 	 .4byte 0x826
 9925 1641 02       	 .uleb128 0x2
 9926 1642 91       	 .byte 0x91
 9927 1643 70       	 .sleb128 -16
 9928 1644 00       	 .byte 0
 9929 1645 29       	 .uleb128 0x29
 9930 1646 FA200000 	 .4byte 0x20fa
 9931 164a 10000000 	 .4byte .LBB160
 9932 164e 14000000 	 .4byte .LBE160-.LBB160
 9933 1652 01       	 .byte 0x1
 9934 1653 1E0A     	 .2byte 0xa1e
 9935 1655 02       	 .byte 0x2
 9936 1656 63160000 	 .4byte 0x1663
 9937 165a 2A       	 .uleb128 0x2a
 9938 165b 07210000 	 .4byte 0x2107
 9939 165f 02       	 .uleb128 0x2
 9940 1660 91       	 .byte 0x91
 9941 1661 6C       	 .sleb128 -20
 9942 1662 00       	 .byte 0
 9943 1663 2B       	 .uleb128 0x2b
 9944 1664 FA200000 	 .4byte 0x20fa
 9945 1668 2C000000 	 .4byte .LBB162
 9946 166c 14000000 	 .4byte .LBE162-.LBB162
 9947 1670 01       	 .byte 0x1
 9948 1671 1F0A     	 .2byte 0xa1f
 9949 1673 02       	 .byte 0x2
 9950 1674 2A       	 .uleb128 0x2a
 9951 1675 07210000 	 .4byte 0x2107
 9952 1679 02       	 .uleb128 0x2
 9953 167a 91       	 .byte 0x91
 9954 167b 68       	 .sleb128 -24
 9955 167c 00       	 .byte 0
ARM GAS   			page 261


 9956 167d 00       	 .byte 0
 9957 167e 10       	 .uleb128 0x10
 9958 167f 04       	 .byte 0x4
 9959 1680 CC090000 	 .4byte 0x9cc
 9960 1684 0F       	 .uleb128 0xf
 9961 1685 7E160000 	 .4byte 0x167e
 9962 1689 10       	 .uleb128 0x10
 9963 168a 04       	 .byte 0x4
 9964 168b 15080000 	 .4byte 0x815
 9965 168f 0F       	 .uleb128 0xf
 9966 1690 89160000 	 .4byte 0x1689
 9967 1694 37       	 .uleb128 0x37
 9968 1695 40040000 	 .4byte .LASF208
 9969 1699 01       	 .byte 0x1
 9970 169a 120A     	 .2byte 0xa12
 9971 169c 06       	 .byte 0x6
 9972 169d 00000000 	 .4byte .LFB34
 9973 16a1 48000000 	 .4byte .LFE34-.LFB34
 9974 16a5 01       	 .uleb128 0x1
 9975 16a6 9C       	 .byte 0x9c
 9976 16a7 D6160000 	 .4byte 0x16d6
 9977 16ab 27       	 .uleb128 0x27
 9978 16ac 43090000 	 .4byte .LASF205
 9979 16b0 01       	 .byte 0x1
 9980 16b1 120A     	 .2byte 0xa12
 9981 16b3 2E       	 .byte 0x2e
 9982 16b4 84160000 	 .4byte 0x1684
 9983 16b8 02       	 .uleb128 0x2
 9984 16b9 91       	 .byte 0x91
 9985 16ba 6C       	 .sleb128 -20
 9986 16bb 2B       	 .uleb128 0x2b
 9987 16bc FA200000 	 .4byte 0x20fa
 9988 16c0 0E000000 	 .4byte .LBB158
 9989 16c4 14000000 	 .4byte .LBE158-.LBB158
 9990 16c8 01       	 .byte 0x1
 9991 16c9 140A     	 .2byte 0xa14
 9992 16cb 02       	 .byte 0x2
 9993 16cc 2A       	 .uleb128 0x2a
 9994 16cd 07210000 	 .4byte 0x2107
 9995 16d1 02       	 .uleb128 0x2
 9996 16d2 91       	 .byte 0x91
 9997 16d3 74       	 .sleb128 -12
 9998 16d4 00       	 .byte 0
 9999 16d5 00       	 .byte 0
 10000 16d6 26       	 .uleb128 0x26
 10001 16d7 640D0000 	 .4byte .LASF209
 10002 16db 01       	 .byte 0x1
 10003 16dc E509     	 .2byte 0x9e5
 10004 16de 0C       	 .byte 0xc
 10005 16df EE070000 	 .4byte 0x7ee
 10006 16e3 00000000 	 .4byte .LFB33
 10007 16e7 E4000000 	 .4byte .LFE33-.LFB33
 10008 16eb 01       	 .uleb128 0x1
 10009 16ec 9C       	 .byte 0x9c
 10010 16ed 6A170000 	 .4byte 0x176a
 10011 16f1 27       	 .uleb128 0x27
 10012 16f2 5E100000 	 .4byte .LASF210
ARM GAS   			page 262


 10013 16f6 01       	 .byte 0x1
 10014 16f7 E509     	 .2byte 0x9e5
 10015 16f9 3C       	 .byte 0x3c
 10016 16fa 02090000 	 .4byte 0x902
 10017 16fe 02       	 .uleb128 0x2
 10018 16ff 91       	 .byte 0x91
 10019 1700 64       	 .sleb128 -28
 10020 1701 27       	 .uleb128 0x27
 10021 1702 FF0A0000 	 .4byte .LASF66
 10022 1706 01       	 .byte 0x1
 10023 1707 E509     	 .2byte 0x9e5
 10024 1709 5E       	 .byte 0x5e
 10025 170a 26080000 	 .4byte 0x826
 10026 170e 02       	 .uleb128 0x2
 10027 170f 91       	 .byte 0x91
 10028 1710 60       	 .sleb128 -32
 10029 1711 25       	 .uleb128 0x25
 10030 1712 80030000 	 .4byte .LASF211
 10031 1716 01       	 .byte 0x1
 10032 1717 E709     	 .2byte 0x9e7
 10033 1719 08       	 .byte 0x8
 10034 171a D50B0000 	 .4byte 0xbd5
 10035 171e 02       	 .uleb128 0x2
 10036 171f 91       	 .byte 0x91
 10037 1720 70       	 .sleb128 -16
 10038 1721 25       	 .uleb128 0x25
 10039 1722 8B0C0000 	 .4byte .LASF149
 10040 1726 01       	 .byte 0x1
 10041 1727 E809     	 .2byte 0x9e8
 10042 1729 0C       	 .byte 0xc
 10043 172a EE070000 	 .4byte 0x7ee
 10044 172e 02       	 .uleb128 0x2
 10045 172f 91       	 .byte 0x91
 10046 1730 74       	 .sleb128 -12
 10047 1731 29       	 .uleb128 0x29
 10048 1732 FA200000 	 .4byte 0x20fa
 10049 1736 1C000000 	 .4byte .LBB154
 10050 173a 14000000 	 .4byte .LBE154-.LBB154
 10051 173e 01       	 .byte 0x1
 10052 173f EC09     	 .2byte 0x9ec
 10053 1741 02       	 .byte 0x2
 10054 1742 4F170000 	 .4byte 0x174f
 10055 1746 2A       	 .uleb128 0x2a
 10056 1747 07210000 	 .4byte 0x2107
 10057 174b 02       	 .uleb128 0x2
 10058 174c 91       	 .byte 0x91
 10059 174d 6C       	 .sleb128 -20
 10060 174e 00       	 .byte 0
 10061 174f 2B       	 .uleb128 0x2b
 10062 1750 FA200000 	 .4byte 0x20fa
 10063 1754 48000000 	 .4byte .LBB156
 10064 1758 14000000 	 .4byte .LBE156-.LBB156
 10065 175c 01       	 .byte 0x1
 10066 175d F409     	 .2byte 0x9f4
 10067 175f 02       	 .byte 0x2
 10068 1760 2A       	 .uleb128 0x2a
 10069 1761 07210000 	 .4byte 0x2107
ARM GAS   			page 263


 10070 1765 02       	 .uleb128 0x2
 10071 1766 91       	 .byte 0x91
 10072 1767 68       	 .sleb128 -24
 10073 1768 00       	 .byte 0
 10074 1769 00       	 .byte 0
 10075 176a 26       	 .uleb128 0x26
 10076 176b 23060000 	 .4byte .LASF212
 10077 176f 01       	 .byte 0x1
 10078 1770 A109     	 .2byte 0x9a1
 10079 1772 0C       	 .byte 0xc
 10080 1773 EE070000 	 .4byte 0x7ee
 10081 1777 00000000 	 .4byte .LFB32
 10082 177b DC000000 	 .4byte .LFE32-.LFB32
 10083 177f 01       	 .uleb128 0x1
 10084 1780 9C       	 .byte 0x9c
 10085 1781 D0170000 	 .4byte 0x17d0
 10086 1785 27       	 .uleb128 0x27
 10087 1786 F8000000 	 .4byte .LASF213
 10088 178a 01       	 .byte 0x1
 10089 178b A109     	 .2byte 0x9a1
 10090 178d 3B       	 .byte 0x3b
 10091 178e D6170000 	 .4byte 0x17d6
 10092 1792 02       	 .uleb128 0x2
 10093 1793 91       	 .byte 0x91
 10094 1794 64       	 .sleb128 -28
 10095 1795 25       	 .uleb128 0x25
 10096 1796 80030000 	 .4byte .LASF211
 10097 179a 01       	 .byte 0x1
 10098 179b A309     	 .2byte 0x9a3
 10099 179d 08       	 .byte 0x8
 10100 179e D50B0000 	 .4byte 0xbd5
 10101 17a2 02       	 .uleb128 0x2
 10102 17a3 91       	 .byte 0x91
 10103 17a4 70       	 .sleb128 -16
 10104 17a5 25       	 .uleb128 0x25
 10105 17a6 8B0C0000 	 .4byte .LASF149
 10106 17aa 01       	 .byte 0x1
 10107 17ab A409     	 .2byte 0x9a4
 10108 17ad 0C       	 .byte 0xc
 10109 17ae EE070000 	 .4byte 0x7ee
 10110 17b2 02       	 .uleb128 0x2
 10111 17b3 91       	 .byte 0x91
 10112 17b4 74       	 .sleb128 -12
 10113 17b5 2B       	 .uleb128 0x2b
 10114 17b6 FA200000 	 .4byte 0x20fa
 10115 17ba 16000000 	 .4byte .LBB152
 10116 17be 14000000 	 .4byte .LBE152-.LBB152
 10117 17c2 01       	 .byte 0x1
 10118 17c3 B409     	 .2byte 0x9b4
 10119 17c5 02       	 .byte 0x2
 10120 17c6 2A       	 .uleb128 0x2a
 10121 17c7 07210000 	 .4byte 0x2107
 10122 17cb 02       	 .uleb128 0x2
 10123 17cc 91       	 .byte 0x91
 10124 17cd 6C       	 .sleb128 -20
 10125 17ce 00       	 .byte 0
 10126 17cf 00       	 .byte 0
ARM GAS   			page 264


 10127 17d0 10       	 .uleb128 0x10
 10128 17d1 04       	 .byte 0x4
 10129 17d2 14090000 	 .4byte 0x914
 10130 17d6 0F       	 .uleb128 0xf
 10131 17d7 D0170000 	 .4byte 0x17d0
 10132 17db 28       	 .uleb128 0x28
 10133 17dc 450D0000 	 .4byte .LASF214
 10134 17e0 01       	 .byte 0x1
 10135 17e1 1109     	 .2byte 0x911
 10136 17e3 06       	 .byte 0x6
 10137 17e4 00000000 	 .4byte .LFB31
 10138 17e8 E4000000 	 .4byte .LFE31-.LFB31
 10139 17ec 01       	 .uleb128 0x1
 10140 17ed 9C       	 .byte 0x9c
 10141 17ee 6B180000 	 .4byte 0x186b
 10142 17f2 27       	 .uleb128 0x27
 10143 17f3 F8000000 	 .4byte .LASF213
 10144 17f7 01       	 .byte 0x1
 10145 17f8 1109     	 .2byte 0x911
 10146 17fa 2F       	 .byte 0x2f
 10147 17fb 3D0C0000 	 .4byte 0xc3d
 10148 17ff 02       	 .uleb128 0x2
 10149 1800 91       	 .byte 0x91
 10150 1801 64       	 .sleb128 -28
 10151 1802 27       	 .uleb128 0x27
 10152 1803 FF0A0000 	 .4byte .LASF66
 10153 1807 01       	 .byte 0x1
 10154 1808 1109     	 .2byte 0x911
 10155 180a 4D       	 .byte 0x4d
 10156 180b 26080000 	 .4byte 0x826
 10157 180f 02       	 .uleb128 0x2
 10158 1810 91       	 .byte 0x91
 10159 1811 60       	 .sleb128 -32
 10160 1812 27       	 .uleb128 0x27
 10161 1813 1C0C0000 	 .4byte .LASF165
 10162 1817 01       	 .byte 0x1
 10163 1818 1109     	 .2byte 0x911
 10164 181a 6A       	 .byte 0x6a
 10165 181b 26080000 	 .4byte 0x826
 10166 181f 02       	 .uleb128 0x2
 10167 1820 91       	 .byte 0x91
 10168 1821 5C       	 .sleb128 -36
 10169 1822 25       	 .uleb128 0x25
 10170 1823 100F0000 	 .4byte .LASF166
 10171 1827 01       	 .byte 0x1
 10172 1828 1309     	 .2byte 0x913
 10173 182a 0C       	 .byte 0xc
 10174 182b 15080000 	 .4byte 0x815
 10175 182f 02       	 .uleb128 0x2
 10176 1830 91       	 .byte 0x91
 10177 1831 74       	 .sleb128 -12
 10178 1832 29       	 .uleb128 0x29
 10179 1833 FA200000 	 .4byte 0x20fa
 10180 1837 12000000 	 .4byte .LBB148
 10181 183b 14000000 	 .4byte .LBE148-.LBB148
 10182 183f 01       	 .byte 0x1
 10183 1840 1509     	 .2byte 0x915
ARM GAS   			page 265


 10184 1842 02       	 .byte 0x2
 10185 1843 50180000 	 .4byte 0x1850
 10186 1847 2A       	 .uleb128 0x2a
 10187 1848 07210000 	 .4byte 0x2107
 10188 184c 02       	 .uleb128 0x2
 10189 184d 91       	 .byte 0x91
 10190 184e 70       	 .sleb128 -16
 10191 184f 00       	 .byte 0
 10192 1850 2B       	 .uleb128 0x2b
 10193 1851 FA200000 	 .4byte 0x20fa
 10194 1855 3A000000 	 .4byte .LBB150
 10195 1859 14000000 	 .4byte .LBE150-.LBB150
 10196 185d 01       	 .byte 0x1
 10197 185e 1909     	 .2byte 0x919
 10198 1860 02       	 .byte 0x2
 10199 1861 2A       	 .uleb128 0x2a
 10200 1862 07210000 	 .4byte 0x2107
 10201 1866 02       	 .uleb128 0x2
 10202 1867 91       	 .byte 0x91
 10203 1868 6C       	 .sleb128 -20
 10204 1869 00       	 .byte 0
 10205 186a 00       	 .byte 0
 10206 186b 28       	 .uleb128 0x28
 10207 186c 9C050000 	 .4byte .LASF215
 10208 1870 01       	 .byte 0x1
 10209 1871 D608     	 .2byte 0x8d6
 10210 1873 06       	 .byte 0x6
 10211 1874 00000000 	 .4byte .LFB30
 10212 1878 A8000000 	 .4byte .LFE30-.LFB30
 10213 187c 01       	 .uleb128 0x1
 10214 187d 9C       	 .byte 0x9c
 10215 187e CD180000 	 .4byte 0x18cd
 10216 1882 27       	 .uleb128 0x27
 10217 1883 F8000000 	 .4byte .LASF213
 10218 1887 01       	 .byte 0x1
 10219 1888 D608     	 .2byte 0x8d6
 10220 188a 2C       	 .byte 0x2c
 10221 188b 480C0000 	 .4byte 0xc48
 10222 188f 02       	 .uleb128 0x2
 10223 1890 91       	 .byte 0x91
 10224 1891 6C       	 .sleb128 -20
 10225 1892 27       	 .uleb128 0x27
 10226 1893 1C0C0000 	 .4byte .LASF165
 10227 1897 01       	 .byte 0x1
 10228 1898 D608     	 .2byte 0x8d6
 10229 189a 4A       	 .byte 0x4a
 10230 189b 26080000 	 .4byte 0x826
 10231 189f 02       	 .uleb128 0x2
 10232 18a0 91       	 .byte 0x91
 10233 18a1 68       	 .sleb128 -24
 10234 18a2 25       	 .uleb128 0x25
 10235 18a3 100F0000 	 .4byte .LASF166
 10236 18a7 01       	 .byte 0x1
 10237 18a8 D808     	 .2byte 0x8d8
 10238 18aa 0C       	 .byte 0xc
 10239 18ab 15080000 	 .4byte 0x815
 10240 18af 02       	 .uleb128 0x2
ARM GAS   			page 266


 10241 18b0 91       	 .byte 0x91
 10242 18b1 74       	 .sleb128 -12
 10243 18b2 2B       	 .uleb128 0x2b
 10244 18b3 FA200000 	 .4byte 0x20fa
 10245 18b7 10000000 	 .4byte .LBB146
 10246 18bb 14000000 	 .4byte .LBE146-.LBB146
 10247 18bf 01       	 .byte 0x1
 10248 18c0 DA08     	 .2byte 0x8da
 10249 18c2 02       	 .byte 0x2
 10250 18c3 2A       	 .uleb128 0x2a
 10251 18c4 07210000 	 .4byte 0x2107
 10252 18c8 02       	 .uleb128 0x2
 10253 18c9 91       	 .byte 0x91
 10254 18ca 70       	 .sleb128 -16
 10255 18cb 00       	 .byte 0
 10256 18cc 00       	 .byte 0
 10257 18cd 37       	 .uleb128 0x37
 10258 18ce 950A0000 	 .4byte .LASF216
 10259 18d2 01       	 .byte 0x1
 10260 18d3 9B08     	 .2byte 0x89b
 10261 18d5 06       	 .byte 0x6
 10262 18d6 00000000 	 .4byte .LFB29
 10263 18da C0000000 	 .4byte .LFE29-.LFB29
 10264 18de 01       	 .uleb128 0x1
 10265 18df 9C       	 .byte 0x9c
 10266 18e0 5D190000 	 .4byte 0x195d
 10267 18e4 33       	 .uleb128 0x33
 10268 18e5 26000000 	 .4byte .LBB139
 10269 18e9 7A000000 	 .4byte .LBE139-.LBB139
 10270 18ed 25       	 .uleb128 0x25
 10271 18ee E8060000 	 .4byte .LASF217
 10272 18f2 01       	 .byte 0x1
 10273 18f3 C808     	 .2byte 0x8c8
 10274 18f5 03       	 .byte 0x3
 10275 18f6 FF070000 	 .4byte 0x7ff
 10276 18fa 02       	 .uleb128 0x2
 10277 18fb 91       	 .byte 0x91
 10278 18fc 74       	 .sleb128 -12
 10279 18fd 32       	 .uleb128 0x32
 10280 18fe 66000000 	 .4byte .LBB144
 10281 1902 3A000000 	 .4byte .LBE144-.LBB144
 10282 1906 1B190000 	 .4byte 0x191b
 10283 190a 25       	 .uleb128 0x25
 10284 190b 39000000 	 .4byte .LASF188
 10285 190f 01       	 .byte 0x1
 10286 1910 C808     	 .2byte 0x8c8
 10287 1912 03       	 .byte 0x3
 10288 1913 480C0000 	 .4byte 0xc48
 10289 1917 02       	 .uleb128 0x2
 10290 1918 91       	 .byte 0x91
 10291 1919 70       	 .sleb128 -16
 10292 191a 00       	 .byte 0
 10293 191b 29       	 .uleb128 0x29
 10294 191c 14210000 	 .4byte 0x2114
 10295 1920 2C000000 	 .4byte .LBB140
 10296 1924 0A000000 	 .4byte .LBE140-.LBB140
 10297 1928 01       	 .byte 0x1
ARM GAS   			page 267


 10298 1929 C808     	 .2byte 0x8c8
 10299 192b 03       	 .byte 0x3
 10300 192c 41190000 	 .4byte 0x1941
 10301 1930 2C       	 .uleb128 0x2c
 10302 1931 21210000 	 .4byte 0x2121
 10303 1935 02       	 .uleb128 0x2
 10304 1936 91       	 .byte 0x91
 10305 1937 6C       	 .sleb128 -20
 10306 1938 2A       	 .uleb128 0x2a
 10307 1939 2D210000 	 .4byte 0x212d
 10308 193d 02       	 .uleb128 0x2
 10309 193e 91       	 .byte 0x91
 10310 193f 6B       	 .sleb128 -21
 10311 1940 00       	 .byte 0
 10312 1941 2B       	 .uleb128 0x2b
 10313 1942 FA200000 	 .4byte 0x20fa
 10314 1946 50000000 	 .4byte .LBB142
 10315 194a 14000000 	 .4byte .LBE142-.LBB142
 10316 194e 01       	 .byte 0x1
 10317 194f C808     	 .2byte 0x8c8
 10318 1951 03       	 .byte 0x3
 10319 1952 2A       	 .uleb128 0x2a
 10320 1953 07210000 	 .4byte 0x2107
 10321 1957 02       	 .uleb128 0x2
 10322 1958 91       	 .byte 0x91
 10323 1959 64       	 .sleb128 -28
 10324 195a 00       	 .byte 0
 10325 195b 00       	 .byte 0
 10326 195c 00       	 .byte 0
 10327 195d 26       	 .uleb128 0x26
 10328 195e 8D040000 	 .4byte .LASF218
 10329 1962 01       	 .byte 0x1
 10330 1963 9307     	 .2byte 0x793
 10331 1965 0C       	 .byte 0xc
 10332 1966 EE070000 	 .4byte 0x7ee
 10333 196a 00000000 	 .4byte .LFB28
 10334 196e C4010000 	 .4byte .LFE28-.LFB28
 10335 1972 01       	 .uleb128 0x1
 10336 1973 9C       	 .byte 0x9c
 10337 1974 F7190000 	 .4byte 0x19f7
 10338 1978 25       	 .uleb128 0x25
 10339 1979 3F0F0000 	 .4byte .LASF148
 10340 197d 01       	 .byte 0x1
 10341 197e 9507     	 .2byte 0x795
 10342 1980 09       	 .byte 0x9
 10343 1981 D50B0000 	 .4byte 0xbd5
 10344 1985 02       	 .uleb128 0x2
 10345 1986 91       	 .byte 0x91
 10346 1987 68       	 .sleb128 -24
 10347 1988 25       	 .uleb128 0x25
 10348 1989 FF0A0000 	 .4byte .LASF66
 10349 198d 01       	 .byte 0x1
 10350 198e 9607     	 .2byte 0x796
 10351 1990 0C       	 .byte 0xc
 10352 1991 15080000 	 .4byte 0x815
 10353 1995 02       	 .uleb128 0x2
 10354 1996 91       	 .byte 0x91
ARM GAS   			page 268


 10355 1997 64       	 .sleb128 -28
 10356 1998 25       	 .uleb128 0x25
 10357 1999 AD0B0000 	 .4byte .LASF219
 10358 199d 01       	 .byte 0x1
 10359 199e 9707     	 .2byte 0x797
 10360 19a0 0C       	 .byte 0xc
 10361 19a1 EE070000 	 .4byte 0x7ee
 10362 19a5 02       	 .uleb128 0x2
 10363 19a6 91       	 .byte 0x91
 10364 19a7 74       	 .sleb128 -12
 10365 19a8 33       	 .uleb128 0x33
 10366 19a9 28000000 	 .4byte .LBB131
 10367 19ad 1E010000 	 .4byte .LBE131-.LBB131
 10368 19b1 25       	 .uleb128 0x25
 10369 19b2 44050000 	 .4byte .LASF207
 10370 19b6 01       	 .byte 0x1
 10371 19b7 A607     	 .2byte 0x7a6
 10372 19b9 15       	 .byte 0x15
 10373 19ba 26080000 	 .4byte 0x826
 10374 19be 02       	 .uleb128 0x2
 10375 19bf 91       	 .byte 0x91
 10376 19c0 70       	 .sleb128 -16
 10377 19c1 33       	 .uleb128 0x33
 10378 19c2 34000000 	 .4byte .LBB134
 10379 19c6 4C000000 	 .4byte .LBE134-.LBB134
 10380 19ca 25       	 .uleb128 0x25
 10381 19cb 60040000 	 .4byte .LASF220
 10382 19cf 01       	 .byte 0x1
 10383 19d0 AA07     	 .2byte 0x7aa
 10384 19d2 05       	 .byte 0x5
 10385 19d3 3D0C0000 	 .4byte 0xc3d
 10386 19d7 02       	 .uleb128 0x2
 10387 19d8 91       	 .byte 0x91
 10388 19d9 6C       	 .sleb128 -20
 10389 19da 2B       	 .uleb128 0x2b
 10390 19db FA200000 	 .4byte 0x20fa
 10391 19df 48000000 	 .4byte .LBB135
 10392 19e3 14000000 	 .4byte .LBE135-.LBB135
 10393 19e7 01       	 .byte 0x1
 10394 19e8 AA07     	 .2byte 0x7aa
 10395 19ea 05       	 .byte 0x5
 10396 19eb 2A       	 .uleb128 0x2a
 10397 19ec 07210000 	 .4byte 0x2107
 10398 19f0 02       	 .uleb128 0x2
 10399 19f1 91       	 .byte 0x91
 10400 19f2 60       	 .sleb128 -32
 10401 19f3 00       	 .byte 0
 10402 19f4 00       	 .byte 0
 10403 19f5 00       	 .byte 0
 10404 19f6 00       	 .byte 0
 10405 19f7 26       	 .uleb128 0x26
 10406 19f8 64080000 	 .4byte .LASF221
 10407 19fc 01       	 .byte 0x1
 10408 19fd 2B07     	 .2byte 0x72b
 10409 19ff 0E       	 .byte 0xe
 10410 1a00 FF070000 	 .4byte 0x7ff
 10411 1a04 00000000 	 .4byte .LFB27
ARM GAS   			page 269


 10412 1a08 E0000000 	 .4byte .LFE27-.LFB27
 10413 1a0c 01       	 .uleb128 0x1
 10414 1a0d 9C       	 .byte 0x9c
 10415 1a0e 631A0000 	 .4byte 0x1a63
 10416 1a12 27       	 .uleb128 0x27
 10417 1a13 C20C0000 	 .4byte .LASF182
 10418 1a17 01       	 .byte 0x1
 10419 1a18 2B07     	 .2byte 0x72b
 10420 1a1a 39       	 .byte 0x39
 10421 1a1b B8130000 	 .4byte 0x13b8
 10422 1a1f 02       	 .uleb128 0x2
 10423 1a20 91       	 .byte 0x91
 10424 1a21 6C       	 .sleb128 -20
 10425 1a22 27       	 .uleb128 0x27
 10426 1a23 EF0C0000 	 .4byte .LASF222
 10427 1a27 01       	 .byte 0x1
 10428 1a28 2B07     	 .2byte 0x72b
 10429 1a2a 5E       	 .byte 0x5e
 10430 1a2b 10080000 	 .4byte 0x810
 10431 1a2f 02       	 .uleb128 0x2
 10432 1a30 91       	 .byte 0x91
 10433 1a31 68       	 .sleb128 -24
 10434 1a32 27       	 .uleb128 0x27
 10435 1a33 6C010000 	 .4byte .LASF223
 10436 1a37 01       	 .byte 0x1
 10437 1a38 2B07     	 .2byte 0x72b
 10438 1a3a 7C       	 .byte 0x7c
 10439 1a3b 9C0F0000 	 .4byte 0xf9c
 10440 1a3f 02       	 .uleb128 0x2
 10441 1a40 91       	 .byte 0x91
 10442 1a41 64       	 .sleb128 -28
 10443 1a42 25       	 .uleb128 0x25
 10444 1a43 CB090000 	 .4byte .LASF187
 10445 1a47 01       	 .byte 0x1
 10446 1a48 2D07     	 .2byte 0x72d
 10447 1a4a 0E       	 .byte 0xe
 10448 1a4b FF070000 	 .4byte 0x7ff
 10449 1a4f 02       	 .uleb128 0x2
 10450 1a50 91       	 .byte 0x91
 10451 1a51 74       	 .sleb128 -12
 10452 1a52 25       	 .uleb128 0x25
 10453 1a53 F6060000 	 .4byte .LASF224
 10454 1a57 01       	 .byte 0x1
 10455 1a58 2D07     	 .2byte 0x72d
 10456 1a5a 1A       	 .byte 0x1a
 10457 1a5b FF070000 	 .4byte 0x7ff
 10458 1a5f 02       	 .uleb128 0x2
 10459 1a60 91       	 .byte 0x91
 10460 1a61 70       	 .sleb128 -16
 10461 1a62 00       	 .byte 0
 10462 1a63 2D       	 .uleb128 0x2d
 10463 1a64 6F000000 	 .4byte .LASF226
 10464 1a68 01       	 .byte 0x1
 10465 1a69 1207     	 .2byte 0x712
 10466 1a6b 0D       	 .byte 0xd
 10467 1a6c FF070000 	 .4byte 0x7ff
 10468 1a70 00000000 	 .4byte .LFB26
ARM GAS   			page 270


 10469 1a74 18000000 	 .4byte .LFE26-.LFB26
 10470 1a78 01       	 .uleb128 0x1
 10471 1a79 9C       	 .byte 0x9c
 10472 1a7a 26       	 .uleb128 0x26
 10473 1a7b 0E100000 	 .4byte .LASF227
 10474 1a7f 01       	 .byte 0x1
 10475 1a80 F306     	 .2byte 0x6f3
 10476 1a82 0C       	 .byte 0xc
 10477 1a83 15080000 	 .4byte 0x815
 10478 1a87 00000000 	 .4byte .LFB25
 10479 1a8b 24000000 	 .4byte .LFE25-.LFB25
 10480 1a8f 01       	 .uleb128 0x1
 10481 1a90 9C       	 .byte 0x9c
 10482 1a91 B61A0000 	 .4byte 0x1ab6
 10483 1a95 25       	 .uleb128 0x25
 10484 1a96 8B0C0000 	 .4byte .LASF149
 10485 1a9a 01       	 .byte 0x1
 10486 1a9b F506     	 .2byte 0x6f5
 10487 1a9d 0C       	 .byte 0xc
 10488 1a9e 15080000 	 .4byte 0x815
 10489 1aa2 02       	 .uleb128 0x2
 10490 1aa3 91       	 .byte 0x91
 10491 1aa4 70       	 .sleb128 -16
 10492 1aa5 25       	 .uleb128 0x25
 10493 1aa6 86010000 	 .4byte .LASF154
 10494 1aaa 01       	 .byte 0x1
 10495 1aab F606     	 .2byte 0x6f6
 10496 1aad 0D       	 .byte 0xd
 10497 1aae FF070000 	 .4byte 0x7ff
 10498 1ab2 02       	 .uleb128 0x2
 10499 1ab3 91       	 .byte 0x91
 10500 1ab4 74       	 .sleb128 -12
 10501 1ab5 00       	 .byte 0
 10502 1ab6 2E       	 .uleb128 0x2e
 10503 1ab7 580B0000 	 .4byte .LASF228
 10504 1abb 01       	 .byte 0x1
 10505 1abc E406     	 .2byte 0x6e4
 10506 1abe 0C       	 .byte 0xc
 10507 1abf 15080000 	 .4byte 0x815
 10508 1ac3 00000000 	 .4byte .LFB24
 10509 1ac7 20000000 	 .4byte .LFE24-.LFB24
 10510 1acb 01       	 .uleb128 0x1
 10511 1acc 9C       	 .byte 0x9c
 10512 1acd E21A0000 	 .4byte 0x1ae2
 10513 1ad1 25       	 .uleb128 0x25
 10514 1ad2 D40C0000 	 .4byte .LASF229
 10515 1ad6 01       	 .byte 0x1
 10516 1ad7 E606     	 .2byte 0x6e6
 10517 1ad9 0C       	 .byte 0xc
 10518 1ada 15080000 	 .4byte 0x815
 10519 1ade 02       	 .uleb128 0x2
 10520 1adf 91       	 .byte 0x91
 10521 1ae0 74       	 .sleb128 -12
 10522 1ae1 00       	 .byte 0
 10523 1ae2 26       	 .uleb128 0x26
 10524 1ae3 200B0000 	 .4byte .LASF230
 10525 1ae7 01       	 .byte 0x1
ARM GAS   			page 271


 10526 1ae8 8706     	 .2byte 0x687
 10527 1aea 0C       	 .byte 0xc
 10528 1aeb EE070000 	 .4byte 0x7ee
 10529 1aef 00000000 	 .4byte .LFB23
 10530 1af3 7C010000 	 .4byte .LFE23-.LFB23
 10531 1af7 01       	 .uleb128 0x1
 10532 1af8 9C       	 .byte 0x9c
 10533 1af9 381B0000 	 .4byte 0x1b38
 10534 1afd 25       	 .uleb128 0x25
 10535 1afe 3F0F0000 	 .4byte .LASF148
 10536 1b02 01       	 .byte 0x1
 10537 1b03 8906     	 .2byte 0x689
 10538 1b05 08       	 .byte 0x8
 10539 1b06 D50B0000 	 .4byte 0xbd5
 10540 1b0a 02       	 .uleb128 0x2
 10541 1b0b 91       	 .byte 0x91
 10542 1b0c 70       	 .sleb128 -16
 10543 1b0d 25       	 .uleb128 0x25
 10544 1b0e 180E0000 	 .4byte .LASF231
 10545 1b12 01       	 .byte 0x1
 10546 1b13 8A06     	 .2byte 0x68a
 10547 1b15 0C       	 .byte 0xc
 10548 1b16 EE070000 	 .4byte 0x7ee
 10549 1b1a 02       	 .uleb128 0x2
 10550 1b1b 91       	 .byte 0x91
 10551 1b1c 74       	 .sleb128 -12
 10552 1b1d 2B       	 .uleb128 0x2b
 10553 1b1e FA200000 	 .4byte 0x20fa
 10554 1b22 1C000000 	 .4byte .LBB127
 10555 1b26 14000000 	 .4byte .LBE127-.LBB127
 10556 1b2a 01       	 .byte 0x1
 10557 1b2b 8E06     	 .2byte 0x68e
 10558 1b2d 02       	 .byte 0x2
 10559 1b2e 2A       	 .uleb128 0x2a
 10560 1b2f 07210000 	 .4byte 0x2107
 10561 1b33 02       	 .uleb128 0x2
 10562 1b34 91       	 .byte 0x91
 10563 1b35 6C       	 .sleb128 -20
 10564 1b36 00       	 .byte 0
 10565 1b37 00       	 .byte 0
 10566 1b38 38       	 .uleb128 0x38
 10567 1b39 67040000 	 .4byte .LASF233
 10568 1b3d 01       	 .byte 0x1
 10569 1b3e 6106     	 .2byte 0x661
 10570 1b40 06       	 .byte 0x6
 10571 1b41 00000000 	 .4byte .LFB22
 10572 1b45 1C000000 	 .4byte .LFE22-.LFB22
 10573 1b49 01       	 .uleb128 0x1
 10574 1b4a 9C       	 .byte 0x9c
 10575 1b4b 28       	 .uleb128 0x28
 10576 1b4c 20050000 	 .4byte .LASF234
 10577 1b50 01       	 .byte 0x1
 10578 1b51 5606     	 .2byte 0x656
 10579 1b53 06       	 .byte 0x6
 10580 1b54 00000000 	 .4byte .LFB21
 10581 1b58 30000000 	 .4byte .LFE21-.LFB21
 10582 1b5c 01       	 .uleb128 0x1
ARM GAS   			page 272


 10583 1b5d 9C       	 .byte 0x9c
 10584 1b5e 7D1B0000 	 .4byte 0x1b7d
 10585 1b62 2B       	 .uleb128 0x2b
 10586 1b63 FA200000 	 .4byte 0x20fa
 10587 1b67 06000000 	 .4byte .LBB125
 10588 1b6b 14000000 	 .4byte .LBE125-.LBB125
 10589 1b6f 01       	 .byte 0x1
 10590 1b70 5B06     	 .2byte 0x65b
 10591 1b72 02       	 .byte 0x2
 10592 1b73 2A       	 .uleb128 0x2a
 10593 1b74 07210000 	 .4byte 0x2107
 10594 1b78 02       	 .uleb128 0x2
 10595 1b79 91       	 .byte 0x91
 10596 1b7a 74       	 .sleb128 -12
 10597 1b7b 00       	 .byte 0
 10598 1b7c 00       	 .byte 0
 10599 1b7d 28       	 .uleb128 0x28
 10600 1b7e DB0C0000 	 .4byte .LASF235
 10601 1b82 01       	 .byte 0x1
 10602 1b83 0706     	 .2byte 0x607
 10603 1b85 06       	 .byte 0x6
 10604 1b86 00000000 	 .4byte .LFB20
 10605 1b8a 98000000 	 .4byte .LFE20-.LFB20
 10606 1b8e 01       	 .uleb128 0x1
 10607 1b8f 9C       	 .byte 0x9c
 10608 1b90 DD1B0000 	 .4byte 0x1bdd
 10609 1b94 25       	 .uleb128 0x25
 10610 1b95 8B0C0000 	 .4byte .LASF149
 10611 1b99 01       	 .byte 0x1
 10612 1b9a 0906     	 .2byte 0x609
 10613 1b9c 0C       	 .byte 0xc
 10614 1b9d EE070000 	 .4byte 0x7ee
 10615 1ba1 02       	 .uleb128 0x2
 10616 1ba2 91       	 .byte 0x91
 10617 1ba3 74       	 .sleb128 -12
 10618 1ba4 29       	 .uleb128 0x29
 10619 1ba5 FA200000 	 .4byte 0x20fa
 10620 1ba9 2C000000 	 .4byte .LBB121
 10621 1bad 14000000 	 .4byte .LBE121-.LBB121
 10622 1bb1 01       	 .byte 0x1
 10623 1bb2 2D06     	 .2byte 0x62d
 10624 1bb4 03       	 .byte 0x3
 10625 1bb5 C21B0000 	 .4byte 0x1bc2
 10626 1bb9 2A       	 .uleb128 0x2a
 10627 1bba 07210000 	 .4byte 0x2107
 10628 1bbe 02       	 .uleb128 0x2
 10629 1bbf 91       	 .byte 0x91
 10630 1bc0 70       	 .sleb128 -16
 10631 1bc1 00       	 .byte 0
 10632 1bc2 2B       	 .uleb128 0x2b
 10633 1bc3 FA200000 	 .4byte 0x20fa
 10634 1bc7 64000000 	 .4byte .LBB123
 10635 1bcb 14000000 	 .4byte .LBE123-.LBB123
 10636 1bcf 01       	 .byte 0x1
 10637 1bd0 5106     	 .2byte 0x651
 10638 1bd2 03       	 .byte 0x3
 10639 1bd3 2A       	 .uleb128 0x2a
ARM GAS   			page 273


 10640 1bd4 07210000 	 .4byte 0x2107
 10641 1bd8 02       	 .uleb128 0x2
 10642 1bd9 91       	 .byte 0x91
 10643 1bda 6C       	 .sleb128 -20
 10644 1bdb 00       	 .byte 0
 10645 1bdc 00       	 .byte 0
 10646 1bdd 26       	 .uleb128 0x26
 10647 1bde 630C0000 	 .4byte .LASF236
 10648 1be2 01       	 .byte 0x1
 10649 1be3 C105     	 .2byte 0x5c1
 10650 1be5 0D       	 .byte 0xd
 10651 1be6 EE070000 	 .4byte 0x7ee
 10652 1bea 00000000 	 .4byte .LFB19
 10653 1bee 04010000 	 .4byte .LFE19-.LFB19
 10654 1bf2 01       	 .uleb128 0x1
 10655 1bf3 9C       	 .byte 0x9c
 10656 1bf4 971C0000 	 .4byte 0x1c97
 10657 1bf8 27       	 .uleb128 0x27
 10658 1bf9 C9020000 	 .4byte .LASF237
 10659 1bfd 01       	 .byte 0x1
 10660 1bfe C105     	 .2byte 0x5c1
 10661 1c00 2E       	 .byte 0x2e
 10662 1c01 19090000 	 .4byte 0x919
 10663 1c05 02       	 .uleb128 0x2
 10664 1c06 91       	 .byte 0x91
 10665 1c07 54       	 .sleb128 -44
 10666 1c08 25       	 .uleb128 0x25
 10667 1c09 3F030000 	 .4byte .LASF238
 10668 1c0d 01       	 .byte 0x1
 10669 1c0e C305     	 .2byte 0x5c3
 10670 1c10 0D       	 .byte 0xd
 10671 1c11 EE070000 	 .4byte 0x7ee
 10672 1c15 02       	 .uleb128 0x2
 10673 1c16 91       	 .byte 0x91
 10674 1c17 74       	 .sleb128 -12
 10675 1c18 25       	 .uleb128 0x25
 10676 1c19 3F0F0000 	 .4byte .LASF148
 10677 1c1d 01       	 .byte 0x1
 10678 1c1e C405     	 .2byte 0x5c4
 10679 1c20 10       	 .byte 0x10
 10680 1c21 E00B0000 	 .4byte 0xbe0
 10681 1c25 02       	 .uleb128 0x2
 10682 1c26 91       	 .byte 0x91
 10683 1c27 70       	 .sleb128 -16
 10684 1c28 25       	 .uleb128 0x25
 10685 1c29 86010000 	 .4byte .LASF154
 10686 1c2d 01       	 .byte 0x1
 10687 1c2e C505     	 .2byte 0x5c5
 10688 1c30 0E       	 .byte 0xe
 10689 1c31 FF070000 	 .4byte 0x7ff
 10690 1c35 02       	 .uleb128 0x2
 10691 1c36 91       	 .byte 0x91
 10692 1c37 6C       	 .sleb128 -20
 10693 1c38 29       	 .uleb128 0x29
 10694 1c39 FA200000 	 .4byte 0x20fa
 10695 1c3d 16000000 	 .4byte .LBB115
 10696 1c41 14000000 	 .4byte .LBE115-.LBB115
ARM GAS   			page 274


 10697 1c45 01       	 .byte 0x1
 10698 1c46 C705     	 .2byte 0x5c7
 10699 1c48 03       	 .byte 0x3
 10700 1c49 561C0000 	 .4byte 0x1c56
 10701 1c4d 2A       	 .uleb128 0x2a
 10702 1c4e 07210000 	 .4byte 0x2107
 10703 1c52 02       	 .uleb128 0x2
 10704 1c53 91       	 .byte 0x91
 10705 1c54 68       	 .sleb128 -24
 10706 1c55 00       	 .byte 0
 10707 1c56 29       	 .uleb128 0x29
 10708 1c57 D0200000 	 .4byte 0x20d0
 10709 1c5b 30000000 	 .4byte .LBB117
 10710 1c5f 1A000000 	 .4byte .LBE117-.LBB117
 10711 1c63 01       	 .byte 0x1
 10712 1c64 DB05     	 .2byte 0x5db
 10713 1c66 1C       	 .byte 0x1c
 10714 1c67 7C1C0000 	 .4byte 0x1c7c
 10715 1c6b 2A       	 .uleb128 0x2a
 10716 1c6c E1200000 	 .4byte 0x20e1
 10717 1c70 02       	 .uleb128 0x2
 10718 1c71 91       	 .byte 0x91
 10719 1c72 64       	 .sleb128 -28
 10720 1c73 2A       	 .uleb128 0x2a
 10721 1c74 ED200000 	 .4byte 0x20ed
 10722 1c78 02       	 .uleb128 0x2
 10723 1c79 91       	 .byte 0x91
 10724 1c7a 60       	 .sleb128 -32
 10725 1c7b 00       	 .byte 0
 10726 1c7c 2B       	 .uleb128 0x2b
 10727 1c7d B6200000 	 .4byte 0x20b6
 10728 1c81 DC000000 	 .4byte .LBB119
 10729 1c85 08000000 	 .4byte .LBE119-.LBB119
 10730 1c89 01       	 .byte 0x1
 10731 1c8a FF05     	 .2byte 0x5ff
 10732 1c8c 03       	 .byte 0x3
 10733 1c8d 2C       	 .uleb128 0x2c
 10734 1c8e C3200000 	 .4byte 0x20c3
 10735 1c92 02       	 .uleb128 0x2
 10736 1c93 91       	 .byte 0x91
 10737 1c94 5C       	 .sleb128 -36
 10738 1c95 00       	 .byte 0
 10739 1c96 00       	 .byte 0
 10740 1c97 28       	 .uleb128 0x28
 10741 1c98 34100000 	 .4byte .LASF239
 10742 1c9c 01       	 .byte 0x1
 10743 1c9d 8B05     	 .2byte 0x58b
 10744 1c9f 07       	 .byte 0x7
 10745 1ca0 00000000 	 .4byte .LFB18
 10746 1ca4 DC000000 	 .4byte .LFE18-.LFB18
 10747 1ca8 01       	 .uleb128 0x1
 10748 1ca9 9C       	 .byte 0x9c
 10749 1caa E91C0000 	 .4byte 0x1ce9
 10750 1cae 27       	 .uleb128 0x27
 10751 1caf C9020000 	 .4byte .LASF237
 10752 1cb3 01       	 .byte 0x1
 10753 1cb4 8B05     	 .2byte 0x58b
ARM GAS   			page 275


 10754 1cb6 21       	 .byte 0x21
 10755 1cb7 19090000 	 .4byte 0x919
 10756 1cbb 02       	 .uleb128 0x2
 10757 1cbc 91       	 .byte 0x91
 10758 1cbd 6C       	 .sleb128 -20
 10759 1cbe 25       	 .uleb128 0x25
 10760 1cbf 3F0F0000 	 .4byte .LASF148
 10761 1cc3 01       	 .byte 0x1
 10762 1cc4 8D05     	 .2byte 0x58d
 10763 1cc6 10       	 .byte 0x10
 10764 1cc7 E00B0000 	 .4byte 0xbe0
 10765 1ccb 02       	 .uleb128 0x2
 10766 1ccc 91       	 .byte 0x91
 10767 1ccd 74       	 .sleb128 -12
 10768 1cce 2B       	 .uleb128 0x2b
 10769 1ccf FA200000 	 .4byte 0x20fa
 10770 1cd3 12000000 	 .4byte .LBB113
 10771 1cd7 14000000 	 .4byte .LBE113-.LBB113
 10772 1cdb 01       	 .byte 0x1
 10773 1cdc 9005     	 .2byte 0x590
 10774 1cde 03       	 .byte 0x3
 10775 1cdf 2A       	 .uleb128 0x2a
 10776 1ce0 07210000 	 .4byte 0x2107
 10777 1ce4 02       	 .uleb128 0x2
 10778 1ce5 91       	 .byte 0x91
 10779 1ce6 70       	 .sleb128 -16
 10780 1ce7 00       	 .byte 0
 10781 1ce8 00       	 .byte 0
 10782 1ce9 30       	 .uleb128 0x30
 10783 1cea 7C0B0000 	 .4byte .LASF240
 10784 1cee 01       	 .byte 0x1
 10785 1cef 5D05     	 .2byte 0x55d
 10786 1cf1 14       	 .byte 0x14
 10787 1cf2 EE070000 	 .4byte 0x7ee
 10788 1cf6 00000000 	 .4byte .LFB17
 10789 1cfa 78000000 	 .4byte .LFE17-.LFB17
 10790 1cfe 01       	 .uleb128 0x1
 10791 1cff 9C       	 .byte 0x9c
 10792 1d00 4F1D0000 	 .4byte 0x1d4f
 10793 1d04 27       	 .uleb128 0x27
 10794 1d05 350A0000 	 .4byte .LASF150
 10795 1d09 01       	 .byte 0x1
 10796 1d0a 5D05     	 .2byte 0x55d
 10797 1d0c 3F       	 .byte 0x3f
 10798 1d0d 25090000 	 .4byte 0x925
 10799 1d11 02       	 .uleb128 0x2
 10800 1d12 91       	 .byte 0x91
 10801 1d13 64       	 .sleb128 -28
 10802 1d14 25       	 .uleb128 0x25
 10803 1d15 8B0C0000 	 .4byte .LASF149
 10804 1d19 01       	 .byte 0x1
 10805 1d1a 5F05     	 .2byte 0x55f
 10806 1d1c 0D       	 .byte 0xd
 10807 1d1d EE070000 	 .4byte 0x7ee
 10808 1d21 02       	 .uleb128 0x2
 10809 1d22 91       	 .byte 0x91
 10810 1d23 74       	 .sleb128 -12
ARM GAS   			page 276


 10811 1d24 25       	 .uleb128 0x25
 10812 1d25 3F0F0000 	 .4byte .LASF148
 10813 1d29 01       	 .byte 0x1
 10814 1d2a 6005     	 .2byte 0x560
 10815 1d2c 16       	 .byte 0x16
 10816 1d2d 551D0000 	 .4byte 0x1d55
 10817 1d31 02       	 .uleb128 0x2
 10818 1d32 91       	 .byte 0x91
 10819 1d33 70       	 .sleb128 -16
 10820 1d34 2B       	 .uleb128 0x2b
 10821 1d35 FA200000 	 .4byte 0x20fa
 10822 1d39 16000000 	 .4byte .LBB111
 10823 1d3d 14000000 	 .4byte .LBE111-.LBB111
 10824 1d41 01       	 .byte 0x1
 10825 1d42 6605     	 .2byte 0x566
 10826 1d44 03       	 .byte 0x3
 10827 1d45 2A       	 .uleb128 0x2a
 10828 1d46 07210000 	 .4byte 0x2107
 10829 1d4a 02       	 .uleb128 0x2
 10830 1d4b 91       	 .byte 0x91
 10831 1d4c 6C       	 .sleb128 -20
 10832 1d4d 00       	 .byte 0
 10833 1d4e 00       	 .byte 0
 10834 1d4f 10       	 .uleb128 0x10
 10835 1d50 04       	 .byte 0x4
 10836 1d51 BE0B0000 	 .4byte 0xbbe
 10837 1d55 0F       	 .uleb128 0xf
 10838 1d56 4F1D0000 	 .4byte 0x1d4f
 10839 1d5a 28       	 .uleb128 0x28
 10840 1d5b 0B0E0000 	 .4byte .LASF241
 10841 1d5f 01       	 .byte 0x1
 10842 1d60 0405     	 .2byte 0x504
 10843 1d62 07       	 .byte 0x7
 10844 1d63 00000000 	 .4byte .LFB16
 10845 1d67 50010000 	 .4byte .LFE16-.LFB16
 10846 1d6b 01       	 .uleb128 0x1
 10847 1d6c 9C       	 .byte 0x9c
 10848 1d6d AC1D0000 	 .4byte 0x1dac
 10849 1d71 27       	 .uleb128 0x27
 10850 1d72 F10B0000 	 .4byte .LASF242
 10851 1d76 01       	 .byte 0x1
 10852 1d77 0405     	 .2byte 0x504
 10853 1d79 22       	 .byte 0x22
 10854 1d7a 19090000 	 .4byte 0x919
 10855 1d7e 02       	 .uleb128 0x2
 10856 1d7f 91       	 .byte 0x91
 10857 1d80 6C       	 .sleb128 -20
 10858 1d81 25       	 .uleb128 0x25
 10859 1d82 3F0F0000 	 .4byte .LASF148
 10860 1d86 01       	 .byte 0x1
 10861 1d87 0605     	 .2byte 0x506
 10862 1d89 09       	 .byte 0x9
 10863 1d8a D50B0000 	 .4byte 0xbd5
 10864 1d8e 02       	 .uleb128 0x2
 10865 1d8f 91       	 .byte 0x91
 10866 1d90 74       	 .sleb128 -12
 10867 1d91 2B       	 .uleb128 0x2b
ARM GAS   			page 277


 10868 1d92 FA200000 	 .4byte 0x20fa
 10869 1d96 BC000000 	 .4byte .LBB109
 10870 1d9a 14000000 	 .4byte .LBE109-.LBB109
 10871 1d9e 01       	 .byte 0x1
 10872 1d9f 2E05     	 .2byte 0x52e
 10873 1da1 05       	 .byte 0x5
 10874 1da2 2A       	 .uleb128 0x2a
 10875 1da3 07210000 	 .4byte 0x2107
 10876 1da7 02       	 .uleb128 0x2
 10877 1da8 91       	 .byte 0x91
 10878 1da9 70       	 .sleb128 -16
 10879 1daa 00       	 .byte 0
 10880 1dab 00       	 .byte 0
 10881 1dac 28       	 .uleb128 0x28
 10882 1dad EC090000 	 .4byte .LASF243
 10883 1db1 01       	 .byte 0x1
 10884 1db2 6004     	 .2byte 0x460
 10885 1db4 07       	 .byte 0x7
 10886 1db5 00000000 	 .4byte .LFB15
 10887 1db9 88010000 	 .4byte .LFE15-.LFB15
 10888 1dbd 01       	 .uleb128 0x1
 10889 1dbe 9C       	 .byte 0x9c
 10890 1dbf 3E1E0000 	 .4byte 0x1e3e
 10891 1dc3 27       	 .uleb128 0x27
 10892 1dc4 350A0000 	 .4byte .LASF150
 10893 1dc8 01       	 .byte 0x1
 10894 1dc9 6004     	 .2byte 0x460
 10895 1dcb 26       	 .byte 0x26
 10896 1dcc 19090000 	 .4byte 0x919
 10897 1dd0 02       	 .uleb128 0x2
 10898 1dd1 91       	 .byte 0x91
 10899 1dd2 5C       	 .sleb128 -36
 10900 1dd3 27       	 .uleb128 0x27
 10901 1dd4 ED080000 	 .4byte .LASF244
 10902 1dd8 01       	 .byte 0x1
 10903 1dd9 6004     	 .2byte 0x460
 10904 1ddb 39       	 .byte 0x39
 10905 1ddc FF070000 	 .4byte 0x7ff
 10906 1de0 02       	 .uleb128 0x2
 10907 1de1 91       	 .byte 0x91
 10908 1de2 58       	 .sleb128 -40
 10909 1de3 25       	 .uleb128 0x25
 10910 1de4 3F0F0000 	 .4byte .LASF148
 10911 1de8 01       	 .byte 0x1
 10912 1de9 6204     	 .2byte 0x462
 10913 1deb 09       	 .byte 0x9
 10914 1dec D50B0000 	 .4byte 0xbd5
 10915 1df0 02       	 .uleb128 0x2
 10916 1df1 91       	 .byte 0x91
 10917 1df2 70       	 .sleb128 -16
 10918 1df3 25       	 .uleb128 0x25
 10919 1df4 AB100000 	 .4byte .LASF245
 10920 1df8 01       	 .byte 0x1
 10921 1df9 6304     	 .2byte 0x463
 10922 1dfb 0E       	 .byte 0xe
 10923 1dfc FF070000 	 .4byte 0x7ff
 10924 1e00 02       	 .uleb128 0x2
ARM GAS   			page 278


 10925 1e01 91       	 .byte 0x91
 10926 1e02 6C       	 .sleb128 -20
 10927 1e03 25       	 .uleb128 0x25
 10928 1e04 CB0B0000 	 .4byte .LASF246
 10929 1e08 01       	 .byte 0x1
 10930 1e09 6304     	 .2byte 0x463
 10931 1e0b 25       	 .byte 0x25
 10932 1e0c FF070000 	 .4byte 0x7ff
 10933 1e10 02       	 .uleb128 0x2
 10934 1e11 91       	 .byte 0x91
 10935 1e12 68       	 .sleb128 -24
 10936 1e13 25       	 .uleb128 0x25
 10937 1e14 3F030000 	 .4byte .LASF238
 10938 1e18 01       	 .byte 0x1
 10939 1e19 6404     	 .2byte 0x464
 10940 1e1b 0D       	 .byte 0xd
 10941 1e1c EE070000 	 .4byte 0x7ee
 10942 1e20 02       	 .uleb128 0x2
 10943 1e21 91       	 .byte 0x91
 10944 1e22 74       	 .sleb128 -12
 10945 1e23 2B       	 .uleb128 0x2b
 10946 1e24 FA200000 	 .4byte 0x20fa
 10947 1e28 14000000 	 .4byte .LBB107
 10948 1e2c 14000000 	 .4byte .LBE107-.LBB107
 10949 1e30 01       	 .byte 0x1
 10950 1e31 6604     	 .2byte 0x466
 10951 1e33 03       	 .byte 0x3
 10952 1e34 2A       	 .uleb128 0x2a
 10953 1e35 07210000 	 .4byte 0x2107
 10954 1e39 02       	 .uleb128 0x2
 10955 1e3a 91       	 .byte 0x91
 10956 1e3b 64       	 .sleb128 -28
 10957 1e3c 00       	 .byte 0
 10958 1e3d 00       	 .byte 0
 10959 1e3e 26       	 .uleb128 0x26
 10960 1e3f 61090000 	 .4byte .LASF247
 10961 1e43 01       	 .byte 0x1
 10962 1e44 3804     	 .2byte 0x438
 10963 1e46 0E       	 .byte 0xe
 10964 1e47 FF070000 	 .4byte 0x7ff
 10965 1e4b 00000000 	 .4byte .LFB14
 10966 1e4f 58000000 	 .4byte .LFE14-.LFB14
 10967 1e53 01       	 .uleb128 0x1
 10968 1e54 9C       	 .byte 0x9c
 10969 1e55 DA1E0000 	 .4byte 0x1eda
 10970 1e59 27       	 .uleb128 0x27
 10971 1e5a 350A0000 	 .4byte .LASF150
 10972 1e5e 01       	 .byte 0x1
 10973 1e5f 3804     	 .2byte 0x438
 10974 1e61 35       	 .byte 0x35
 10975 1e62 19090000 	 .4byte 0x919
 10976 1e66 02       	 .uleb128 0x2
 10977 1e67 91       	 .byte 0x91
 10978 1e68 5C       	 .sleb128 -36
 10979 1e69 25       	 .uleb128 0x25
 10980 1e6a 3F0F0000 	 .4byte .LASF148
 10981 1e6e 01       	 .byte 0x1
ARM GAS   			page 279


 10982 1e6f 3A04     	 .2byte 0x43a
 10983 1e71 09       	 .byte 0x9
 10984 1e72 D50B0000 	 .4byte 0xbd5
 10985 1e76 02       	 .uleb128 0x2
 10986 1e77 91       	 .byte 0x91
 10987 1e78 70       	 .sleb128 -16
 10988 1e79 25       	 .uleb128 0x25
 10989 1e7a D7020000 	 .4byte .LASF171
 10990 1e7e 01       	 .byte 0x1
 10991 1e7f 3B04     	 .2byte 0x43b
 10992 1e81 0E       	 .byte 0xe
 10993 1e82 FF070000 	 .4byte 0x7ff
 10994 1e86 02       	 .uleb128 0x2
 10995 1e87 91       	 .byte 0x91
 10996 1e88 6C       	 .sleb128 -20
 10997 1e89 25       	 .uleb128 0x25
 10998 1e8a F8030000 	 .4byte .LASF248
 10999 1e8e 01       	 .byte 0x1
 11000 1e8f 3B04     	 .2byte 0x43b
 11001 1e91 18       	 .byte 0x18
 11002 1e92 FF070000 	 .4byte 0x7ff
 11003 1e96 02       	 .uleb128 0x2
 11004 1e97 91       	 .byte 0x91
 11005 1e98 74       	 .sleb128 -12
 11006 1e99 29       	 .uleb128 0x29
 11007 1e9a D0200000 	 .4byte 0x20d0
 11008 1e9e 0C000000 	 .4byte .LBB103
 11009 1ea2 1A000000 	 .4byte .LBE103-.LBB103
 11010 1ea6 01       	 .byte 0x1
 11011 1ea7 4F04     	 .2byte 0x44f
 11012 1ea9 1B       	 .byte 0x1b
 11013 1eaa BF1E0000 	 .4byte 0x1ebf
 11014 1eae 2A       	 .uleb128 0x2a
 11015 1eaf E1200000 	 .4byte 0x20e1
 11016 1eb3 02       	 .uleb128 0x2
 11017 1eb4 91       	 .byte 0x91
 11018 1eb5 68       	 .sleb128 -24
 11019 1eb6 2A       	 .uleb128 0x2a
 11020 1eb7 ED200000 	 .4byte 0x20ed
 11021 1ebb 02       	 .uleb128 0x2
 11022 1ebc 91       	 .byte 0x91
 11023 1ebd 64       	 .sleb128 -28
 11024 1ebe 00       	 .byte 0
 11025 1ebf 2B       	 .uleb128 0x2b
 11026 1ec0 B6200000 	 .4byte 0x20b6
 11027 1ec4 42000000 	 .4byte .LBB105
 11028 1ec8 08000000 	 .4byte .LBE105-.LBB105
 11029 1ecc 01       	 .byte 0x1
 11030 1ecd 5604     	 .2byte 0x456
 11031 1ecf 03       	 .byte 0x3
 11032 1ed0 2C       	 .uleb128 0x2c
 11033 1ed1 C3200000 	 .4byte 0x20c3
 11034 1ed5 02       	 .uleb128 0x2
 11035 1ed6 91       	 .byte 0x91
 11036 1ed7 60       	 .sleb128 -32
 11037 1ed8 00       	 .byte 0
 11038 1ed9 00       	 .byte 0
ARM GAS   			page 280


 11039 1eda 26       	 .uleb128 0x26
 11040 1edb 32050000 	 .4byte .LASF249
 11041 1edf 01       	 .byte 0x1
 11042 1ee0 2204     	 .2byte 0x422
 11043 1ee2 0E       	 .byte 0xe
 11044 1ee3 FF070000 	 .4byte 0x7ff
 11045 1ee7 00000000 	 .4byte .LFB13
 11046 1eeb 34000000 	 .4byte .LFE13-.LFB13
 11047 1eef 01       	 .uleb128 0x1
 11048 1ef0 9C       	 .byte 0x9c
 11049 1ef1 261F0000 	 .4byte 0x1f26
 11050 1ef5 27       	 .uleb128 0x27
 11051 1ef6 350A0000 	 .4byte .LASF150
 11052 1efa 01       	 .byte 0x1
 11053 1efb 2204     	 .2byte 0x422
 11054 1efd 2E       	 .byte 0x2e
 11055 1efe 19090000 	 .4byte 0x919
 11056 1f02 02       	 .uleb128 0x2
 11057 1f03 91       	 .byte 0x91
 11058 1f04 6C       	 .sleb128 -20
 11059 1f05 25       	 .uleb128 0x25
 11060 1f06 3F0F0000 	 .4byte .LASF148
 11061 1f0a 01       	 .byte 0x1
 11062 1f0b 2404     	 .2byte 0x424
 11063 1f0d 09       	 .byte 0x9
 11064 1f0e D50B0000 	 .4byte 0xbd5
 11065 1f12 02       	 .uleb128 0x2
 11066 1f13 91       	 .byte 0x91
 11067 1f14 74       	 .sleb128 -12
 11068 1f15 25       	 .uleb128 0x25
 11069 1f16 D7020000 	 .4byte .LASF171
 11070 1f1a 01       	 .byte 0x1
 11071 1f1b 2504     	 .2byte 0x425
 11072 1f1d 0E       	 .byte 0xe
 11073 1f1e FF070000 	 .4byte 0x7ff
 11074 1f22 02       	 .uleb128 0x2
 11075 1f23 91       	 .byte 0x91
 11076 1f24 70       	 .sleb128 -16
 11077 1f25 00       	 .byte 0
 11078 1f26 28       	 .uleb128 0x28
 11079 1f27 B2050000 	 .4byte .LASF250
 11080 1f2b 01       	 .byte 0x1
 11081 1f2c 9A03     	 .2byte 0x39a
 11082 1f2e 07       	 .byte 0x7
 11083 1f2f 00000000 	 .4byte .LFB12
 11084 1f33 BC000000 	 .4byte .LFE12-.LFB12
 11085 1f37 01       	 .uleb128 0x1
 11086 1f38 9C       	 .byte 0x9c
 11087 1f39 881F0000 	 .4byte 0x1f88
 11088 1f3d 27       	 .uleb128 0x27
 11089 1f3e 230D0000 	 .4byte .LASF251
 11090 1f42 01       	 .byte 0x1
 11091 1f43 9A03     	 .2byte 0x39a
 11092 1f45 24       	 .byte 0x24
 11093 1f46 26080000 	 .4byte 0x826
 11094 1f4a 02       	 .uleb128 0x2
 11095 1f4b 91       	 .byte 0x91
ARM GAS   			page 281


 11096 1f4c 64       	 .sleb128 -28
 11097 1f4d 25       	 .uleb128 0x25
 11098 1f4e 100F0000 	 .4byte .LASF166
 11099 1f52 01       	 .byte 0x1
 11100 1f53 9C03     	 .2byte 0x39c
 11101 1f55 0D       	 .byte 0xd
 11102 1f56 15080000 	 .4byte 0x815
 11103 1f5a 02       	 .uleb128 0x2
 11104 1f5b 91       	 .byte 0x91
 11105 1f5c 70       	 .sleb128 -16
 11106 1f5d 25       	 .uleb128 0x25
 11107 1f5e 180E0000 	 .4byte .LASF231
 11108 1f62 01       	 .byte 0x1
 11109 1f63 9D03     	 .2byte 0x39d
 11110 1f65 0D       	 .byte 0xd
 11111 1f66 EE070000 	 .4byte 0x7ee
 11112 1f6a 02       	 .uleb128 0x2
 11113 1f6b 91       	 .byte 0x91
 11114 1f6c 74       	 .sleb128 -12
 11115 1f6d 2B       	 .uleb128 0x2b
 11116 1f6e FA200000 	 .4byte 0x20fa
 11117 1f72 24000000 	 .4byte .LBB101
 11118 1f76 14000000 	 .4byte .LBE101-.LBB101
 11119 1f7a 01       	 .byte 0x1
 11120 1f7b A303     	 .2byte 0x3a3
 11121 1f7d 04       	 .byte 0x4
 11122 1f7e 2A       	 .uleb128 0x2a
 11123 1f7f 07210000 	 .4byte 0x2107
 11124 1f83 02       	 .uleb128 0x2
 11125 1f84 91       	 .byte 0x91
 11126 1f85 6C       	 .sleb128 -20
 11127 1f86 00       	 .byte 0
 11128 1f87 00       	 .byte 0
 11129 1f88 26       	 .uleb128 0x26
 11130 1f89 820A0000 	 .4byte .LASF252
 11131 1f8d 01       	 .byte 0x1
 11132 1f8e 2702     	 .2byte 0x227
 11133 1f90 0C       	 .byte 0xc
 11134 1f91 EE070000 	 .4byte 0x7ee
 11135 1f95 00000000 	 .4byte .LFB11
 11136 1f99 E8010000 	 .4byte .LFE11-.LFB11
 11137 1f9d 01       	 .uleb128 0x1
 11138 1f9e 9C       	 .byte 0x9c
 11139 1f9f AB200000 	 .4byte 0x20ab
 11140 1fa3 27       	 .uleb128 0x27
 11141 1fa4 FE060000 	 .4byte .LASF253
 11142 1fa8 01       	 .byte 0x1
 11143 1fa9 2702     	 .2byte 0x227
 11144 1fab 2F       	 .byte 0x2f
 11145 1fac C0070000 	 .4byte 0x7c0
 11146 1fb0 02       	 .uleb128 0x2
 11147 1fb1 91       	 .byte 0x91
 11148 1fb2 5C       	 .sleb128 -36
 11149 1fb3 27       	 .uleb128 0x27
 11150 1fb4 67050000 	 .4byte .LASF197
 11151 1fb8 01       	 .byte 0x1
 11152 1fb9 2702     	 .2byte 0x227
ARM GAS   			page 282


 11153 1fbb 4E       	 .byte 0x4e
 11154 1fbc EB020000 	 .4byte 0x2eb
 11155 1fc0 02       	 .uleb128 0x2
 11156 1fc1 91       	 .byte 0x91
 11157 1fc2 58       	 .sleb128 -40
 11158 1fc3 27       	 .uleb128 0x27
 11159 1fc4 8F030000 	 .4byte .LASF190
 11160 1fc8 01       	 .byte 0x1
 11161 1fc9 2702     	 .2byte 0x227
 11162 1fcb 65       	 .byte 0x65
 11163 1fcc AA070000 	 .4byte 0x7aa
 11164 1fd0 02       	 .uleb128 0x2
 11165 1fd1 91       	 .byte 0x91
 11166 1fd2 56       	 .sleb128 -42
 11167 1fd3 27       	 .uleb128 0x27
 11168 1fd4 F20A0000 	 .4byte .LASF200
 11169 1fd8 01       	 .byte 0x1
 11170 1fd9 2702     	 .2byte 0x227
 11171 1fdb 80       	 .byte 0x80
 11172 1fdc C7020000 	 .4byte 0x2c7
 11173 1fe0 02       	 .uleb128 0x2
 11174 1fe1 91       	 .byte 0x91
 11175 1fe2 50       	 .sleb128 -48
 11176 1fe3 27       	 .uleb128 0x27
 11177 1fe4 22000000 	 .4byte .LASF123
 11178 1fe8 01       	 .byte 0x1
 11179 1fe9 2702     	 .2byte 0x227
 11180 1feb 9A       	 .byte 0x9a
 11181 1fec FF070000 	 .4byte 0x7ff
 11182 1ff0 02       	 .uleb128 0x2
 11183 1ff1 91       	 .byte 0x91
 11184 1ff2 00       	 .sleb128 0
 11185 1ff3 27       	 .uleb128 0x27
 11186 1ff4 6E100000 	 .4byte .LASF254
 11187 1ff8 01       	 .byte 0x1
 11188 1ff9 2702     	 .2byte 0x227
 11189 1ffb BB       	 .byte 0xbb
 11190 1ffc B1200000 	 .4byte 0x20b1
 11191 2000 02       	 .uleb128 0x2
 11192 2001 91       	 .byte 0x91
 11193 2002 04       	 .sleb128 4
 11194 2003 27       	 .uleb128 0x27
 11195 2004 720F0000 	 .4byte .LASF191
 11196 2008 01       	 .byte 0x1
 11197 2009 2702     	 .2byte 0x227
 11198 200b DE       	 .byte 0xde
 11199 200c 240A0000 	 .4byte 0xa24
 11200 2010 02       	 .uleb128 0x2
 11201 2011 91       	 .byte 0x91
 11202 2012 08       	 .sleb128 8
 11203 2013 39       	 .uleb128 0x39
 11204 2014 700E0000 	 .4byte .LASF198
 11205 2018 01       	 .byte 0x1
 11206 2019 2702     	 .2byte 0x227
 11207 201b 0B01     	 .2byte 0x10b
 11208 201d 08150000 	 .4byte 0x1508
 11209 2021 02       	 .uleb128 0x2
ARM GAS   			page 283


 11210 2022 91       	 .byte 0x91
 11211 2023 0C       	 .sleb128 12
 11212 2024 25       	 .uleb128 0x25
 11213 2025 8B0C0000 	 .4byte .LASF149
 11214 2029 01       	 .byte 0x1
 11215 202a 2902     	 .2byte 0x229
 11216 202c 0C       	 .byte 0xc
 11217 202d EE070000 	 .4byte 0x7ee
 11218 2031 02       	 .uleb128 0x2
 11219 2032 91       	 .byte 0x91
 11220 2033 74       	 .sleb128 -12
 11221 2034 25       	 .uleb128 0x25
 11222 2035 DF060000 	 .4byte .LASF192
 11223 2039 01       	 .byte 0x1
 11224 203a 2A02     	 .2byte 0x22a
 11225 203c 09       	 .byte 0x9
 11226 203d D50B0000 	 .4byte 0xbd5
 11227 2041 02       	 .uleb128 0x2
 11228 2042 91       	 .byte 0x91
 11229 2043 70       	 .sleb128 -16
 11230 2044 25       	 .uleb128 0x25
 11231 2045 27100000 	 .4byte .LASF120
 11232 2049 01       	 .byte 0x1
 11233 204a 2B02     	 .2byte 0x22b
 11234 204c 0E       	 .byte 0xe
 11235 204d 1E0A0000 	 .4byte 0xa1e
 11236 2051 02       	 .uleb128 0x2
 11237 2052 91       	 .byte 0x91
 11238 2053 6C       	 .sleb128 -20
 11239 2054 29       	 .uleb128 0x29
 11240 2055 FA200000 	 .4byte 0x20fa
 11241 2059 16000000 	 .4byte .LBB95
 11242 205d 14000000 	 .4byte .LBE95-.LBB95
 11243 2061 01       	 .byte 0x1
 11244 2062 2D02     	 .2byte 0x22d
 11245 2064 02       	 .byte 0x2
 11246 2065 72200000 	 .4byte 0x2072
 11247 2069 2A       	 .uleb128 0x2a
 11248 206a 07210000 	 .4byte 0x2107
 11249 206e 02       	 .uleb128 0x2
 11250 206f 91       	 .byte 0x91
 11251 2070 68       	 .sleb128 -24
 11252 2071 00       	 .byte 0
 11253 2072 29       	 .uleb128 0x29
 11254 2073 FA200000 	 .4byte 0x20fa
 11255 2077 32000000 	 .4byte .LBB97
 11256 207b 14000000 	 .4byte .LBE97-.LBB97
 11257 207f 01       	 .byte 0x1
 11258 2080 2E02     	 .2byte 0x22e
 11259 2082 02       	 .byte 0x2
 11260 2083 90200000 	 .4byte 0x2090
 11261 2087 2A       	 .uleb128 0x2a
 11262 2088 07210000 	 .4byte 0x2107
 11263 208c 02       	 .uleb128 0x2
 11264 208d 91       	 .byte 0x91
 11265 208e 64       	 .sleb128 -28
 11266 208f 00       	 .byte 0
ARM GAS   			page 284


 11267 2090 2B       	 .uleb128 0x2b
 11268 2091 FA200000 	 .4byte 0x20fa
 11269 2095 82000000 	 .4byte .LBB99
 11270 2099 14000000 	 .4byte .LBE99-.LBB99
 11271 209d 01       	 .byte 0x1
 11272 209e 5C02     	 .2byte 0x25c
 11273 20a0 04       	 .byte 0x4
 11274 20a1 2A       	 .uleb128 0x2a
 11275 20a2 07210000 	 .4byte 0x2107
 11276 20a6 02       	 .uleb128 0x2
 11277 20a7 91       	 .byte 0x91
 11278 20a8 60       	 .sleb128 -32
 11279 20a9 00       	 .byte 0
 11280 20aa 00       	 .byte 0
 11281 20ab 10       	 .uleb128 0x10
 11282 20ac 04       	 .byte 0x4
 11283 20ad 19090000 	 .4byte 0x919
 11284 20b1 0F       	 .uleb128 0xf
 11285 20b2 AB200000 	 .4byte 0x20ab
 11286 20b6 3A       	 .uleb128 0x3a
 11287 20b7 1E020000 	 .4byte .LASF257
 11288 20bb 02       	 .byte 0x2
 11289 20bc F7       	 .byte 0xf7
 11290 20bd 1E       	 .byte 0x1e
 11291 20be 03       	 .byte 0x3
 11292 20bf D0200000 	 .4byte 0x20d0
 11293 20c3 3B       	 .uleb128 0x3b
 11294 20c4 BC090000 	 .4byte .LASF260
 11295 20c8 02       	 .byte 0x2
 11296 20c9 F7       	 .byte 0xf7
 11297 20ca 38       	 .byte 0x38
 11298 20cb AF070000 	 .4byte 0x7af
 11299 20cf 00       	 .byte 0
 11300 20d0 3C       	 .uleb128 0x3c
 11301 20d1 36070000 	 .4byte .LASF271
 11302 20d5 02       	 .byte 0x2
 11303 20d6 E3       	 .byte 0xe3
 11304 20d7 22       	 .byte 0x22
 11305 20d8 AF070000 	 .4byte 0x7af
 11306 20dc 03       	 .byte 0x3
 11307 20dd FA200000 	 .4byte 0x20fa
 11308 20e1 3D       	 .uleb128 0x3d
 11309 20e2 55030000 	 .4byte .LASF255
 11310 20e6 02       	 .byte 0x2
 11311 20e7 E5       	 .byte 0xe5
 11312 20e8 0A       	 .byte 0xa
 11313 20e9 AF070000 	 .4byte 0x7af
 11314 20ed 3D       	 .uleb128 0x3d
 11315 20ee 91080000 	 .4byte .LASF256
 11316 20f2 02       	 .byte 0x2
 11317 20f3 E5       	 .byte 0xe5
 11318 20f4 1D       	 .byte 0x1d
 11319 20f5 AF070000 	 .4byte 0x7af
 11320 20f9 00       	 .byte 0
 11321 20fa 3A       	 .uleb128 0x3a
 11322 20fb 6A0B0000 	 .4byte .LASF258
 11323 20ff 02       	 .byte 0x2
ARM GAS   			page 285


 11324 2100 D3       	 .byte 0xd3
 11325 2101 1E       	 .byte 0x1e
 11326 2102 03       	 .byte 0x3
 11327 2103 14210000 	 .4byte 0x2114
 11328 2107 3D       	 .uleb128 0x3d
 11329 2108 91080000 	 .4byte .LASF256
 11330 210c 02       	 .byte 0x2
 11331 210d D5       	 .byte 0xd5
 11332 210e 0A       	 .byte 0xa
 11333 210f AF070000 	 .4byte 0x7af
 11334 2113 00       	 .byte 0
 11335 2114 3E       	 .uleb128 0x3e
 11336 2115 79080000 	 .4byte .LASF259
 11337 2119 02       	 .byte 0x2
 11338 211a AC       	 .byte 0xac
 11339 211b 3B       	 .byte 0x3b
 11340 211c 8D070000 	 .4byte 0x78d
 11341 2120 03       	 .byte 0x3
 11342 2121 3B       	 .uleb128 0x3b
 11343 2122 E90A0000 	 .4byte .LASF261
 11344 2126 02       	 .byte 0x2
 11345 2127 AC       	 .byte 0xac
 11346 2128 5D       	 .byte 0x5d
 11347 2129 AF070000 	 .4byte 0x7af
 11348 212d 3D       	 .uleb128 0x3d
 11349 212e 4B0C0000 	 .4byte .LASF262
 11350 2132 02       	 .byte 0x2
 11351 2133 AE       	 .byte 0xae
 11352 2134 0A       	 .byte 0xa
 11353 2135 8D070000 	 .4byte 0x78d
 11354 2139 00       	 .byte 0
 11355 213a 00       	 .byte 0
 11356              	 .section .debug_abbrev,"",%progbits
 11357              	.Ldebug_abbrev0:
 11358 0000 01       	 .uleb128 0x1
 11359 0001 11       	 .uleb128 0x11
 11360 0002 01       	 .byte 0x1
 11361 0003 25       	 .uleb128 0x25
 11362 0004 0E       	 .uleb128 0xe
 11363 0005 13       	 .uleb128 0x13
 11364 0006 0B       	 .uleb128 0xb
 11365 0007 03       	 .uleb128 0x3
 11366 0008 0E       	 .uleb128 0xe
 11367 0009 1B       	 .uleb128 0x1b
 11368 000a 0E       	 .uleb128 0xe
 11369 000b 55       	 .uleb128 0x55
 11370 000c 17       	 .uleb128 0x17
 11371 000d 11       	 .uleb128 0x11
 11372 000e 01       	 .uleb128 0x1
 11373 000f 10       	 .uleb128 0x10
 11374 0010 17       	 .uleb128 0x17
 11375 0011 00       	 .byte 0
 11376 0012 00       	 .byte 0
 11377 0013 02       	 .uleb128 0x2
 11378 0014 39       	 .uleb128 0x39
 11379 0015 01       	 .byte 0x1
 11380 0016 03       	 .uleb128 0x3
ARM GAS   			page 286


 11381 0017 08       	 .uleb128 0x8
 11382 0018 3A       	 .uleb128 0x3a
 11383 0019 0B       	 .uleb128 0xb
 11384 001a 3B       	 .uleb128 0x3b
 11385 001b 0B       	 .uleb128 0xb
 11386 001c 01       	 .uleb128 0x1
 11387 001d 13       	 .uleb128 0x13
 11388 001e 00       	 .byte 0
 11389 001f 00       	 .byte 0
 11390 0020 03       	 .uleb128 0x3
 11391 0021 39       	 .uleb128 0x39
 11392 0022 00       	 .byte 0
 11393 0023 03       	 .uleb128 0x3
 11394 0024 0E       	 .uleb128 0xe
 11395 0025 3A       	 .uleb128 0x3a
 11396 0026 0B       	 .uleb128 0xb
 11397 0027 3B       	 .uleb128 0x3b
 11398 0028 05       	 .uleb128 0x5
 11399 0029 39       	 .uleb128 0x39
 11400 002a 0B       	 .uleb128 0xb
 11401 002b 8901     	 .uleb128 0x89
 11402 002d 19       	 .uleb128 0x19
 11403 002e 00       	 .byte 0
 11404 002f 00       	 .byte 0
 11405 0030 04       	 .uleb128 0x4
 11406 0031 3A       	 .uleb128 0x3a
 11407 0032 00       	 .byte 0
 11408 0033 3A       	 .uleb128 0x3a
 11409 0034 0B       	 .uleb128 0xb
 11410 0035 3B       	 .uleb128 0x3b
 11411 0036 05       	 .uleb128 0x5
 11412 0037 39       	 .uleb128 0x39
 11413 0038 0B       	 .uleb128 0xb
 11414 0039 18       	 .uleb128 0x18
 11415 003a 13       	 .uleb128 0x13
 11416 003b 00       	 .byte 0
 11417 003c 00       	 .byte 0
 11418 003d 05       	 .uleb128 0x5
 11419 003e 08       	 .uleb128 0x8
 11420 003f 00       	 .byte 0
 11421 0040 3A       	 .uleb128 0x3a
 11422 0041 0B       	 .uleb128 0xb
 11423 0042 3B       	 .uleb128 0x3b
 11424 0043 0B       	 .uleb128 0xb
 11425 0044 39       	 .uleb128 0x39
 11426 0045 0B       	 .uleb128 0xb
 11427 0046 18       	 .uleb128 0x18
 11428 0047 13       	 .uleb128 0x13
 11429 0048 00       	 .byte 0
 11430 0049 00       	 .byte 0
 11431 004a 06       	 .uleb128 0x6
 11432 004b 2E       	 .uleb128 0x2e
 11433 004c 01       	 .byte 0x1
 11434 004d 3F       	 .uleb128 0x3f
 11435 004e 19       	 .uleb128 0x19
 11436 004f 03       	 .uleb128 0x3
 11437 0050 08       	 .uleb128 0x8
ARM GAS   			page 287


 11438 0051 3A       	 .uleb128 0x3a
 11439 0052 0B       	 .uleb128 0xb
 11440 0053 3B       	 .uleb128 0x3b
 11441 0054 0B       	 .uleb128 0xb
 11442 0055 39       	 .uleb128 0x39
 11443 0056 0B       	 .uleb128 0xb
 11444 0057 6E       	 .uleb128 0x6e
 11445 0058 0E       	 .uleb128 0xe
 11446 0059 49       	 .uleb128 0x49
 11447 005a 13       	 .uleb128 0x13
 11448 005b 3C       	 .uleb128 0x3c
 11449 005c 19       	 .uleb128 0x19
 11450 005d 01       	 .uleb128 0x1
 11451 005e 13       	 .uleb128 0x13
 11452 005f 00       	 .byte 0
 11453 0060 00       	 .byte 0
 11454 0061 07       	 .uleb128 0x7
 11455 0062 05       	 .uleb128 0x5
 11456 0063 00       	 .byte 0
 11457 0064 49       	 .uleb128 0x49
 11458 0065 13       	 .uleb128 0x13
 11459 0066 00       	 .byte 0
 11460 0067 00       	 .byte 0
 11461 0068 08       	 .uleb128 0x8
 11462 0069 2E       	 .uleb128 0x2e
 11463 006a 01       	 .byte 0x1
 11464 006b 3F       	 .uleb128 0x3f
 11465 006c 19       	 .uleb128 0x19
 11466 006d 03       	 .uleb128 0x3
 11467 006e 08       	 .uleb128 0x8
 11468 006f 3A       	 .uleb128 0x3a
 11469 0070 0B       	 .uleb128 0xb
 11470 0071 3B       	 .uleb128 0x3b
 11471 0072 0B       	 .uleb128 0xb
 11472 0073 39       	 .uleb128 0x39
 11473 0074 0B       	 .uleb128 0xb
 11474 0075 6E       	 .uleb128 0x6e
 11475 0076 0E       	 .uleb128 0xe
 11476 0077 49       	 .uleb128 0x49
 11477 0078 13       	 .uleb128 0x13
 11478 0079 3C       	 .uleb128 0x3c
 11479 007a 19       	 .uleb128 0x19
 11480 007b 00       	 .byte 0
 11481 007c 00       	 .byte 0
 11482 007d 09       	 .uleb128 0x9
 11483 007e 39       	 .uleb128 0x39
 11484 007f 01       	 .byte 0x1
 11485 0080 03       	 .uleb128 0x3
 11486 0081 0E       	 .uleb128 0xe
 11487 0082 3A       	 .uleb128 0x3a
 11488 0083 0B       	 .uleb128 0xb
 11489 0084 3B       	 .uleb128 0x3b
 11490 0085 05       	 .uleb128 0x5
 11491 0086 39       	 .uleb128 0x39
 11492 0087 0B       	 .uleb128 0xb
 11493 0088 01       	 .uleb128 0x1
 11494 0089 13       	 .uleb128 0x13
ARM GAS   			page 288


 11495 008a 00       	 .byte 0
 11496 008b 00       	 .byte 0
 11497 008c 0A       	 .uleb128 0xa
 11498 008d 16       	 .uleb128 0x16
 11499 008e 00       	 .byte 0
 11500 008f 03       	 .uleb128 0x3
 11501 0090 0E       	 .uleb128 0xe
 11502 0091 3A       	 .uleb128 0x3a
 11503 0092 0B       	 .uleb128 0xb
 11504 0093 3B       	 .uleb128 0x3b
 11505 0094 0B       	 .uleb128 0xb
 11506 0095 39       	 .uleb128 0x39
 11507 0096 0B       	 .uleb128 0xb
 11508 0097 49       	 .uleb128 0x49
 11509 0098 13       	 .uleb128 0x13
 11510 0099 00       	 .byte 0
 11511 009a 00       	 .byte 0
 11512 009b 0B       	 .uleb128 0xb
 11513 009c 24       	 .uleb128 0x24
 11514 009d 00       	 .byte 0
 11515 009e 0B       	 .uleb128 0xb
 11516 009f 0B       	 .uleb128 0xb
 11517 00a0 3E       	 .uleb128 0x3e
 11518 00a1 0B       	 .uleb128 0xb
 11519 00a2 03       	 .uleb128 0x3
 11520 00a3 0E       	 .uleb128 0xe
 11521 00a4 00       	 .byte 0
 11522 00a5 00       	 .byte 0
 11523 00a6 0C       	 .uleb128 0xc
 11524 00a7 24       	 .uleb128 0x24
 11525 00a8 00       	 .byte 0
 11526 00a9 0B       	 .uleb128 0xb
 11527 00aa 0B       	 .uleb128 0xb
 11528 00ab 3E       	 .uleb128 0x3e
 11529 00ac 0B       	 .uleb128 0xb
 11530 00ad 03       	 .uleb128 0x3
 11531 00ae 08       	 .uleb128 0x8
 11532 00af 00       	 .byte 0
 11533 00b0 00       	 .byte 0
 11534 00b1 0D       	 .uleb128 0xd
 11535 00b2 3B       	 .uleb128 0x3b
 11536 00b3 00       	 .byte 0
 11537 00b4 03       	 .uleb128 0x3
 11538 00b5 0E       	 .uleb128 0xe
 11539 00b6 00       	 .byte 0
 11540 00b7 00       	 .byte 0
 11541 00b8 0E       	 .uleb128 0xe
 11542 00b9 0F       	 .uleb128 0xf
 11543 00ba 00       	 .byte 0
 11544 00bb 0B       	 .uleb128 0xb
 11545 00bc 0B       	 .uleb128 0xb
 11546 00bd 00       	 .byte 0
 11547 00be 00       	 .byte 0
 11548 00bf 0F       	 .uleb128 0xf
 11549 00c0 26       	 .uleb128 0x26
 11550 00c1 00       	 .byte 0
 11551 00c2 49       	 .uleb128 0x49
ARM GAS   			page 289


 11552 00c3 13       	 .uleb128 0x13
 11553 00c4 00       	 .byte 0
 11554 00c5 00       	 .byte 0
 11555 00c6 10       	 .uleb128 0x10
 11556 00c7 0F       	 .uleb128 0xf
 11557 00c8 00       	 .byte 0
 11558 00c9 0B       	 .uleb128 0xb
 11559 00ca 0B       	 .uleb128 0xb
 11560 00cb 49       	 .uleb128 0x49
 11561 00cc 13       	 .uleb128 0x13
 11562 00cd 00       	 .byte 0
 11563 00ce 00       	 .byte 0
 11564 00cf 11       	 .uleb128 0x11
 11565 00d0 15       	 .uleb128 0x15
 11566 00d1 00       	 .byte 0
 11567 00d2 00       	 .byte 0
 11568 00d3 00       	 .byte 0
 11569 00d4 12       	 .uleb128 0x12
 11570 00d5 13       	 .uleb128 0x13
 11571 00d6 01       	 .byte 0x1
 11572 00d7 0B       	 .uleb128 0xb
 11573 00d8 0B       	 .uleb128 0xb
 11574 00d9 3A       	 .uleb128 0x3a
 11575 00da 0B       	 .uleb128 0xb
 11576 00db 3B       	 .uleb128 0x3b
 11577 00dc 0B       	 .uleb128 0xb
 11578 00dd 39       	 .uleb128 0x39
 11579 00de 0B       	 .uleb128 0xb
 11580 00df 6E       	 .uleb128 0x6e
 11581 00e0 0E       	 .uleb128 0xe
 11582 00e1 01       	 .uleb128 0x1
 11583 00e2 13       	 .uleb128 0x13
 11584 00e3 00       	 .byte 0
 11585 00e4 00       	 .byte 0
 11586 00e5 13       	 .uleb128 0x13
 11587 00e6 0D       	 .uleb128 0xd
 11588 00e7 00       	 .byte 0
 11589 00e8 03       	 .uleb128 0x3
 11590 00e9 0E       	 .uleb128 0xe
 11591 00ea 3A       	 .uleb128 0x3a
 11592 00eb 0B       	 .uleb128 0xb
 11593 00ec 3B       	 .uleb128 0x3b
 11594 00ed 0B       	 .uleb128 0xb
 11595 00ee 39       	 .uleb128 0x39
 11596 00ef 0B       	 .uleb128 0xb
 11597 00f0 49       	 .uleb128 0x49
 11598 00f1 13       	 .uleb128 0x13
 11599 00f2 38       	 .uleb128 0x38
 11600 00f3 0B       	 .uleb128 0xb
 11601 00f4 00       	 .byte 0
 11602 00f5 00       	 .byte 0
 11603 00f6 14       	 .uleb128 0x14
 11604 00f7 0D       	 .uleb128 0xd
 11605 00f8 00       	 .byte 0
 11606 00f9 03       	 .uleb128 0x3
 11607 00fa 08       	 .uleb128 0x8
 11608 00fb 3A       	 .uleb128 0x3a
ARM GAS   			page 290


 11609 00fc 0B       	 .uleb128 0xb
 11610 00fd 3B       	 .uleb128 0x3b
 11611 00fe 0B       	 .uleb128 0xb
 11612 00ff 39       	 .uleb128 0x39
 11613 0100 0B       	 .uleb128 0xb
 11614 0101 49       	 .uleb128 0x49
 11615 0102 13       	 .uleb128 0x13
 11616 0103 38       	 .uleb128 0x38
 11617 0104 0B       	 .uleb128 0xb
 11618 0105 00       	 .byte 0
 11619 0106 00       	 .byte 0
 11620 0107 15       	 .uleb128 0x15
 11621 0108 15       	 .uleb128 0x15
 11622 0109 01       	 .byte 0x1
 11623 010a 49       	 .uleb128 0x49
 11624 010b 13       	 .uleb128 0x13
 11625 010c 01       	 .uleb128 0x1
 11626 010d 13       	 .uleb128 0x13
 11627 010e 00       	 .byte 0
 11628 010f 00       	 .byte 0
 11629 0110 16       	 .uleb128 0x16
 11630 0111 26       	 .uleb128 0x26
 11631 0112 00       	 .byte 0
 11632 0113 00       	 .byte 0
 11633 0114 00       	 .byte 0
 11634 0115 17       	 .uleb128 0x17
 11635 0116 2E       	 .uleb128 0x2e
 11636 0117 01       	 .byte 0x1
 11637 0118 3F       	 .uleb128 0x3f
 11638 0119 19       	 .uleb128 0x19
 11639 011a 03       	 .uleb128 0x3
 11640 011b 0E       	 .uleb128 0xe
 11641 011c 3A       	 .uleb128 0x3a
 11642 011d 0B       	 .uleb128 0xb
 11643 011e 3B       	 .uleb128 0x3b
 11644 011f 0B       	 .uleb128 0xb
 11645 0120 39       	 .uleb128 0x39
 11646 0121 0B       	 .uleb128 0xb
 11647 0122 49       	 .uleb128 0x49
 11648 0123 13       	 .uleb128 0x13
 11649 0124 3C       	 .uleb128 0x3c
 11650 0125 19       	 .uleb128 0x19
 11651 0126 01       	 .uleb128 0x1
 11652 0127 13       	 .uleb128 0x13
 11653 0128 00       	 .byte 0
 11654 0129 00       	 .byte 0
 11655 012a 18       	 .uleb128 0x18
 11656 012b 2E       	 .uleb128 0x2e
 11657 012c 01       	 .byte 0x1
 11658 012d 3F       	 .uleb128 0x3f
 11659 012e 19       	 .uleb128 0x19
 11660 012f 03       	 .uleb128 0x3
 11661 0130 08       	 .uleb128 0x8
 11662 0131 3A       	 .uleb128 0x3a
 11663 0132 0B       	 .uleb128 0xb
 11664 0133 3B       	 .uleb128 0x3b
 11665 0134 0B       	 .uleb128 0xb
ARM GAS   			page 291


 11666 0135 39       	 .uleb128 0x39
 11667 0136 0B       	 .uleb128 0xb
 11668 0137 49       	 .uleb128 0x49
 11669 0138 13       	 .uleb128 0x13
 11670 0139 3C       	 .uleb128 0x3c
 11671 013a 19       	 .uleb128 0x19
 11672 013b 01       	 .uleb128 0x1
 11673 013c 13       	 .uleb128 0x13
 11674 013d 00       	 .byte 0
 11675 013e 00       	 .byte 0
 11676 013f 19       	 .uleb128 0x19
 11677 0140 2E       	 .uleb128 0x2e
 11678 0141 01       	 .byte 0x1
 11679 0142 3F       	 .uleb128 0x3f
 11680 0143 19       	 .uleb128 0x19
 11681 0144 03       	 .uleb128 0x3
 11682 0145 0E       	 .uleb128 0xe
 11683 0146 3A       	 .uleb128 0x3a
 11684 0147 0B       	 .uleb128 0xb
 11685 0148 3B       	 .uleb128 0x3b
 11686 0149 0B       	 .uleb128 0xb
 11687 014a 39       	 .uleb128 0x39
 11688 014b 0B       	 .uleb128 0xb
 11689 014c 3C       	 .uleb128 0x3c
 11690 014d 19       	 .uleb128 0x19
 11691 014e 01       	 .uleb128 0x1
 11692 014f 13       	 .uleb128 0x13
 11693 0150 00       	 .byte 0
 11694 0151 00       	 .byte 0
 11695 0152 1A       	 .uleb128 0x1a
 11696 0153 2E       	 .uleb128 0x2e
 11697 0154 00       	 .byte 0
 11698 0155 3F       	 .uleb128 0x3f
 11699 0156 19       	 .uleb128 0x19
 11700 0157 03       	 .uleb128 0x3
 11701 0158 0E       	 .uleb128 0xe
 11702 0159 3A       	 .uleb128 0x3a
 11703 015a 0B       	 .uleb128 0xb
 11704 015b 3B       	 .uleb128 0x3b
 11705 015c 0B       	 .uleb128 0xb
 11706 015d 39       	 .uleb128 0x39
 11707 015e 0B       	 .uleb128 0xb
 11708 015f 49       	 .uleb128 0x49
 11709 0160 13       	 .uleb128 0x13
 11710 0161 3C       	 .uleb128 0x3c
 11711 0162 19       	 .uleb128 0x19
 11712 0163 00       	 .byte 0
 11713 0164 00       	 .byte 0
 11714 0165 1B       	 .uleb128 0x1b
 11715 0166 2E       	 .uleb128 0x2e
 11716 0167 01       	 .byte 0x1
 11717 0168 3F       	 .uleb128 0x3f
 11718 0169 19       	 .uleb128 0x19
 11719 016a 03       	 .uleb128 0x3
 11720 016b 0E       	 .uleb128 0xe
 11721 016c 3A       	 .uleb128 0x3a
 11722 016d 0B       	 .uleb128 0xb
ARM GAS   			page 292


 11723 016e 3B       	 .uleb128 0x3b
 11724 016f 05       	 .uleb128 0x5
 11725 0170 39       	 .uleb128 0x39
 11726 0171 0B       	 .uleb128 0xb
 11727 0172 49       	 .uleb128 0x49
 11728 0173 13       	 .uleb128 0x13
 11729 0174 3C       	 .uleb128 0x3c
 11730 0175 19       	 .uleb128 0x19
 11731 0176 01       	 .uleb128 0x1
 11732 0177 13       	 .uleb128 0x13
 11733 0178 00       	 .byte 0
 11734 0179 00       	 .byte 0
 11735 017a 1C       	 .uleb128 0x1c
 11736 017b 35       	 .uleb128 0x35
 11737 017c 00       	 .byte 0
 11738 017d 49       	 .uleb128 0x49
 11739 017e 13       	 .uleb128 0x13
 11740 017f 00       	 .byte 0
 11741 0180 00       	 .byte 0
 11742 0181 1D       	 .uleb128 0x1d
 11743 0182 15       	 .uleb128 0x15
 11744 0183 01       	 .byte 0x1
 11745 0184 01       	 .uleb128 0x1
 11746 0185 13       	 .uleb128 0x13
 11747 0186 00       	 .byte 0
 11748 0187 00       	 .byte 0
 11749 0188 1E       	 .uleb128 0x1e
 11750 0189 13       	 .uleb128 0x13
 11751 018a 01       	 .byte 0x1
 11752 018b 03       	 .uleb128 0x3
 11753 018c 0E       	 .uleb128 0xe
 11754 018d 0B       	 .uleb128 0xb
 11755 018e 0B       	 .uleb128 0xb
 11756 018f 3A       	 .uleb128 0x3a
 11757 0190 0B       	 .uleb128 0xb
 11758 0191 3B       	 .uleb128 0x3b
 11759 0192 0B       	 .uleb128 0xb
 11760 0193 39       	 .uleb128 0x39
 11761 0194 0B       	 .uleb128 0xb
 11762 0195 01       	 .uleb128 0x1
 11763 0196 13       	 .uleb128 0x13
 11764 0197 00       	 .byte 0
 11765 0198 00       	 .byte 0
 11766 0199 1F       	 .uleb128 0x1f
 11767 019a 04       	 .uleb128 0x4
 11768 019b 01       	 .byte 0x1
 11769 019c 3E       	 .uleb128 0x3e
 11770 019d 0B       	 .uleb128 0xb
 11771 019e 0B       	 .uleb128 0xb
 11772 019f 0B       	 .uleb128 0xb
 11773 01a0 49       	 .uleb128 0x49
 11774 01a1 13       	 .uleb128 0x13
 11775 01a2 3A       	 .uleb128 0x3a
 11776 01a3 0B       	 .uleb128 0xb
 11777 01a4 3B       	 .uleb128 0x3b
 11778 01a5 0B       	 .uleb128 0xb
 11779 01a6 39       	 .uleb128 0x39
ARM GAS   			page 293


 11780 01a7 0B       	 .uleb128 0xb
 11781 01a8 6E       	 .uleb128 0x6e
 11782 01a9 0E       	 .uleb128 0xe
 11783 01aa 01       	 .uleb128 0x1
 11784 01ab 13       	 .uleb128 0x13
 11785 01ac 00       	 .byte 0
 11786 01ad 00       	 .byte 0
 11787 01ae 20       	 .uleb128 0x20
 11788 01af 28       	 .uleb128 0x28
 11789 01b0 00       	 .byte 0
 11790 01b1 03       	 .uleb128 0x3
 11791 01b2 0E       	 .uleb128 0xe
 11792 01b3 1C       	 .uleb128 0x1c
 11793 01b4 0B       	 .uleb128 0xb
 11794 01b5 00       	 .byte 0
 11795 01b6 00       	 .byte 0
 11796 01b7 21       	 .uleb128 0x21
 11797 01b8 01       	 .uleb128 0x1
 11798 01b9 01       	 .byte 0x1
 11799 01ba 49       	 .uleb128 0x49
 11800 01bb 13       	 .uleb128 0x13
 11801 01bc 01       	 .uleb128 0x1
 11802 01bd 13       	 .uleb128 0x13
 11803 01be 00       	 .byte 0
 11804 01bf 00       	 .byte 0
 11805 01c0 22       	 .uleb128 0x22
 11806 01c1 21       	 .uleb128 0x21
 11807 01c2 00       	 .byte 0
 11808 01c3 49       	 .uleb128 0x49
 11809 01c4 13       	 .uleb128 0x13
 11810 01c5 2F       	 .uleb128 0x2f
 11811 01c6 0B       	 .uleb128 0xb
 11812 01c7 00       	 .byte 0
 11813 01c8 00       	 .byte 0
 11814 01c9 23       	 .uleb128 0x23
 11815 01ca 34       	 .uleb128 0x34
 11816 01cb 00       	 .byte 0
 11817 01cc 03       	 .uleb128 0x3
 11818 01cd 0E       	 .uleb128 0xe
 11819 01ce 3A       	 .uleb128 0x3a
 11820 01cf 0B       	 .uleb128 0xb
 11821 01d0 3B       	 .uleb128 0x3b
 11822 01d1 0B       	 .uleb128 0xb
 11823 01d2 39       	 .uleb128 0x39
 11824 01d3 0B       	 .uleb128 0xb
 11825 01d4 49       	 .uleb128 0x49
 11826 01d5 13       	 .uleb128 0x13
 11827 01d6 3F       	 .uleb128 0x3f
 11828 01d7 19       	 .uleb128 0x19
 11829 01d8 02       	 .uleb128 0x2
 11830 01d9 18       	 .uleb128 0x18
 11831 01da 00       	 .byte 0
 11832 01db 00       	 .byte 0
 11833 01dc 24       	 .uleb128 0x24
 11834 01dd 34       	 .uleb128 0x34
 11835 01de 00       	 .byte 0
 11836 01df 03       	 .uleb128 0x3
ARM GAS   			page 294


 11837 01e0 0E       	 .uleb128 0xe
 11838 01e1 3A       	 .uleb128 0x3a
 11839 01e2 0B       	 .uleb128 0xb
 11840 01e3 3B       	 .uleb128 0x3b
 11841 01e4 0B       	 .uleb128 0xb
 11842 01e5 39       	 .uleb128 0x39
 11843 01e6 0B       	 .uleb128 0xb
 11844 01e7 49       	 .uleb128 0x49
 11845 01e8 13       	 .uleb128 0x13
 11846 01e9 02       	 .uleb128 0x2
 11847 01ea 18       	 .uleb128 0x18
 11848 01eb 00       	 .byte 0
 11849 01ec 00       	 .byte 0
 11850 01ed 25       	 .uleb128 0x25
 11851 01ee 34       	 .uleb128 0x34
 11852 01ef 00       	 .byte 0
 11853 01f0 03       	 .uleb128 0x3
 11854 01f1 0E       	 .uleb128 0xe
 11855 01f2 3A       	 .uleb128 0x3a
 11856 01f3 0B       	 .uleb128 0xb
 11857 01f4 3B       	 .uleb128 0x3b
 11858 01f5 05       	 .uleb128 0x5
 11859 01f6 39       	 .uleb128 0x39
 11860 01f7 0B       	 .uleb128 0xb
 11861 01f8 49       	 .uleb128 0x49
 11862 01f9 13       	 .uleb128 0x13
 11863 01fa 02       	 .uleb128 0x2
 11864 01fb 18       	 .uleb128 0x18
 11865 01fc 00       	 .byte 0
 11866 01fd 00       	 .byte 0
 11867 01fe 26       	 .uleb128 0x26
 11868 01ff 2E       	 .uleb128 0x2e
 11869 0200 01       	 .byte 0x1
 11870 0201 3F       	 .uleb128 0x3f
 11871 0202 19       	 .uleb128 0x19
 11872 0203 03       	 .uleb128 0x3
 11873 0204 0E       	 .uleb128 0xe
 11874 0205 3A       	 .uleb128 0x3a
 11875 0206 0B       	 .uleb128 0xb
 11876 0207 3B       	 .uleb128 0x3b
 11877 0208 05       	 .uleb128 0x5
 11878 0209 39       	 .uleb128 0x39
 11879 020a 0B       	 .uleb128 0xb
 11880 020b 49       	 .uleb128 0x49
 11881 020c 13       	 .uleb128 0x13
 11882 020d 11       	 .uleb128 0x11
 11883 020e 01       	 .uleb128 0x1
 11884 020f 12       	 .uleb128 0x12
 11885 0210 06       	 .uleb128 0x6
 11886 0211 40       	 .uleb128 0x40
 11887 0212 18       	 .uleb128 0x18
 11888 0213 9642     	 .uleb128 0x2116
 11889 0215 19       	 .uleb128 0x19
 11890 0216 01       	 .uleb128 0x1
 11891 0217 13       	 .uleb128 0x13
 11892 0218 00       	 .byte 0
 11893 0219 00       	 .byte 0
ARM GAS   			page 295


 11894 021a 27       	 .uleb128 0x27
 11895 021b 05       	 .uleb128 0x5
 11896 021c 00       	 .byte 0
 11897 021d 03       	 .uleb128 0x3
 11898 021e 0E       	 .uleb128 0xe
 11899 021f 3A       	 .uleb128 0x3a
 11900 0220 0B       	 .uleb128 0xb
 11901 0221 3B       	 .uleb128 0x3b
 11902 0222 05       	 .uleb128 0x5
 11903 0223 39       	 .uleb128 0x39
 11904 0224 0B       	 .uleb128 0xb
 11905 0225 49       	 .uleb128 0x49
 11906 0226 13       	 .uleb128 0x13
 11907 0227 02       	 .uleb128 0x2
 11908 0228 18       	 .uleb128 0x18
 11909 0229 00       	 .byte 0
 11910 022a 00       	 .byte 0
 11911 022b 28       	 .uleb128 0x28
 11912 022c 2E       	 .uleb128 0x2e
 11913 022d 01       	 .byte 0x1
 11914 022e 3F       	 .uleb128 0x3f
 11915 022f 19       	 .uleb128 0x19
 11916 0230 03       	 .uleb128 0x3
 11917 0231 0E       	 .uleb128 0xe
 11918 0232 3A       	 .uleb128 0x3a
 11919 0233 0B       	 .uleb128 0xb
 11920 0234 3B       	 .uleb128 0x3b
 11921 0235 05       	 .uleb128 0x5
 11922 0236 39       	 .uleb128 0x39
 11923 0237 0B       	 .uleb128 0xb
 11924 0238 11       	 .uleb128 0x11
 11925 0239 01       	 .uleb128 0x1
 11926 023a 12       	 .uleb128 0x12
 11927 023b 06       	 .uleb128 0x6
 11928 023c 40       	 .uleb128 0x40
 11929 023d 18       	 .uleb128 0x18
 11930 023e 9642     	 .uleb128 0x2116
 11931 0240 19       	 .uleb128 0x19
 11932 0241 01       	 .uleb128 0x1
 11933 0242 13       	 .uleb128 0x13
 11934 0243 00       	 .byte 0
 11935 0244 00       	 .byte 0
 11936 0245 29       	 .uleb128 0x29
 11937 0246 1D       	 .uleb128 0x1d
 11938 0247 01       	 .byte 0x1
 11939 0248 31       	 .uleb128 0x31
 11940 0249 13       	 .uleb128 0x13
 11941 024a 11       	 .uleb128 0x11
 11942 024b 01       	 .uleb128 0x1
 11943 024c 12       	 .uleb128 0x12
 11944 024d 06       	 .uleb128 0x6
 11945 024e 58       	 .uleb128 0x58
 11946 024f 0B       	 .uleb128 0xb
 11947 0250 59       	 .uleb128 0x59
 11948 0251 05       	 .uleb128 0x5
 11949 0252 57       	 .uleb128 0x57
 11950 0253 0B       	 .uleb128 0xb
ARM GAS   			page 296


 11951 0254 01       	 .uleb128 0x1
 11952 0255 13       	 .uleb128 0x13
 11953 0256 00       	 .byte 0
 11954 0257 00       	 .byte 0
 11955 0258 2A       	 .uleb128 0x2a
 11956 0259 34       	 .uleb128 0x34
 11957 025a 00       	 .byte 0
 11958 025b 31       	 .uleb128 0x31
 11959 025c 13       	 .uleb128 0x13
 11960 025d 02       	 .uleb128 0x2
 11961 025e 18       	 .uleb128 0x18
 11962 025f 00       	 .byte 0
 11963 0260 00       	 .byte 0
 11964 0261 2B       	 .uleb128 0x2b
 11965 0262 1D       	 .uleb128 0x1d
 11966 0263 01       	 .byte 0x1
 11967 0264 31       	 .uleb128 0x31
 11968 0265 13       	 .uleb128 0x13
 11969 0266 11       	 .uleb128 0x11
 11970 0267 01       	 .uleb128 0x1
 11971 0268 12       	 .uleb128 0x12
 11972 0269 06       	 .uleb128 0x6
 11973 026a 58       	 .uleb128 0x58
 11974 026b 0B       	 .uleb128 0xb
 11975 026c 59       	 .uleb128 0x59
 11976 026d 05       	 .uleb128 0x5
 11977 026e 57       	 .uleb128 0x57
 11978 026f 0B       	 .uleb128 0xb
 11979 0270 00       	 .byte 0
 11980 0271 00       	 .byte 0
 11981 0272 2C       	 .uleb128 0x2c
 11982 0273 05       	 .uleb128 0x5
 11983 0274 00       	 .byte 0
 11984 0275 31       	 .uleb128 0x31
 11985 0276 13       	 .uleb128 0x13
 11986 0277 02       	 .uleb128 0x2
 11987 0278 18       	 .uleb128 0x18
 11988 0279 00       	 .byte 0
 11989 027a 00       	 .byte 0
 11990 027b 2D       	 .uleb128 0x2d
 11991 027c 2E       	 .uleb128 0x2e
 11992 027d 00       	 .byte 0
 11993 027e 3F       	 .uleb128 0x3f
 11994 027f 19       	 .uleb128 0x19
 11995 0280 03       	 .uleb128 0x3
 11996 0281 0E       	 .uleb128 0xe
 11997 0282 3A       	 .uleb128 0x3a
 11998 0283 0B       	 .uleb128 0xb
 11999 0284 3B       	 .uleb128 0x3b
 12000 0285 05       	 .uleb128 0x5
 12001 0286 39       	 .uleb128 0x39
 12002 0287 0B       	 .uleb128 0xb
 12003 0288 49       	 .uleb128 0x49
 12004 0289 13       	 .uleb128 0x13
 12005 028a 11       	 .uleb128 0x11
 12006 028b 01       	 .uleb128 0x1
 12007 028c 12       	 .uleb128 0x12
ARM GAS   			page 297


 12008 028d 06       	 .uleb128 0x6
 12009 028e 40       	 .uleb128 0x40
 12010 028f 18       	 .uleb128 0x18
 12011 0290 9742     	 .uleb128 0x2117
 12012 0292 19       	 .uleb128 0x19
 12013 0293 00       	 .byte 0
 12014 0294 00       	 .byte 0
 12015 0295 2E       	 .uleb128 0x2e
 12016 0296 2E       	 .uleb128 0x2e
 12017 0297 01       	 .byte 0x1
 12018 0298 3F       	 .uleb128 0x3f
 12019 0299 19       	 .uleb128 0x19
 12020 029a 03       	 .uleb128 0x3
 12021 029b 0E       	 .uleb128 0xe
 12022 029c 3A       	 .uleb128 0x3a
 12023 029d 0B       	 .uleb128 0xb
 12024 029e 3B       	 .uleb128 0x3b
 12025 029f 05       	 .uleb128 0x5
 12026 02a0 39       	 .uleb128 0x39
 12027 02a1 0B       	 .uleb128 0xb
 12028 02a2 49       	 .uleb128 0x49
 12029 02a3 13       	 .uleb128 0x13
 12030 02a4 11       	 .uleb128 0x11
 12031 02a5 01       	 .uleb128 0x1
 12032 02a6 12       	 .uleb128 0x12
 12033 02a7 06       	 .uleb128 0x6
 12034 02a8 40       	 .uleb128 0x40
 12035 02a9 18       	 .uleb128 0x18
 12036 02aa 9742     	 .uleb128 0x2117
 12037 02ac 19       	 .uleb128 0x19
 12038 02ad 01       	 .uleb128 0x1
 12039 02ae 13       	 .uleb128 0x13
 12040 02af 00       	 .byte 0
 12041 02b0 00       	 .byte 0
 12042 02b1 2F       	 .uleb128 0x2f
 12043 02b2 2E       	 .uleb128 0x2e
 12044 02b3 01       	 .byte 0x1
 12045 02b4 03       	 .uleb128 0x3
 12046 02b5 0E       	 .uleb128 0xe
 12047 02b6 3A       	 .uleb128 0x3a
 12048 02b7 0B       	 .uleb128 0xb
 12049 02b8 3B       	 .uleb128 0x3b
 12050 02b9 05       	 .uleb128 0x5
 12051 02ba 39       	 .uleb128 0x39
 12052 02bb 0B       	 .uleb128 0xb
 12053 02bc 11       	 .uleb128 0x11
 12054 02bd 01       	 .uleb128 0x1
 12055 02be 12       	 .uleb128 0x12
 12056 02bf 06       	 .uleb128 0x6
 12057 02c0 40       	 .uleb128 0x40
 12058 02c1 18       	 .uleb128 0x18
 12059 02c2 9742     	 .uleb128 0x2117
 12060 02c4 19       	 .uleb128 0x19
 12061 02c5 01       	 .uleb128 0x1
 12062 02c6 13       	 .uleb128 0x13
 12063 02c7 00       	 .byte 0
 12064 02c8 00       	 .byte 0
ARM GAS   			page 298


 12065 02c9 30       	 .uleb128 0x30
 12066 02ca 2E       	 .uleb128 0x2e
 12067 02cb 01       	 .byte 0x1
 12068 02cc 03       	 .uleb128 0x3
 12069 02cd 0E       	 .uleb128 0xe
 12070 02ce 3A       	 .uleb128 0x3a
 12071 02cf 0B       	 .uleb128 0xb
 12072 02d0 3B       	 .uleb128 0x3b
 12073 02d1 05       	 .uleb128 0x5
 12074 02d2 39       	 .uleb128 0x39
 12075 02d3 0B       	 .uleb128 0xb
 12076 02d4 49       	 .uleb128 0x49
 12077 02d5 13       	 .uleb128 0x13
 12078 02d6 11       	 .uleb128 0x11
 12079 02d7 01       	 .uleb128 0x1
 12080 02d8 12       	 .uleb128 0x12
 12081 02d9 06       	 .uleb128 0x6
 12082 02da 40       	 .uleb128 0x40
 12083 02db 18       	 .uleb128 0x18
 12084 02dc 9742     	 .uleb128 0x2117
 12085 02de 19       	 .uleb128 0x19
 12086 02df 01       	 .uleb128 0x1
 12087 02e0 13       	 .uleb128 0x13
 12088 02e1 00       	 .byte 0
 12089 02e2 00       	 .byte 0
 12090 02e3 31       	 .uleb128 0x31
 12091 02e4 2E       	 .uleb128 0x2e
 12092 02e5 01       	 .byte 0x1
 12093 02e6 03       	 .uleb128 0x3
 12094 02e7 0E       	 .uleb128 0xe
 12095 02e8 3A       	 .uleb128 0x3a
 12096 02e9 0B       	 .uleb128 0xb
 12097 02ea 3B       	 .uleb128 0x3b
 12098 02eb 05       	 .uleb128 0x5
 12099 02ec 39       	 .uleb128 0x39
 12100 02ed 0B       	 .uleb128 0xb
 12101 02ee 49       	 .uleb128 0x49
 12102 02ef 13       	 .uleb128 0x13
 12103 02f0 11       	 .uleb128 0x11
 12104 02f1 01       	 .uleb128 0x1
 12105 02f2 12       	 .uleb128 0x12
 12106 02f3 06       	 .uleb128 0x6
 12107 02f4 40       	 .uleb128 0x40
 12108 02f5 18       	 .uleb128 0x18
 12109 02f6 9642     	 .uleb128 0x2116
 12110 02f8 19       	 .uleb128 0x19
 12111 02f9 01       	 .uleb128 0x1
 12112 02fa 13       	 .uleb128 0x13
 12113 02fb 00       	 .byte 0
 12114 02fc 00       	 .byte 0
 12115 02fd 32       	 .uleb128 0x32
 12116 02fe 0B       	 .uleb128 0xb
 12117 02ff 01       	 .byte 0x1
 12118 0300 11       	 .uleb128 0x11
 12119 0301 01       	 .uleb128 0x1
 12120 0302 12       	 .uleb128 0x12
 12121 0303 06       	 .uleb128 0x6
ARM GAS   			page 299


 12122 0304 01       	 .uleb128 0x1
 12123 0305 13       	 .uleb128 0x13
 12124 0306 00       	 .byte 0
 12125 0307 00       	 .byte 0
 12126 0308 33       	 .uleb128 0x33
 12127 0309 0B       	 .uleb128 0xb
 12128 030a 01       	 .byte 0x1
 12129 030b 11       	 .uleb128 0x11
 12130 030c 01       	 .uleb128 0x1
 12131 030d 12       	 .uleb128 0x12
 12132 030e 06       	 .uleb128 0x6
 12133 030f 00       	 .byte 0
 12134 0310 00       	 .byte 0
 12135 0311 34       	 .uleb128 0x34
 12136 0312 2E       	 .uleb128 0x2e
 12137 0313 01       	 .byte 0x1
 12138 0314 03       	 .uleb128 0x3
 12139 0315 0E       	 .uleb128 0xe
 12140 0316 3A       	 .uleb128 0x3a
 12141 0317 0B       	 .uleb128 0xb
 12142 0318 3B       	 .uleb128 0x3b
 12143 0319 05       	 .uleb128 0x5
 12144 031a 39       	 .uleb128 0x39
 12145 031b 0B       	 .uleb128 0xb
 12146 031c 11       	 .uleb128 0x11
 12147 031d 01       	 .uleb128 0x1
 12148 031e 12       	 .uleb128 0x12
 12149 031f 06       	 .uleb128 0x6
 12150 0320 40       	 .uleb128 0x40
 12151 0321 18       	 .uleb128 0x18
 12152 0322 9642     	 .uleb128 0x2116
 12153 0324 19       	 .uleb128 0x19
 12154 0325 01       	 .uleb128 0x1
 12155 0326 13       	 .uleb128 0x13
 12156 0327 00       	 .byte 0
 12157 0328 00       	 .byte 0
 12158 0329 35       	 .uleb128 0x35
 12159 032a 2E       	 .uleb128 0x2e
 12160 032b 00       	 .byte 0
 12161 032c 03       	 .uleb128 0x3
 12162 032d 0E       	 .uleb128 0xe
 12163 032e 3A       	 .uleb128 0x3a
 12164 032f 0B       	 .uleb128 0xb
 12165 0330 3B       	 .uleb128 0x3b
 12166 0331 05       	 .uleb128 0x5
 12167 0332 39       	 .uleb128 0x39
 12168 0333 0B       	 .uleb128 0xb
 12169 0334 11       	 .uleb128 0x11
 12170 0335 01       	 .uleb128 0x1
 12171 0336 12       	 .uleb128 0x12
 12172 0337 06       	 .uleb128 0x6
 12173 0338 40       	 .uleb128 0x40
 12174 0339 18       	 .uleb128 0x18
 12175 033a 9742     	 .uleb128 0x2117
 12176 033c 19       	 .uleb128 0x19
 12177 033d 00       	 .byte 0
 12178 033e 00       	 .byte 0
ARM GAS   			page 300


 12179 033f 36       	 .uleb128 0x36
 12180 0340 34       	 .uleb128 0x34
 12181 0341 00       	 .byte 0
 12182 0342 03       	 .uleb128 0x3
 12183 0343 08       	 .uleb128 0x8
 12184 0344 3A       	 .uleb128 0x3a
 12185 0345 0B       	 .uleb128 0xb
 12186 0346 3B       	 .uleb128 0x3b
 12187 0347 05       	 .uleb128 0x5
 12188 0348 39       	 .uleb128 0x39
 12189 0349 0B       	 .uleb128 0xb
 12190 034a 49       	 .uleb128 0x49
 12191 034b 13       	 .uleb128 0x13
 12192 034c 02       	 .uleb128 0x2
 12193 034d 18       	 .uleb128 0x18
 12194 034e 00       	 .byte 0
 12195 034f 00       	 .byte 0
 12196 0350 37       	 .uleb128 0x37
 12197 0351 2E       	 .uleb128 0x2e
 12198 0352 01       	 .byte 0x1
 12199 0353 3F       	 .uleb128 0x3f
 12200 0354 19       	 .uleb128 0x19
 12201 0355 03       	 .uleb128 0x3
 12202 0356 0E       	 .uleb128 0xe
 12203 0357 3A       	 .uleb128 0x3a
 12204 0358 0B       	 .uleb128 0xb
 12205 0359 3B       	 .uleb128 0x3b
 12206 035a 05       	 .uleb128 0x5
 12207 035b 39       	 .uleb128 0x39
 12208 035c 0B       	 .uleb128 0xb
 12209 035d 11       	 .uleb128 0x11
 12210 035e 01       	 .uleb128 0x1
 12211 035f 12       	 .uleb128 0x12
 12212 0360 06       	 .uleb128 0x6
 12213 0361 40       	 .uleb128 0x40
 12214 0362 18       	 .uleb128 0x18
 12215 0363 9742     	 .uleb128 0x2117
 12216 0365 19       	 .uleb128 0x19
 12217 0366 01       	 .uleb128 0x1
 12218 0367 13       	 .uleb128 0x13
 12219 0368 00       	 .byte 0
 12220 0369 00       	 .byte 0
 12221 036a 38       	 .uleb128 0x38
 12222 036b 2E       	 .uleb128 0x2e
 12223 036c 00       	 .byte 0
 12224 036d 3F       	 .uleb128 0x3f
 12225 036e 19       	 .uleb128 0x19
 12226 036f 03       	 .uleb128 0x3
 12227 0370 0E       	 .uleb128 0xe
 12228 0371 3A       	 .uleb128 0x3a
 12229 0372 0B       	 .uleb128 0xb
 12230 0373 3B       	 .uleb128 0x3b
 12231 0374 05       	 .uleb128 0x5
 12232 0375 39       	 .uleb128 0x39
 12233 0376 0B       	 .uleb128 0xb
 12234 0377 11       	 .uleb128 0x11
 12235 0378 01       	 .uleb128 0x1
ARM GAS   			page 301


 12236 0379 12       	 .uleb128 0x12
 12237 037a 06       	 .uleb128 0x6
 12238 037b 40       	 .uleb128 0x40
 12239 037c 18       	 .uleb128 0x18
 12240 037d 9742     	 .uleb128 0x2117
 12241 037f 19       	 .uleb128 0x19
 12242 0380 00       	 .byte 0
 12243 0381 00       	 .byte 0
 12244 0382 39       	 .uleb128 0x39
 12245 0383 05       	 .uleb128 0x5
 12246 0384 00       	 .byte 0
 12247 0385 03       	 .uleb128 0x3
 12248 0386 0E       	 .uleb128 0xe
 12249 0387 3A       	 .uleb128 0x3a
 12250 0388 0B       	 .uleb128 0xb
 12251 0389 3B       	 .uleb128 0x3b
 12252 038a 05       	 .uleb128 0x5
 12253 038b 39       	 .uleb128 0x39
 12254 038c 05       	 .uleb128 0x5
 12255 038d 49       	 .uleb128 0x49
 12256 038e 13       	 .uleb128 0x13
 12257 038f 02       	 .uleb128 0x2
 12258 0390 18       	 .uleb128 0x18
 12259 0391 00       	 .byte 0
 12260 0392 00       	 .byte 0
 12261 0393 3A       	 .uleb128 0x3a
 12262 0394 2E       	 .uleb128 0x2e
 12263 0395 01       	 .byte 0x1
 12264 0396 03       	 .uleb128 0x3
 12265 0397 0E       	 .uleb128 0xe
 12266 0398 3A       	 .uleb128 0x3a
 12267 0399 0B       	 .uleb128 0xb
 12268 039a 3B       	 .uleb128 0x3b
 12269 039b 0B       	 .uleb128 0xb
 12270 039c 39       	 .uleb128 0x39
 12271 039d 0B       	 .uleb128 0xb
 12272 039e 20       	 .uleb128 0x20
 12273 039f 0B       	 .uleb128 0xb
 12274 03a0 01       	 .uleb128 0x1
 12275 03a1 13       	 .uleb128 0x13
 12276 03a2 00       	 .byte 0
 12277 03a3 00       	 .byte 0
 12278 03a4 3B       	 .uleb128 0x3b
 12279 03a5 05       	 .uleb128 0x5
 12280 03a6 00       	 .byte 0
 12281 03a7 03       	 .uleb128 0x3
 12282 03a8 0E       	 .uleb128 0xe
 12283 03a9 3A       	 .uleb128 0x3a
 12284 03aa 0B       	 .uleb128 0xb
 12285 03ab 3B       	 .uleb128 0x3b
 12286 03ac 0B       	 .uleb128 0xb
 12287 03ad 39       	 .uleb128 0x39
 12288 03ae 0B       	 .uleb128 0xb
 12289 03af 49       	 .uleb128 0x49
 12290 03b0 13       	 .uleb128 0x13
 12291 03b1 00       	 .byte 0
 12292 03b2 00       	 .byte 0
ARM GAS   			page 302


 12293 03b3 3C       	 .uleb128 0x3c
 12294 03b4 2E       	 .uleb128 0x2e
 12295 03b5 01       	 .byte 0x1
 12296 03b6 03       	 .uleb128 0x3
 12297 03b7 0E       	 .uleb128 0xe
 12298 03b8 3A       	 .uleb128 0x3a
 12299 03b9 0B       	 .uleb128 0xb
 12300 03ba 3B       	 .uleb128 0x3b
 12301 03bb 0B       	 .uleb128 0xb
 12302 03bc 39       	 .uleb128 0x39
 12303 03bd 0B       	 .uleb128 0xb
 12304 03be 49       	 .uleb128 0x49
 12305 03bf 13       	 .uleb128 0x13
 12306 03c0 20       	 .uleb128 0x20
 12307 03c1 0B       	 .uleb128 0xb
 12308 03c2 01       	 .uleb128 0x1
 12309 03c3 13       	 .uleb128 0x13
 12310 03c4 00       	 .byte 0
 12311 03c5 00       	 .byte 0
 12312 03c6 3D       	 .uleb128 0x3d
 12313 03c7 34       	 .uleb128 0x34
 12314 03c8 00       	 .byte 0
 12315 03c9 03       	 .uleb128 0x3
 12316 03ca 0E       	 .uleb128 0xe
 12317 03cb 3A       	 .uleb128 0x3a
 12318 03cc 0B       	 .uleb128 0xb
 12319 03cd 3B       	 .uleb128 0x3b
 12320 03ce 0B       	 .uleb128 0xb
 12321 03cf 39       	 .uleb128 0x39
 12322 03d0 0B       	 .uleb128 0xb
 12323 03d1 49       	 .uleb128 0x49
 12324 03d2 13       	 .uleb128 0x13
 12325 03d3 00       	 .byte 0
 12326 03d4 00       	 .byte 0
 12327 03d5 3E       	 .uleb128 0x3e
 12328 03d6 2E       	 .uleb128 0x2e
 12329 03d7 01       	 .byte 0x1
 12330 03d8 03       	 .uleb128 0x3
 12331 03d9 0E       	 .uleb128 0xe
 12332 03da 3A       	 .uleb128 0x3a
 12333 03db 0B       	 .uleb128 0xb
 12334 03dc 3B       	 .uleb128 0x3b
 12335 03dd 0B       	 .uleb128 0xb
 12336 03de 39       	 .uleb128 0x39
 12337 03df 0B       	 .uleb128 0xb
 12338 03e0 49       	 .uleb128 0x49
 12339 03e1 13       	 .uleb128 0x13
 12340 03e2 20       	 .uleb128 0x20
 12341 03e3 0B       	 .uleb128 0xb
 12342 03e4 00       	 .byte 0
 12343 03e5 00       	 .byte 0
 12344 03e6 00       	 .byte 0
 12345              	 .section .debug_aranges,"",%progbits
 12346 0000 9C010000 	 .4byte 0x19c
 12347 0004 0200     	 .2byte 0x2
 12348 0006 00000000 	 .4byte .Ldebug_info0
 12349 000a 04       	 .byte 0x4
ARM GAS   			page 303


 12350 000b 00       	 .byte 0
 12351 000c 0000     	 .2byte 0
 12352 000e 0000     	 .2byte 0
 12353 0010 00000000 	 .4byte .LFB11
 12354 0014 E8010000 	 .4byte .LFE11-.LFB11
 12355 0018 00000000 	 .4byte .LFB12
 12356 001c BC000000 	 .4byte .LFE12-.LFB12
 12357 0020 00000000 	 .4byte .LFB13
 12358 0024 34000000 	 .4byte .LFE13-.LFB13
 12359 0028 00000000 	 .4byte .LFB14
 12360 002c 58000000 	 .4byte .LFE14-.LFB14
 12361 0030 00000000 	 .4byte .LFB15
 12362 0034 88010000 	 .4byte .LFE15-.LFB15
 12363 0038 00000000 	 .4byte .LFB16
 12364 003c 50010000 	 .4byte .LFE16-.LFB16
 12365 0040 00000000 	 .4byte .LFB17
 12366 0044 78000000 	 .4byte .LFE17-.LFB17
 12367 0048 00000000 	 .4byte .LFB18
 12368 004c DC000000 	 .4byte .LFE18-.LFB18
 12369 0050 00000000 	 .4byte .LFB19
 12370 0054 04010000 	 .4byte .LFE19-.LFB19
 12371 0058 00000000 	 .4byte .LFB20
 12372 005c 98000000 	 .4byte .LFE20-.LFB20
 12373 0060 00000000 	 .4byte .LFB21
 12374 0064 30000000 	 .4byte .LFE21-.LFB21
 12375 0068 00000000 	 .4byte .LFB22
 12376 006c 1C000000 	 .4byte .LFE22-.LFB22
 12377 0070 00000000 	 .4byte .LFB23
 12378 0074 7C010000 	 .4byte .LFE23-.LFB23
 12379 0078 00000000 	 .4byte .LFB24
 12380 007c 20000000 	 .4byte .LFE24-.LFB24
 12381 0080 00000000 	 .4byte .LFB25
 12382 0084 24000000 	 .4byte .LFE25-.LFB25
 12383 0088 00000000 	 .4byte .LFB26
 12384 008c 18000000 	 .4byte .LFE26-.LFB26
 12385 0090 00000000 	 .4byte .LFB27
 12386 0094 E0000000 	 .4byte .LFE27-.LFB27
 12387 0098 00000000 	 .4byte .LFB28
 12388 009c C4010000 	 .4byte .LFE28-.LFB28
 12389 00a0 00000000 	 .4byte .LFB29
 12390 00a4 C0000000 	 .4byte .LFE29-.LFB29
 12391 00a8 00000000 	 .4byte .LFB30
 12392 00ac A8000000 	 .4byte .LFE30-.LFB30
 12393 00b0 00000000 	 .4byte .LFB31
 12394 00b4 E4000000 	 .4byte .LFE31-.LFB31
 12395 00b8 00000000 	 .4byte .LFB32
 12396 00bc DC000000 	 .4byte .LFE32-.LFB32
 12397 00c0 00000000 	 .4byte .LFB33
 12398 00c4 E4000000 	 .4byte .LFE33-.LFB33
 12399 00c8 00000000 	 .4byte .LFB34
 12400 00cc 48000000 	 .4byte .LFE34-.LFB34
 12401 00d0 00000000 	 .4byte .LFB35
 12402 00d4 CC000000 	 .4byte .LFE35-.LFB35
 12403 00d8 00000000 	 .4byte .LFB36
 12404 00dc 18000000 	 .4byte .LFE36-.LFB36
 12405 00e0 00000000 	 .4byte .LFB37
 12406 00e4 2C000000 	 .4byte .LFE37-.LFB37
ARM GAS   			page 304


 12407 00e8 00000000 	 .4byte .LFB38
 12408 00ec 26000000 	 .4byte .LFE38-.LFB38
 12409 00f0 00000000 	 .4byte .LFB39
 12410 00f4 30000000 	 .4byte .LFE39-.LFB39
 12411 00f8 00000000 	 .4byte .LFB40
 12412 00fc A6000000 	 .4byte .LFE40-.LFB40
 12413 0100 00000000 	 .4byte .LFB41
 12414 0104 74000000 	 .4byte .LFE41-.LFB41
 12415 0108 00000000 	 .4byte .LFB42
 12416 010c 0E000000 	 .4byte .LFE42-.LFB42
 12417 0110 00000000 	 .4byte .LFB43
 12418 0114 80000000 	 .4byte .LFE43-.LFB43
 12419 0118 00000000 	 .4byte .LFB44
 12420 011c 6E000000 	 .4byte .LFE44-.LFB44
 12421 0120 00000000 	 .4byte .LFB45
 12422 0124 22010000 	 .4byte .LFE45-.LFB45
 12423 0128 00000000 	 .4byte .LFB46
 12424 012c 38000000 	 .4byte .LFE46-.LFB46
 12425 0130 00000000 	 .4byte .LFB47
 12426 0134 54000000 	 .4byte .LFE47-.LFB47
 12427 0138 00000000 	 .4byte .LFB48
 12428 013c 20000000 	 .4byte .LFE48-.LFB48
 12429 0140 00000000 	 .4byte .LFB49
 12430 0144 50000000 	 .4byte .LFE49-.LFB49
 12431 0148 00000000 	 .4byte .LFB50
 12432 014c 04010000 	 .4byte .LFE50-.LFB50
 12433 0150 00000000 	 .4byte .LFB51
 12434 0154 20010000 	 .4byte .LFE51-.LFB51
 12435 0158 00000000 	 .4byte .LFB52
 12436 015c 30000000 	 .4byte .LFE52-.LFB52
 12437 0160 00000000 	 .4byte .LFB53
 12438 0164 34000000 	 .4byte .LFE53-.LFB53
 12439 0168 00000000 	 .4byte .LFB54
 12440 016c FC000000 	 .4byte .LFE54-.LFB54
 12441 0170 00000000 	 .4byte .LFB55
 12442 0174 28010000 	 .4byte .LFE55-.LFB55
 12443 0178 00000000 	 .4byte .LFB56
 12444 017c 54010000 	 .4byte .LFE56-.LFB56
 12445 0180 00000000 	 .4byte .LFB57
 12446 0184 9C010000 	 .4byte .LFE57-.LFB57
 12447 0188 00000000 	 .4byte .LFB58
 12448 018c 30010000 	 .4byte .LFE58-.LFB58
 12449 0190 00000000 	 .4byte .LFB59
 12450 0194 5C000000 	 .4byte .LFE59-.LFB59
 12451 0198 00000000 	 .4byte 0
 12452 019c 00000000 	 .4byte 0
 12453              	 .section .debug_ranges,"",%progbits
 12454              	.Ldebug_ranges0:
 12455 0000 00000000 	 .4byte .LFB11
 12456 0004 E8010000 	 .4byte .LFE11
 12457 0008 00000000 	 .4byte .LFB12
 12458 000c BC000000 	 .4byte .LFE12
 12459 0010 00000000 	 .4byte .LFB13
 12460 0014 34000000 	 .4byte .LFE13
 12461 0018 00000000 	 .4byte .LFB14
 12462 001c 58000000 	 .4byte .LFE14
 12463 0020 00000000 	 .4byte .LFB15
ARM GAS   			page 305


 12464 0024 88010000 	 .4byte .LFE15
 12465 0028 00000000 	 .4byte .LFB16
 12466 002c 50010000 	 .4byte .LFE16
 12467 0030 00000000 	 .4byte .LFB17
 12468 0034 78000000 	 .4byte .LFE17
 12469 0038 00000000 	 .4byte .LFB18
 12470 003c DC000000 	 .4byte .LFE18
 12471 0040 00000000 	 .4byte .LFB19
 12472 0044 04010000 	 .4byte .LFE19
 12473 0048 00000000 	 .4byte .LFB20
 12474 004c 98000000 	 .4byte .LFE20
 12475 0050 00000000 	 .4byte .LFB21
 12476 0054 30000000 	 .4byte .LFE21
 12477 0058 00000000 	 .4byte .LFB22
 12478 005c 1C000000 	 .4byte .LFE22
 12479 0060 00000000 	 .4byte .LFB23
 12480 0064 7C010000 	 .4byte .LFE23
 12481 0068 00000000 	 .4byte .LFB24
 12482 006c 20000000 	 .4byte .LFE24
 12483 0070 00000000 	 .4byte .LFB25
 12484 0074 24000000 	 .4byte .LFE25
 12485 0078 00000000 	 .4byte .LFB26
 12486 007c 18000000 	 .4byte .LFE26
 12487 0080 00000000 	 .4byte .LFB27
 12488 0084 E0000000 	 .4byte .LFE27
 12489 0088 00000000 	 .4byte .LFB28
 12490 008c C4010000 	 .4byte .LFE28
 12491 0090 00000000 	 .4byte .LFB29
 12492 0094 C0000000 	 .4byte .LFE29
 12493 0098 00000000 	 .4byte .LFB30
 12494 009c A8000000 	 .4byte .LFE30
 12495 00a0 00000000 	 .4byte .LFB31
 12496 00a4 E4000000 	 .4byte .LFE31
 12497 00a8 00000000 	 .4byte .LFB32
 12498 00ac DC000000 	 .4byte .LFE32
 12499 00b0 00000000 	 .4byte .LFB33
 12500 00b4 E4000000 	 .4byte .LFE33
 12501 00b8 00000000 	 .4byte .LFB34
 12502 00bc 48000000 	 .4byte .LFE34
 12503 00c0 00000000 	 .4byte .LFB35
 12504 00c4 CC000000 	 .4byte .LFE35
 12505 00c8 00000000 	 .4byte .LFB36
 12506 00cc 18000000 	 .4byte .LFE36
 12507 00d0 00000000 	 .4byte .LFB37
 12508 00d4 2C000000 	 .4byte .LFE37
 12509 00d8 00000000 	 .4byte .LFB38
 12510 00dc 26000000 	 .4byte .LFE38
 12511 00e0 00000000 	 .4byte .LFB39
 12512 00e4 30000000 	 .4byte .LFE39
 12513 00e8 00000000 	 .4byte .LFB40
 12514 00ec A6000000 	 .4byte .LFE40
 12515 00f0 00000000 	 .4byte .LFB41
 12516 00f4 74000000 	 .4byte .LFE41
 12517 00f8 00000000 	 .4byte .LFB42
 12518 00fc 0E000000 	 .4byte .LFE42
 12519 0100 00000000 	 .4byte .LFB43
 12520 0104 80000000 	 .4byte .LFE43
ARM GAS   			page 306


 12521 0108 00000000 	 .4byte .LFB44
 12522 010c 6E000000 	 .4byte .LFE44
 12523 0110 00000000 	 .4byte .LFB45
 12524 0114 22010000 	 .4byte .LFE45
 12525 0118 00000000 	 .4byte .LFB46
 12526 011c 38000000 	 .4byte .LFE46
 12527 0120 00000000 	 .4byte .LFB47
 12528 0124 54000000 	 .4byte .LFE47
 12529 0128 00000000 	 .4byte .LFB48
 12530 012c 20000000 	 .4byte .LFE48
 12531 0130 00000000 	 .4byte .LFB49
 12532 0134 50000000 	 .4byte .LFE49
 12533 0138 00000000 	 .4byte .LFB50
 12534 013c 04010000 	 .4byte .LFE50
 12535 0140 00000000 	 .4byte .LFB51
 12536 0144 20010000 	 .4byte .LFE51
 12537 0148 00000000 	 .4byte .LFB52
 12538 014c 30000000 	 .4byte .LFE52
 12539 0150 00000000 	 .4byte .LFB53
 12540 0154 34000000 	 .4byte .LFE53
 12541 0158 00000000 	 .4byte .LFB54
 12542 015c FC000000 	 .4byte .LFE54
 12543 0160 00000000 	 .4byte .LFB55
 12544 0164 28010000 	 .4byte .LFE55
 12545 0168 00000000 	 .4byte .LFB56
 12546 016c 54010000 	 .4byte .LFE56
 12547 0170 00000000 	 .4byte .LFB57
 12548 0174 9C010000 	 .4byte .LFE57
 12549 0178 00000000 	 .4byte .LFB58
 12550 017c 30010000 	 .4byte .LFE58
 12551 0180 00000000 	 .4byte .LFB59
 12552 0184 5C000000 	 .4byte .LFE59
 12553 0188 00000000 	 .4byte 0
 12554 018c 00000000 	 .4byte 0
 12555              	 .section .debug_line,"",%progbits
 12556              	.Ldebug_line0:
 12557 0000 E1160000 	 .section .debug_str,"MS",%progbits,1
 12557      03003504 
 12557      00000201 
 12557      FB0E0D00 
 12557      01010101 
 12558              	.LASF37:
 12559 0000 67657465 	 .ascii "getenv\000"
 12559      6E7600
 12560              	.LASF106:
 12561 0007 70635461 	 .ascii "pcTaskName\000"
 12561      736B4E61 
 12561      6D6500
 12562              	.LASF76:
 12563 0012 75784E75 	 .ascii "uxNumberOfItems\000"
 12563      6D626572 
 12563      4F664974 
 12563      656D7300 
 12564              	.LASF123:
 12565 0022 75785072 	 .ascii "uxPriority\000"
 12565      696F7269 
 12565      747900
ARM GAS   			page 307


 12566              	.LASF268:
 12567 002d 72616E64 	 .ascii "rand\000"
 12567      00
 12568              	.LASF48:
 12569 0032 73797374 	 .ascii "system\000"
 12569      656D00
 12570              	.LASF188:
 12571 0039 7078436F 	 .ascii "pxConstList\000"
 12571      6E73744C 
 12571      69737400 
 12572              	.LASF84:
 12573 0045 65537573 	 .ascii "eSuspended\000"
 12573      70656E64 
 12573      656400
 12574              	.LASF6:
 12575 0050 5F5A5374 	 .ascii "_ZSt3divll\000"
 12575      33646976 
 12575      6C6C00
 12576              	.LASF163:
 12577 005b 756C4269 	 .ascii "ulBitsToClearOnExit\000"
 12577      7473546F 
 12577      436C6561 
 12577      724F6E45 
 12577      78697400 
 12578              	.LASF226:
 12579 006f 75785461 	 .ascii "uxTaskGetNumberOfTasks\000"
 12579      736B4765 
 12579      744E756D 
 12579      6265724F 
 12579      66546173 
 12580              	.LASF176:
 12581 0086 78546173 	 .ascii "xTaskGetSchedulerState\000"
 12581      6B476574 
 12581      53636865 
 12581      64756C65 
 12581      72537461 
 12582              	.LASF121:
 12583 009d 7847656E 	 .ascii "xGenericListItem\000"
 12583      65726963 
 12583      4C697374 
 12583      4974656D 
 12583      00
 12584              	.LASF152:
 12585 00ae 70784869 	 .ascii "pxHigherPriorityTaskWoken\000"
 12585      67686572 
 12585      5072696F 
 12585      72697479 
 12585      5461736B 
 12586              	.LASF89:
 12587 00c8 654E6F41 	 .ascii "eNoAction\000"
 12587      6374696F 
 12587      6E00
 12588              	.LASF141:
 12589 00d2 7578546F 	 .ascii "uxTopReadyPriority\000"
 12589      70526561 
 12589      64795072 
 12589      696F7269 
ARM GAS   			page 308


 12589      747900
 12590              	.LASF39:
 12591 00e5 6D626C65 	 .ascii "mblen\000"
 12591      6E00
 12592              	.LASF8:
 12593 00eb 756E7369 	 .ascii "unsigned int\000"
 12593      676E6564 
 12593      20696E74 
 12593      00
 12594              	.LASF213:
 12595 00f8 70784576 	 .ascii "pxEventList\000"
 12595      656E744C 
 12595      69737400 
 12596              	.LASF142:
 12597 0104 78536368 	 .ascii "xSchedulerRunning\000"
 12597      6564756C 
 12597      65725275 
 12597      6E6E696E 
 12597      6700
 12598              	.LASF77:
 12599 0116 7078496E 	 .ascii "pxIndex\000"
 12599      64657800 
 12600              	.LASF175:
 12601 011e 76546173 	 .ascii "vTaskPriorityInherit\000"
 12601      6B507269 
 12601      6F726974 
 12601      79496E68 
 12601      65726974 
 12602              	.LASF266:
 12603 0133 5F5F676E 	 .ascii "__gnu_cxx\000"
 12603      755F6378 
 12603      7800
 12604              	.LASF95:
 12605 013d 7854494D 	 .ascii "xTIME_OUT\000"
 12605      455F4F55 
 12605      5400
 12606              	.LASF72:
 12607 0147 784C4953 	 .ascii "xLIST_ITEM\000"
 12607      545F4954 
 12607      454D00
 12608              	.LASF132:
 12609 0152 70785265 	 .ascii "pxReadyTasksLists\000"
 12609      61647954 
 12609      61736B73 
 12609      4C697374 
 12609      7300
 12610              	.LASF41:
 12611 0164 77636861 	 .ascii "wchar_t\000"
 12611      725F7400 
 12612              	.LASF223:
 12613 016c 70756C54 	 .ascii "pulTotalRunTime\000"
 12613      6F74616C 
 12613      52756E54 
 12613      696D6500 
 12614              	.LASF117:
 12615 017c 654E6F74 	 .ascii "eNotified\000"
 12615      69666965 
ARM GAS   			page 309


 12615      6400
 12616              	.LASF154:
 12617 0186 75785361 	 .ascii "uxSavedInterruptStatus\000"
 12617      76656449 
 12617      6E746572 
 12617      72757074 
 12617      53746174 
 12618              	.LASF7:
 12619 019d 5F5A4E39 	 .ascii "_ZN9__gnu_cxx3divExx\000"
 12619      5F5F676E 
 12619      755F6378 
 12619      78336469 
 12619      76457878 
 12620              	.LASF156:
 12621 01b2 78546173 	 .ascii "xTaskGenericNotifyFromISR\000"
 12621      6B47656E 
 12621      65726963 
 12621      4E6F7469 
 12621      66794672 
 12622              	.LASF178:
 12623 01cc 70756353 	 .ascii "pucStackByte\000"
 12623      7461636B 
 12623      42797465 
 12623      00
 12624              	.LASF54:
 12625 01d9 73747274 	 .ascii "strtoull\000"
 12625      6F756C6C 
 12625      00
 12626              	.LASF202:
 12627 01e2 75784861 	 .ascii "uxHandle\000"
 12627      6E646C65 
 12627      00
 12628              	.LASF133:
 12629 01eb 7844656C 	 .ascii "xDelayedTaskList1\000"
 12629      61796564 
 12629      5461736B 
 12629      4C697374 
 12629      3100
 12630              	.LASF134:
 12631 01fd 7844656C 	 .ascii "xDelayedTaskList2\000"
 12631      61796564 
 12631      5461736B 
 12631      4C697374 
 12631      3200
 12632              	.LASF96:
 12633 020f 784F7665 	 .ascii "xOverflowCount\000"
 12633      72666C6F 
 12633      77436F75 
 12633      6E7400
 12634              	.LASF257:
 12635 021e 76506F72 	 .ascii "vPortSetBASEPRI\000"
 12635      74536574 
 12635      42415345 
 12635      50524900 
 12636              	.LASF265:
 12637 022e 433A5C55 	 .ascii "C:\\Users\\niels\\DOCUME~1\\ELEKTR~1\\JAAR2~1\\ECS\\"
 12637      73657273 
ARM GAS   			page 310


 12637      5C6E6965 
 12637      6C735C44 
 12637      4F43554D 
 12638 025b 4543534C 	 .ascii "ECSL\\software\\STM32\\PRACTI~1\\CLion\\Debug\\Free"
 12638      5C736F66 
 12638      74776172 
 12638      655C5354 
 12638      4D33325C 
 12639 0288 52544F53 	 .ascii "RTOS\000"
 12639      00
 12640              	.LASF107:
 12641 028d 78546173 	 .ascii "xTaskNumber\000"
 12641      6B4E756D 
 12641      62657200 
 12642              	.LASF125:
 12643 0299 75785443 	 .ascii "uxTCBNumber\000"
 12643      424E756D 
 12643      62657200 
 12644              	.LASF102:
 12645 02a5 756C5061 	 .ascii "ulParameters\000"
 12645      72616D65 
 12645      74657273 
 12645      00
 12646              	.LASF189:
 12647 02b2 70727641 	 .ascii "prvAllocateTCBAndStack\000"
 12647      6C6C6F63 
 12647      61746554 
 12647      4342416E 
 12647      64537461 
 12648              	.LASF237:
 12649 02c9 78546173 	 .ascii "xTaskToResume\000"
 12649      6B546F52 
 12649      6573756D 
 12649      6500
 12650              	.LASF171:
 12651 02d7 75785265 	 .ascii "uxReturn\000"
 12651      7475726E 
 12651      00
 12652              	.LASF129:
 12653 02e0 654E6F74 	 .ascii "eNotifyState\000"
 12653      69667953 
 12653      74617465 
 12653      00
 12654              	.LASF2:
 12655 02ed 5F5A5374 	 .ascii "_ZSt3absd\000"
 12655      33616273 
 12655      6400
 12656              	.LASF0:
 12657 02f7 5F5A5374 	 .ascii "_ZSt3abse\000"
 12657      33616273 
 12657      6500
 12658              	.LASF1:
 12659 0301 5F5A5374 	 .ascii "_ZSt3absf\000"
 12659      33616273 
 12659      6600
 12660              	.LASF4:
 12661 030b 5F5A5374 	 .ascii "_ZSt3absl\000"
ARM GAS   			page 311


 12661      33616273 
 12661      6C00
 12662              	.LASF57:
 12663 0315 73747274 	 .ascii "strtold\000"
 12663      6F6C6400 
 12664              	.LASF130:
 12665 031d 74736B54 	 .ascii "tskTCB\000"
 12665      434200
 12666              	.LASF53:
 12667 0324 73747274 	 .ascii "strtoll\000"
 12667      6F6C6C00 
 12668              	.LASF60:
 12669 032c 75696E74 	 .ascii "uint32_t\000"
 12669      33325F74 
 12669      00
 12670              	.LASF3:
 12671 0335 5F5A5374 	 .ascii "_ZSt3absx\000"
 12671      33616273 
 12671      7800
 12672              	.LASF238:
 12673 033f 78596965 	 .ascii "xYieldRequired\000"
 12673      6C645265 
 12673      71756972 
 12673      656400
 12674              	.LASF42:
 12675 034e 6D62746F 	 .ascii "mbtowc\000"
 12675      776300
 12676              	.LASF255:
 12677 0355 756C4F72 	 .ascii "ulOriginalBASEPRI\000"
 12677      6967696E 
 12677      616C4241 
 12677      53455052 
 12677      4900
 12678              	.LASF160:
 12679 0367 78546173 	 .ascii "xTaskGenericNotify\000"
 12679      6B47656E 
 12679      65726963 
 12679      4E6F7469 
 12679      667900
 12680              	.LASF56:
 12681 037a 666C6F61 	 .ascii "float\000"
 12681      7400
 12682              	.LASF211:
 12683 0380 7078556E 	 .ascii "pxUnblockedTCB\000"
 12683      626C6F63 
 12683      6B656454 
 12683      434200
 12684              	.LASF190:
 12685 038f 75735374 	 .ascii "usStackDepth\000"
 12685      61636B44 
 12685      65707468 
 12685      00
 12686              	.LASF168:
 12687 039c 78436C65 	 .ascii "xClearCountOnExit\000"
 12687      6172436F 
 12687      756E744F 
 12687      6E457869 
ARM GAS   			page 312


 12687      7400
 12688              	.LASF92:
 12689 03ae 65536574 	 .ascii "eSetValueWithOverwrite\000"
 12689      56616C75 
 12689      65576974 
 12689      684F7665 
 12689      72777269 
 12690              	.LASF21:
 12691 03c5 6C6F6E67 	 .ascii "long long unsigned int\000"
 12691      206C6F6E 
 12691      6720756E 
 12691      7369676E 
 12691      65642069 
 12692              	.LASF181:
 12693 03dc 7072764C 	 .ascii "prvListTaskWithinSingleList\000"
 12693      69737454 
 12693      61736B57 
 12693      69746869 
 12693      6E53696E 
 12694              	.LASF248:
 12695 03f8 75785361 	 .ascii "uxSavedInterruptState\000"
 12695      76656449 
 12695      6E746572 
 12695      72757074 
 12695      53746174 
 12696              	.LASF162:
 12697 040e 756C4269 	 .ascii "ulBitsToClearOnEntry\000"
 12697      7473546F 
 12697      436C6561 
 12697      724F6E45 
 12697      6E747279 
 12698              	.LASF137:
 12699 0423 7850656E 	 .ascii "xPendingReadyList\000"
 12699      64696E67 
 12699      52656164 
 12699      794C6973 
 12699      7400
 12700              	.LASF68:
 12701 0435 70785072 	 .ascii "pxPrevious\000"
 12701      6576696F 
 12701      757300
 12702              	.LASF208:
 12703 0440 76546173 	 .ascii "vTaskSetTimeOutState\000"
 12703      6B536574 
 12703      54696D65 
 12703      4F757453 
 12703      74617465 
 12704              	.LASF16:
 12705 0455 5F5F7569 	 .ascii "__uint16_t\000"
 12705      6E743136 
 12705      5F7400
 12706              	.LASF220:
 12707 0460 70785465 	 .ascii "pxTemp\000"
 12707      6D7000
 12708              	.LASF233:
 12709 0467 76546173 	 .ascii "vTaskSuspendAll\000"
 12709      6B537573 
ARM GAS   			page 313


 12709      70656E64 
 12709      416C6C00 
 12710              	.LASF185:
 12711 0477 70784E65 	 .ascii "pxNextTCB\000"
 12711      78745443 
 12711      4200
 12712              	.LASF51:
 12713 0481 6C6C6469 	 .ascii "lldiv\000"
 12713      7600
 12714              	.LASF52:
 12715 0487 61746F6C 	 .ascii "atoll\000"
 12715      6C00
 12716              	.LASF218:
 12717 048d 78546173 	 .ascii "xTaskIncrementTick\000"
 12717      6B496E63 
 12717      72656D65 
 12717      6E745469 
 12717      636B00
 12718              	.LASF153:
 12719 04a0 654F7269 	 .ascii "eOriginalNotifyState\000"
 12719      67696E61 
 12719      6C4E6F74 
 12719      69667953 
 12719      74617465 
 12720              	.LASF94:
 12721 04b5 654E6F74 	 .ascii "eNotifyAction\000"
 12721      69667941 
 12721      6374696F 
 12721      6E00
 12722              	.LASF12:
 12723 04c3 73697A65 	 .ascii "size_t\000"
 12723      5F7400
 12724              	.LASF45:
 12725 04ca 73747274 	 .ascii "strtod\000"
 12725      6F6400
 12726              	.LASF44:
 12727 04d1 7372616E 	 .ascii "srand\000"
 12727      6400
 12728              	.LASF105:
 12729 04d7 7848616E 	 .ascii "xHandle\000"
 12729      646C6500 
 12730              	.LASF113:
 12731 04df 5461736B 	 .ascii "TaskStatus_t\000"
 12731      53746174 
 12731      75735F74 
 12731      00
 12732              	.LASF91:
 12733 04ec 65496E63 	 .ascii "eIncrement\000"
 12733      72656D65 
 12733      6E7400
 12734              	.LASF73:
 12735 04f7 784D494E 	 .ascii "xMINI_LIST_ITEM\000"
 12735      495F4C49 
 12735      53545F49 
 12735      54454D00 
 12736              	.LASF36:
 12737 0507 62736561 	 .ascii "bsearch\000"
ARM GAS   			page 314


 12737      72636800 
 12738              	.LASF140:
 12739 050f 78546963 	 .ascii "xTickCount\000"
 12739      6B436F75 
 12739      6E7400
 12740              	.LASF75:
 12741 051a 784C4953 	 .ascii "xLIST\000"
 12741      5400
 12742              	.LASF234:
 12743 0520 76546173 	 .ascii "vTaskEndScheduler\000"
 12743      6B456E64 
 12743      53636865 
 12743      64756C65 
 12743      7200
 12744              	.LASF249:
 12745 0532 75785461 	 .ascii "uxTaskPriorityGet\000"
 12745      736B5072 
 12745      696F7269 
 12745      74794765 
 12745      7400
 12746              	.LASF207:
 12747 0544 78436F6E 	 .ascii "xConstTickCount\000"
 12747      73745469 
 12747      636B436F 
 12747      756E7400 
 12748              	.LASF138:
 12749 0554 78537573 	 .ascii "xSuspendedTaskList\000"
 12749      70656E64 
 12749      65645461 
 12749      736B4C69 
 12749      737400
 12750              	.LASF197:
 12751 0567 70634E61 	 .ascii "pcName\000"
 12751      6D6500
 12752              	.LASF119:
 12753 056e 74736B54 	 .ascii "tskTaskControlBlock\000"
 12753      61736B43 
 12753      6F6E7472 
 12753      6F6C426C 
 12753      6F636B00 
 12754              	.LASF136:
 12755 0582 70784F76 	 .ascii "pxOverflowDelayedTaskList\000"
 12755      6572666C 
 12755      6F774465 
 12755      6C617965 
 12755      64546173 
 12756              	.LASF215:
 12757 059c 76546173 	 .ascii "vTaskPlaceOnEventList\000"
 12757      6B506C61 
 12757      63654F6E 
 12757      4576656E 
 12757      744C6973 
 12758              	.LASF250:
 12759 05b2 76546173 	 .ascii "vTaskDelay\000"
 12759      6B44656C 
 12759      617900
 12760              	.LASF225:
ARM GAS   			page 315


 12761 05bd 70765461 	 .ascii "pvTaskIncrementMutexHeldCount\000"
 12761      736B496E 
 12761      6372656D 
 12761      656E744D 
 12761      75746578 
 12762              	.LASF109:
 12763 05db 75784375 	 .ascii "uxCurrentPriority\000"
 12763      7272656E 
 12763      74507269 
 12763      6F726974 
 12763      7900
 12764              	.LASF128:
 12765 05ed 756C4E6F 	 .ascii "ulNotifiedValue\000"
 12765      74696669 
 12765      65645661 
 12765      6C756500 
 12766              	.LASF127:
 12767 05fd 75784D75 	 .ascii "uxMutexesHeld\000"
 12767      74657865 
 12767      7348656C 
 12767      6400
 12768              	.LASF172:
 12769 060b 78546173 	 .ascii "xTaskPriorityDisinherit\000"
 12769      6B507269 
 12769      6F726974 
 12769      79446973 
 12769      696E6865 
 12770              	.LASF212:
 12771 0623 78546173 	 .ascii "xTaskRemoveFromEventList\000"
 12771      6B52656D 
 12771      6F766546 
 12771      726F6D45 
 12771      76656E74 
 12772              	.LASF22:
 12773 063c 63686172 	 .ascii "char\000"
 12773      00
 12774              	.LASF71:
 12775 0641 4C697374 	 .ascii "ListItem_t\000"
 12775      4974656D 
 12775      5F7400
 12776              	.LASF25:
 12777 064c 35646976 	 .ascii "5div_t\000"
 12777      5F7400
 12778              	.LASF93:
 12779 0653 65536574 	 .ascii "eSetValueWithoutOverwrite\000"
 12779      56616C75 
 12779      65576974 
 12779      686F7574 
 12779      4F766572 
 12780              	.LASF161:
 12781 066d 78546173 	 .ascii "xTaskNotifyWait\000"
 12781      6B4E6F74 
 12781      69667957 
 12781      61697400 
 12782              	.LASF64:
 12783 067d 55426173 	 .ascii "UBaseType_t\000"
 12783      65547970 
ARM GAS   			page 316


 12783      655F7400 
 12784              	.LASF199:
 12785 0689 70727649 	 .ascii "prvIdleTask\000"
 12785      646C6554 
 12785      61736B00 
 12786              	.LASF78:
 12787 0695 784C6973 	 .ascii "xListEnd\000"
 12787      74456E64 
 12787      00
 12788              	.LASF87:
 12789 069e 31306554 	 .ascii "10eTaskState\000"
 12789      61736B53 
 12789      74617465 
 12789      00
 12790              	.LASF167:
 12791 06ab 756C5461 	 .ascii "ulTaskNotifyTake\000"
 12791      736B4E6F 
 12791      74696679 
 12791      54616B65 
 12791      00
 12792              	.LASF74:
 12793 06bc 4D696E69 	 .ascii "MiniListItem_t\000"
 12793      4C697374 
 12793      4974656D 
 12793      5F7400
 12794              	.LASF58:
 12795 06cb 75696E74 	 .ascii "uint8_t\000"
 12795      385F7400 
 12796              	.LASF82:
 12797 06d3 65526561 	 .ascii "eReady\000"
 12797      647900
 12798              	.LASF23:
 12799 06da 71756F74 	 .ascii "quot\000"
 12799      00
 12800              	.LASF192:
 12801 06df 70784E65 	 .ascii "pxNewTCB\000"
 12801      77544342 
 12801      00
 12802              	.LASF217:
 12803 06e8 7578546F 	 .ascii "uxTopPriority\000"
 12803      70507269 
 12803      6F726974 
 12803      7900
 12804              	.LASF224:
 12805 06f6 75785175 	 .ascii "uxQueue\000"
 12805      65756500 
 12806              	.LASF253:
 12807 06fe 70785461 	 .ascii "pxTaskCode\000"
 12807      736B436F 
 12807      646500
 12808              	.LASF40:
 12809 0709 6D627374 	 .ascii "mbstowcs\000"
 12809      6F776373 
 12809      00
 12810              	.LASF103:
 12811 0712 4D656D6F 	 .ascii "MemoryRegion_t\000"
 12811      72795265 
ARM GAS   			page 317


 12811      67696F6E 
 12811      5F7400
 12812              	.LASF146:
 12813 0721 784E6578 	 .ascii "xNextTaskUnblockTime\000"
 12813      74546173 
 12813      6B556E62 
 12813      6C6F636B 
 12813      54696D65 
 12814              	.LASF271:
 12815 0736 756C506F 	 .ascii "ulPortRaiseBASEPRI\000"
 12815      72745261 
 12815      69736542 
 12815      41534550 
 12815      524900
 12816              	.LASF9:
 12817 0749 6C6F6E67 	 .ascii "long long int\000"
 12817      206C6F6E 
 12817      6720696E 
 12817      7400
 12818              	.LASF263:
 12819 0757 474E5520 	 .ascii "GNU C++14 10.3.1 20210824 (release) -mcpu=cortex-m4"
 12819      432B2B31 
 12819      34203130 
 12819      2E332E31 
 12819      20323032 
 12820 078a 202D6D66 	 .ascii " -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mfix-cortex-m3"
 12820      6C6F6174 
 12820      2D616269 
 12820      3D686172 
 12820      64202D6D 
 12821 07bd 2D6C6472 	 .ascii "-ldrd -mthumb -mno-unaligned-access -mapcs-frame -m"
 12821      64202D6D 
 12821      7468756D 
 12821      62202D6D 
 12821      6E6F2D75 
 12822 07f0 61726368 	 .ascii "arch=armv7e-m+fp -g -g -O0 -fsingle-precision-const"
 12822      3D61726D 
 12822      7637652D 
 12822      6D2B6670 
 12822      202D6720 
 12823 0823 616E7420 	 .ascii "ant -funsigned-char -ffunction-sections -fdata-sect"
 12823      2D66756E 
 12823      7369676E 
 12823      65642D63 
 12823      68617220 
 12824 0856 696F6E73 	 .ascii "ions\000"
 12824      00
 12825              	.LASF85:
 12826 085b 6544656C 	 .ascii "eDeleted\000"
 12826      65746564 
 12826      00
 12827              	.LASF221:
 12828 0864 75785461 	 .ascii "uxTaskGetSystemState\000"
 12828      736B4765 
 12828      74537973 
 12828      74656D53 
 12828      74617465 
ARM GAS   			page 318


 12829              	.LASF259:
 12830 0879 7563506F 	 .ascii "ucPortCountLeadingZeros\000"
 12830      7274436F 
 12830      756E744C 
 12830      65616469 
 12830      6E675A65 
 12831              	.LASF256:
 12832 0891 756C4E65 	 .ascii "ulNewBASEPRI\000"
 12832      77424153 
 12832      45505249 
 12832      00
 12833              	.LASF101:
 12834 089e 756C4C65 	 .ascii "ulLengthInBytes\000"
 12834      6E677468 
 12834      496E4279 
 12834      74657300 
 12835              	.LASF63:
 12836 08ae 42617365 	 .ascii "BaseType_t\000"
 12836      54797065 
 12836      5F7400
 12837              	.LASF5:
 12838 08b9 5F5F6378 	 .ascii "__cxx11\000"
 12838      78313100 
 12839              	.LASF193:
 12840 08c1 70727652 	 .ascii "prvResetNextTaskUnblockTime\000"
 12840      65736574 
 12840      4E657874 
 12840      5461736B 
 12840      556E626C 
 12841              	.LASF97:
 12842 08dd 7854696D 	 .ascii "xTimeOnEntering\000"
 12842      654F6E45 
 12842      6E746572 
 12842      696E6700 
 12843              	.LASF244:
 12844 08ed 75784E65 	 .ascii "uxNewPriority\000"
 12844      77507269 
 12844      6F726974 
 12844      7900
 12845              	.LASF61:
 12846 08fb 5461736B 	 .ascii "TaskFunction_t\000"
 12846      46756E63 
 12846      74696F6E 
 12846      5F7400
 12847              	.LASF67:
 12848 090a 70784E65 	 .ascii "pxNext\000"
 12848      787400
 12849              	.LASF159:
 12850 0911 70756C50 	 .ascii "pulPreviousNotificationValue\000"
 12850      72657669 
 12850      6F75734E 
 12850      6F746966 
 12850      69636174 
 12851              	.LASF116:
 12852 092e 65576169 	 .ascii "eWaitingNotification\000"
 12852      74696E67 
 12852      4E6F7469 
ARM GAS   			page 319


 12852      66696361 
 12852      74696F6E 
 12853              	.LASF205:
 12854 0943 70785469 	 .ascii "pxTimeOut\000"
 12854      6D654F75 
 12854      7400
 12855              	.LASF38:
 12856 094d 6C646976 	 .ascii "ldiv\000"
 12856      00
 12857              	.LASF114:
 12858 0952 3132654E 	 .ascii "12eNotifyValue\000"
 12858      6F746966 
 12858      7956616C 
 12858      756500
 12859              	.LASF247:
 12860 0961 75785461 	 .ascii "uxTaskPriorityGetFromISR\000"
 12860      736B5072 
 12860      696F7269 
 12860      74794765 
 12860      7446726F 
 12861              	.LASF179:
 12862 097a 756C436F 	 .ascii "ulCount\000"
 12862      756E7400 
 12863              	.LASF30:
 12864 0982 5F5F636F 	 .ascii "__compar_fn_t\000"
 12864      6D706172 
 12864      5F666E5F 
 12864      7400
 12865              	.LASF98:
 12866 0990 54696D65 	 .ascii "TimeOut_t\000"
 12866      4F75745F 
 12866      7400
 12867              	.LASF126:
 12868 099a 75785461 	 .ascii "uxTaskNumber\000"
 12868      736B4E75 
 12868      6D626572 
 12868      00
 12869              	.LASF80:
 12870 09a7 5461736B 	 .ascii "TaskHandle_t\000"
 12870      48616E64 
 12870      6C655F74 
 12870      00
 12871              	.LASF158:
 12872 09b4 65416374 	 .ascii "eAction\000"
 12872      696F6E00 
 12873              	.LASF260:
 12874 09bc 756C4E65 	 .ascii "ulNewMaskValue\000"
 12874      774D6173 
 12874      6B56616C 
 12874      756500
 12875              	.LASF187:
 12876 09cb 75785461 	 .ascii "uxTask\000"
 12876      736B00
 12877              	.LASF170:
 12878 09d2 75785461 	 .ascii "uxTaskResetEventItemValue\000"
 12878      736B5265 
 12878      73657445 
ARM GAS   			page 320


 12878      76656E74 
 12878      4974656D 
 12879              	.LASF243:
 12880 09ec 76546173 	 .ascii "vTaskPrioritySet\000"
 12880      6B507269 
 12880      6F726974 
 12880      79536574 
 12880      00
 12881              	.LASF86:
 12882 09fd 65546173 	 .ascii "eTaskState\000"
 12882      6B537461 
 12882      746500
 12883              	.LASF118:
 12884 0a08 654E6F74 	 .ascii "eNotifyValue\000"
 12884      69667956 
 12884      616C7565 
 12884      00
 12885              	.LASF79:
 12886 0a15 4C697374 	 .ascii "List_t\000"
 12886      5F7400
 12887              	.LASF65:
 12888 0a1c 5469636B 	 .ascii "TickType_t\000"
 12888      54797065 
 12888      5F7400
 12889              	.LASF151:
 12890 0a27 78546173 	 .ascii "xTaskToNotify\000"
 12890      6B546F4E 
 12890      6F746966 
 12890      7900
 12891              	.LASF150:
 12892 0a35 78546173 	 .ascii "xTask\000"
 12892      6B00
 12893              	.LASF90:
 12894 0a3b 65536574 	 .ascii "eSetBits\000"
 12894      42697473 
 12894      00
 12895              	.LASF196:
 12896 0a44 70727649 	 .ascii "prvInitialiseTCBVariables\000"
 12896      6E697469 
 12896      616C6973 
 12896      65544342 
 12896      56617269 
 12897              	.LASF10:
 12898 0a5e 6C6F6E67 	 .ascii "long double\000"
 12898      20646F75 
 12898      626C6500 
 12899              	.LASF99:
 12900 0a6a 784D454D 	 .ascii "xMEMORY_REGION\000"
 12900      4F52595F 
 12900      52454749 
 12900      4F4E00
 12901              	.LASF59:
 12902 0a79 75696E74 	 .ascii "uint16_t\000"
 12902      31365F74 
 12902      00
 12903              	.LASF252:
 12904 0a82 78546173 	 .ascii "xTaskGenericCreate\000"
ARM GAS   			page 321


 12904      6B47656E 
 12904      65726963 
 12904      43726561 
 12904      746500
 12905              	.LASF216:
 12906 0a95 76546173 	 .ascii "vTaskSwitchContext\000"
 12906      6B537769 
 12906      74636843 
 12906      6F6E7465 
 12906      787400
 12907              	.LASF145:
 12908 0aa8 784E756D 	 .ascii "xNumOfOverflows\000"
 12908      4F664F76 
 12908      6572666C 
 12908      6F777300 
 12909              	.LASF70:
 12910 0ab8 7076436F 	 .ascii "pvContainer\000"
 12910      6E746169 
 12910      6E657200 
 12911              	.LASF269:
 12912 0ac4 70784375 	 .ascii "pxCurrentTCB\000"
 12912      7272656E 
 12912      74544342 
 12912      00
 12913              	.LASF15:
 12914 0ad1 73686F72 	 .ascii "short int\000"
 12914      7420696E 
 12914      7400
 12915              	.LASF108:
 12916 0adb 65437572 	 .ascii "eCurrentState\000"
 12916      72656E74 
 12916      53746174 
 12916      6500
 12917              	.LASF261:
 12918 0ae9 756C4269 	 .ascii "ulBitmap\000"
 12918      746D6170 
 12918      00
 12919              	.LASF200:
 12920 0af2 70765061 	 .ascii "pvParameters\000"
 12920      72616D65 
 12920      74657273 
 12920      00
 12921              	.LASF66:
 12922 0aff 78497465 	 .ascii "xItemValue\000"
 12922      6D56616C 
 12922      756500
 12923              	.LASF18:
 12924 0b0a 6C6F6E67 	 .ascii "long int\000"
 12924      20696E74 
 12924      00
 12925              	.LASF104:
 12926 0b13 78544153 	 .ascii "xTASK_STATUS\000"
 12926      4B5F5354 
 12926      41545553 
 12926      00
 12927              	.LASF230:
 12928 0b20 78546173 	 .ascii "xTaskResumeAll\000"
ARM GAS   			page 322


 12928      6B526573 
 12928      756D6541 
 12928      6C6C00
 12929              	.LASF174:
 12930 0b2f 76546173 	 .ascii "vTaskNotifyGiveFromISR\000"
 12930      6B4E6F74 
 12930      69667947 
 12930      69766546 
 12930      726F6D49 
 12931              	.LASF135:
 12932 0b46 70784465 	 .ascii "pxDelayedTaskList\000"
 12932      6C617965 
 12932      64546173 
 12932      6B4C6973 
 12932      7400
 12933              	.LASF228:
 12934 0b58 78546173 	 .ascii "xTaskGetTickCount\000"
 12934      6B476574 
 12934      5469636B 
 12934      436F756E 
 12934      7400
 12935              	.LASF258:
 12936 0b6a 76506F72 	 .ascii "vPortRaiseBASEPRI\000"
 12936      74526169 
 12936      73654241 
 12936      53455052 
 12936      4900
 12937              	.LASF240:
 12938 0b7c 70727654 	 .ascii "prvTaskIsTaskSuspended\000"
 12938      61736B49 
 12938      73546173 
 12938      6B537573 
 12938      70656E64 
 12939              	.LASF31:
 12940 0b93 61746578 	 .ascii "atexit\000"
 12940      697400
 12941              	.LASF201:
 12942 0b9a 76546173 	 .ascii "vTaskSetTaskNumber\000"
 12942      6B536574 
 12942      5461736B 
 12942      4E756D62 
 12942      657200
 12943              	.LASF219:
 12944 0bad 78537769 	 .ascii "xSwitchRequired\000"
 12944      74636852 
 12944      65717569 
 12944      72656400 
 12945              	.LASF173:
 12946 0bbd 70784D75 	 .ascii "pxMutexHolder\000"
 12946      74657848 
 12946      6F6C6465 
 12946      7200
 12947              	.LASF246:
 12948 0bcb 75785072 	 .ascii "uxPriorityUsedOnEntry\000"
 12948      696F7269 
 12948      74795573 
 12948      65644F6E 
ARM GAS   			page 323


 12948      456E7472 
 12949              	.LASF124:
 12950 0be1 70785374 	 .ascii "pxStack\000"
 12950      61636B00 
 12951              	.LASF157:
 12952 0be9 756C5661 	 .ascii "ulValue\000"
 12952      6C756500 
 12953              	.LASF242:
 12954 0bf1 78546173 	 .ascii "xTaskToSuspend\000"
 12954      6B546F53 
 12954      75737065 
 12954      6E6400
 12955              	.LASF204:
 12956 0c00 78546173 	 .ascii "xTaskCheckForTimeOut\000"
 12956      6B436865 
 12956      636B466F 
 12956      7254696D 
 12956      654F7574 
 12957              	.LASF27:
 12958 0c15 6C646976 	 .ascii "ldiv_t\000"
 12958      5F7400
 12959              	.LASF165:
 12960 0c1c 78546963 	 .ascii "xTicksToWait\000"
 12960      6B73546F 
 12960      57616974 
 12960      00
 12961              	.LASF13:
 12962 0c29 5F5F7569 	 .ascii "__uint8_t\000"
 12962      6E74385F 
 12962      7400
 12963              	.LASF115:
 12964 0c33 654E6F74 	 .ascii "eNotWaitingNotification\000"
 12964      57616974 
 12964      696E674E 
 12964      6F746966 
 12964      69636174 
 12965              	.LASF262:
 12966 0c4b 75635265 	 .ascii "ucReturn\000"
 12966      7475726E 
 12966      00
 12967              	.LASF122:
 12968 0c54 78457665 	 .ascii "xEventListItem\000"
 12968      6E744C69 
 12968      73744974 
 12968      656D00
 12969              	.LASF236:
 12970 0c63 78546173 	 .ascii "xTaskResumeFromISR\000"
 12970      6B526573 
 12970      756D6546 
 12970      726F6D49 
 12970      535200
 12971              	.LASF164:
 12972 0c76 70756C4E 	 .ascii "pulNotificationValue\000"
 12972      6F746966 
 12972      69636174 
 12972      696F6E56 
 12972      616C7565 
ARM GAS   			page 324


 12973              	.LASF149:
 12974 0c8b 78526574 	 .ascii "xReturn\000"
 12974      75726E00 
 12975              	.LASF47:
 12976 0c93 73747274 	 .ascii "strtoul\000"
 12976      6F756C00 
 12977              	.LASF143:
 12978 0c9b 75785065 	 .ascii "uxPendedTicks\000"
 12978      6E646564 
 12978      5469636B 
 12978      7300
 12979              	.LASF20:
 12980 0ca9 6C6F6E67 	 .ascii "long unsigned int\000"
 12980      20756E73 
 12980      69676E65 
 12980      6420696E 
 12980      7400
 12981              	.LASF184:
 12982 0cbb 65537461 	 .ascii "eState\000"
 12982      746500
 12983              	.LASF182:
 12984 0cc2 70785461 	 .ascii "pxTaskStatusArray\000"
 12984      736B5374 
 12984      61747573 
 12984      41727261 
 12984      7900
 12985              	.LASF229:
 12986 0cd4 78546963 	 .ascii "xTicks\000"
 12986      6B7300
 12987              	.LASF235:
 12988 0cdb 76546173 	 .ascii "vTaskStartScheduler\000"
 12988      6B537461 
 12988      72745363 
 12988      68656475 
 12988      6C657200 
 12989              	.LASF222:
 12990 0cef 75784172 	 .ascii "uxArraySize\000"
 12990      72617953 
 12990      697A6500 
 12991              	.LASF81:
 12992 0cfb 6552756E 	 .ascii "eRunning\000"
 12992      6E696E67 
 12992      00
 12993              	.LASF111:
 12994 0d04 756C5275 	 .ascii "ulRunTimeCounter\000"
 12994      6E54696D 
 12994      65436F75 
 12994      6E746572 
 12994      00
 12995              	.LASF100:
 12996 0d15 70764261 	 .ascii "pvBaseAddress\000"
 12996      73654164 
 12996      64726573 
 12996      7300
 12997              	.LASF251:
 12998 0d23 78546963 	 .ascii "xTicksToDelay\000"
 12998      6B73546F 
ARM GAS   			page 325


 12998      44656C61 
 12998      7900
 12999              	.LASF24:
 13000 0d31 6469765F 	 .ascii "div_t\000"
 13000      7400
 13001              	.LASF14:
 13002 0d37 756E7369 	 .ascii "unsigned char\000"
 13002      676E6564 
 13002      20636861 
 13002      7200
 13003              	.LASF214:
 13004 0d45 76546173 	 .ascii "vTaskPlaceOnUnorderedEventList\000"
 13004      6B506C61 
 13004      63654F6E 
 13004      556E6F72 
 13004      64657265 
 13005              	.LASF209:
 13006 0d64 78546173 	 .ascii "xTaskRemoveFromUnorderedEventList\000"
 13006      6B52656D 
 13006      6F766546 
 13006      726F6D55 
 13006      6E6F7264 
 13007              	.LASF19:
 13008 0d86 5F5F7569 	 .ascii "__uint32_t\000"
 13008      6E743332 
 13008      5F7400
 13009              	.LASF206:
 13010 0d91 70785469 	 .ascii "pxTicksToWait\000"
 13010      636B7354 
 13010      6F576169 
 13010      7400
 13011              	.LASF232:
 13012 0d9f 76546173 	 .ascii "vTaskMissedYield\000"
 13012      6B4D6973 
 13012      73656459 
 13012      69656C64 
 13012      00
 13013              	.LASF110:
 13014 0db0 75784261 	 .ascii "uxBasePriority\000"
 13014      73655072 
 13014      696F7269 
 13014      747900
 13015              	.LASF267:
 13016 0dbf 6465636C 	 .ascii "decltype(nullptr)\000"
 13016      74797065 
 13016      286E756C 
 13016      6C707472 
 13016      2900
 13017              	.LASF55:
 13018 0dd1 73747274 	 .ascii "strtof\000"
 13018      6F6600
 13019              	.LASF62:
 13020 0dd8 53746163 	 .ascii "StackType_t\000"
 13020      6B547970 
 13020      655F7400 
 13021              	.LASF131:
 13022 0de4 5443425F 	 .ascii "TCB_t\000"
ARM GAS   			page 326


 13022      7400
 13023              	.LASF49:
 13024 0dea 77637374 	 .ascii "wcstombs\000"
 13024      6F6D6273 
 13024      00
 13025              	.LASF46:
 13026 0df3 73747274 	 .ascii "strtol\000"
 13026      6F6C00
 13027              	.LASF69:
 13028 0dfa 70764F77 	 .ascii "pvOwner\000"
 13028      6E657200 
 13029              	.LASF83:
 13030 0e02 65426C6F 	 .ascii "eBlocked\000"
 13030      636B6564 
 13030      00
 13031              	.LASF241:
 13032 0e0b 76546173 	 .ascii "vTaskSuspend\000"
 13032      6B537573 
 13032      70656E64 
 13032      00
 13033              	.LASF231:
 13034 0e18 78416C72 	 .ascii "xAlreadyYielded\000"
 13034      65616479 
 13034      5969656C 
 13034      64656400 
 13035              	.LASF177:
 13036 0e28 78546173 	 .ascii "xTaskGetCurrentTaskHandle\000"
 13036      6B476574 
 13036      43757272 
 13036      656E7454 
 13036      61736B48 
 13037              	.LASF186:
 13038 0e42 70784669 	 .ascii "pxFirstTCB\000"
 13038      72737454 
 13038      434200
 13039              	.LASF180:
 13040 0e4d 70727654 	 .ascii "prvTaskCheckFreeStackSpace\000"
 13040      61736B43 
 13040      6865636B 
 13040      46726565 
 13040      53746163 
 13041              	.LASF26:
 13042 0e68 366C6469 	 .ascii "6ldiv_t\000"
 13042      765F7400 
 13043              	.LASF198:
 13044 0e70 78526567 	 .ascii "xRegions\000"
 13044      696F6E73 
 13044      00
 13045              	.LASF194:
 13046 0e79 70727641 	 .ascii "prvAddCurrentTaskToDelayedList\000"
 13046      64644375 
 13046      7272656E 
 13046      74546173 
 13046      6B546F44 
 13047              	.LASF112:
 13048 0e98 75735374 	 .ascii "usStackHighWaterMark\000"
 13048      61636B48 
ARM GAS   			page 327


 13048      69676857 
 13048      61746572 
 13048      4D61726B 
 13049              	.LASF28:
 13050 0ead 376C6C64 	 .ascii "7lldiv_t\000"
 13050      69765F74 
 13050      00
 13051              	.LASF139:
 13052 0eb6 75784375 	 .ascii "uxCurrentNumberOfTasks\000"
 13052      7272656E 
 13052      744E756D 
 13052      6265724F 
 13052      66546173 
 13053              	.LASF11:
 13054 0ecd 7369676E 	 .ascii "signed char\000"
 13054      65642063 
 13054      68617200 
 13055              	.LASF88:
 13056 0ed9 3133654E 	 .ascii "13eNotifyAction\000"
 13056      6F746966 
 13056      79416374 
 13056      696F6E00 
 13057              	.LASF203:
 13058 0ee9 75785461 	 .ascii "uxTaskGetTaskNumber\000"
 13058      736B4765 
 13058      74546173 
 13058      6B4E756D 
 13058      62657200 
 13059              	.LASF17:
 13060 0efd 73686F72 	 .ascii "short unsigned int\000"
 13060      7420756E 
 13060      7369676E 
 13060      65642069 
 13060      6E7400
 13061              	.LASF166:
 13062 0f10 7854696D 	 .ascii "xTimeToWake\000"
 13062      65546F57 
 13062      616B6500 
 13063              	.LASF155:
 13064 0f1c 78546173 	 .ascii "xTaskNotifyStateClear\000"
 13064      6B4E6F74 
 13064      69667953 
 13064      74617465 
 13064      436C6561 
 13065              	.LASF29:
 13066 0f32 6C6C6469 	 .ascii "lldiv_t\000"
 13066      765F7400 
 13067              	.LASF32:
 13068 0f3a 61746F66 	 .ascii "atof\000"
 13068      00
 13069              	.LASF148:
 13070 0f3f 70785443 	 .ascii "pxTCB\000"
 13070      4200
 13071              	.LASF34:
 13072 0f45 61746F69 	 .ascii "atoi\000"
 13072      00
 13073              	.LASF35:
ARM GAS   			page 328


 13074 0f4a 61746F6C 	 .ascii "atol\000"
 13074      00
 13075              	.LASF50:
 13076 0f4f 7763746F 	 .ascii "wctomb\000"
 13076      6D6200
 13077              	.LASF33:
 13078 0f56 646F7562 	 .ascii "double\000"
 13078      6C6500
 13079              	.LASF147:
 13080 0f5d 75785363 	 .ascii "uxSchedulerSuspended\000"
 13080      68656475 
 13080      6C657253 
 13080      75737065 
 13080      6E646564 
 13081              	.LASF191:
 13082 0f72 70757853 	 .ascii "puxStackBuffer\000"
 13082      7461636B 
 13082      42756666 
 13082      657200
 13083              	.LASF264:
 13084 0f81 433A5C55 	 .ascii "C:\\Users\\niels\\Documents\\Elektrotechniek\\Jaar "
 13084      73657273 
 13084      5C6E6965 
 13084      6C735C44 
 13084      6F63756D 
 13085 0faf 325C4543 	 .ascii "2\\ECS\\ECSL\\software\\STM32\\STM32Basis\\HAL\\gem"
 13085      535C4543 
 13085      534C5C73 
 13085      6F667477 
 13085      6172655C 
 13086 0fdb 65656E73 	 .ascii "eenschappelijk\\Third_Party\\FreeRTOS\\Source\\task"
 13086      63686170 
 13086      70656C69 
 13086      6A6B5C54 
 13086      68697264 
 13087 100a 732E6300 	 .ascii "s.c\000"
 13088              	.LASF227:
 13089 100e 78546173 	 .ascii "xTaskGetTickCountFromISR\000"
 13089      6B476574 
 13089      5469636B 
 13089      436F756E 
 13089      7446726F 
 13090              	.LASF120:
 13091 1027 7078546F 	 .ascii "pxTopOfStack\000"
 13091      704F6653 
 13091      7461636B 
 13091      00
 13092              	.LASF239:
 13093 1034 76546173 	 .ascii "vTaskResume\000"
 13093      6B526573 
 13093      756D6500 
 13094              	.LASF195:
 13095 1040 70727649 	 .ascii "prvInitialiseTaskLists\000"
 13095      6E697469 
 13095      616C6973 
 13095      65546173 
 13095      6B4C6973 
ARM GAS   			page 329


 13096              	.LASF183:
 13097 1057 70784C69 	 .ascii "pxList\000"
 13097      737400
 13098              	.LASF210:
 13099 105e 70784576 	 .ascii "pxEventListItem\000"
 13099      656E744C 
 13099      69737449 
 13099      74656D00 
 13100              	.LASF254:
 13101 106e 70784372 	 .ascii "pxCreatedTask\000"
 13101      65617465 
 13101      64546173 
 13101      6B00
 13102              	.LASF270:
 13103 107c 70727643 	 .ascii "prvCheckTasksWaitingTermination\000"
 13103      6865636B 
 13103      5461736B 
 13103      73576169 
 13103      74696E67 
 13104              	.LASF169:
 13105 109c 756C5265 	 .ascii "ulReturn\000"
 13105      7475726E 
 13105      00
 13106              	.LASF43:
 13107 10a5 71736F72 	 .ascii "qsort\000"
 13107      7400
 13108              	.LASF245:
 13109 10ab 75784375 	 .ascii "uxCurrentBasePriority\000"
 13109      7272656E 
 13109      74426173 
 13109      65507269 
 13109      6F726974 
 13110              	.LASF144:
 13111 10c1 78596965 	 .ascii "xYieldPending\000"
 13111      6C645065 
 13111      6E64696E 
 13111      6700
 13112              	 .ident "GCC: (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release)"
